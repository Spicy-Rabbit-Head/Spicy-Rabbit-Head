{
  "name": "icon",
  "type": "registry:component",
  "description": "用于在界面中渲染矢量图标或自定义 SVG，动态尺寸、旋转、脉冲动画等视觉状态。",
  "files": [
    {
      "target": "components/icon/icon.tsx",
      "content": "import { computed, defineComponent, h, renderSlot } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { toNumber } from '@pocui/utils'\n\nimport { iconProps } from './props'\n\nimport type { CSSProperties } from 'vue'\n\nimport type { IconPresetEffect } from './symbol'\n\nconst internalEffects = Object.freeze<IconPresetEffect[]>(['spin-in', 'spin-out', 'pulse-in', 'pulse-out'])\n\nconst angleRE = /(^\\s*[+-]?\\d*\\.?\\d+\\s*)(deg|grad|turn|rad)?\\s*/i\n\nexport default defineComponent({\n  name: 'Icon',\n  description:'用于在界面中渲染矢量图标或自定义 SVG，动态尺寸、旋转、脉冲动画等视觉状态。',\n  categories: ['basic'],\n  props: iconProps,\n  setup(_props, { attrs, slots }) {\n    const props = useProps('icon', _props, {\n      icon: {\n        isFunc: true,\n        default: null,\n        static: true\n      },\n      scale: 1,\n      title: null,\n      label: null,\n      flip: {\n        default: null,\n        validator: value => ['horizontal', 'vertical', 'both'].includes(value)\n      },\n      effect: null,\n      size: null,\n      color: null,\n      rotate: null,\n      renderer: {\n        default: null,\n        isFunc: true\n      }\n    })\n\n    const nh = useNameHelper('icon')\n    const className = computed(() => {\n      let effectCls = ''\n\n      if (props.effect) {\n        effectCls = internalEffects.includes(props.effect as IconPresetEffect) ? nh.bm(props.effect) : props.effect\n      }\n\n      return [\n        nh.b(),\n        effectCls,\n        {\n          [nh.bm(`flip-${props.flip}`)]: props.flip\n        }\n      ]\n    })\n    const computedScale = computed(() => toNumber(props.scale) || 1)\n    const rotate = computed(() => {\n      if (typeof props.rotate === 'number') {\n        return `${(props.rotate % 4) / 4}turn`\n      }\n\n      const matched = props.rotate?.match(angleRE)\n\n      if (!matched) return null\n\n      const number = toNumber(matched[1])\n\n      if (!matched[2]) {\n        return `${(number % 4) / 4}turn`\n      }\n\n      return number ? `${number}${matched[2]}` : null\n    })\n    const style = computed(() => {\n      const style: CSSProperties = {\n        color: props.color\n      }\n\n      if (props.size) {\n        style.fontSize = props.size\n      } else if (computedScale.value !== 1) {\n        style.fontSize = `${computedScale.value}em`\n      }\n\n      if (rotate.value) {\n        style[nh.cv('rotate')] = rotate.value\n      }\n\n      return style\n    })\n\n    function renderDefault() {\n      const iAttrs = {\n        class: className.value,\n        style: style.value,\n        title: props.title,\n        role: (attrs.role as string) || (props.label || props.title ? 'img' : undefined),\n        'aria-label': props.label,\n        'aria-hidden': !(props.label || props.title)\n      }\n\n      if (props.icon) {\n        return <i {...iAttrs}>{typeof props.icon === 'string' ? <g class={props.icon}></g> : <g>{h(props.icon)}</g>}</i>\n      }\n\n      if (slots.default) {\n        return (\n          <i {...iAttrs}>\n            <g>{renderSlot(slots, 'default')}</g>\n          </i>\n        )\n      }\n\n      return <i {...iAttrs}></i>\n    }\n\n    return () => {\n      if (typeof props.renderer === 'function') {\n        return props.renderer(props as any, attrs, renderDefault)\n      }\n\n      return renderDefault()\n    }\n  }\n})\n"
    },
    {
      "target": "components/icon/index.ts",
      "content": "import Icon from './icon'\n\nimport type { ClassType, StyleType } from '@pocui/config'\n\nimport type { ComponentPublicInstance } from 'vue'\nimport type { IconProps } from './props'\n\nexport { Icon }\nexport { iconProps } from './props'\n\nexport type IconExposed = ComponentPublicInstance & InstanceType<typeof Icon>\n\nexport type { IconProps, IconCProps } from './props'\nexport type { IconEffect, IconBaseProps, IconRenderer } from './symbol'\n\nexport type IconMinorProps = Omit<Partial<IconProps>, 'icon'> & {\n  class?: ClassType,\n  style?: StyleType\n}\n"
    },
    {
      "target": "components/icon/props.ts",
      "content": "import { buildProps, iconProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { IconEffect, IconRenderer } from './symbol'\n\nexport const iconProps = buildProps({\n  icon: iconProp,\n  scale: [Number, String],\n  title: String,\n  label: String,\n  flip: String as PropType<'horizontal' | 'vertical' | 'both'>,\n  effect: String as PropType<IconEffect>,\n  size: String,\n  color: String,\n  rotate: [Number, String],\n  renderer: Function as PropType<IconRenderer>\n})\n\nexport type IconProps = ExtractPropTypes<typeof iconProps>\nexport type IconCProps = ConfigurableProps<IconProps, 'icon'>\n"
    },
    {
      "target": "components/icon/symbol.ts",
      "content": "import type { ClassType, StyleType } from '@pocui/config'\n\nexport type IconPresetEffect = 'spin-in' | 'spin-out' | 'pulse-in' | 'pulse-out'\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type IconEffect = IconPresetEffect | (string & {})\n\nexport interface IconBaseProps {\n  icon: Record<string, any>,\n\n  class?: ClassType,\n\n  style?: StyleType,\n\n  scale?: number | string,\n\n  title?: string,\n\n  label?: string,\n\n  flip?: 'horizontal' | 'vertical' | 'both',\n\n  effect?: IconEffect,\n\n  size?: string,\n\n  color?: string,\n\n  rotate?: number | string\n}\n\nexport type IconRenderer = (props: IconBaseProps, attrs: Record<string, any>, renderDefault: () => any) => any\n\nexport interface IconProps extends IconBaseProps {\n  renderer?: IconRenderer\n}\n\nexport type IconMinorProps = Omit<IconProps, 'icon'>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["icon.scss"],
  "categories": ["basic"],
  "meta": { "isReferenceOnly": false }
}
