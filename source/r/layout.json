{
  "name": "layout",
  "type": "registry:component",
  "description": "这是一个渐进式的强业务逻辑布局组件，根据需要可以进行不同程度的定制化。",
  "files": [
    {
      "target": "components/layout/helper.ts",
      "content": "import { computed, inject, onBeforeUnmount, onMounted, onUpdated, reactive, ref, watch } from 'vue'\n\nimport { isClient, noop } from '@pocui/utils'\n\nimport { LAYOUT_STATE } from './symbol'\n\nimport type { Ref } from 'vue'\n\nimport type { LayoutState } from './symbol'\n\nexport function useLayoutState() {\n  return inject(\n    LAYOUT_STATE,\n    reactive({\n      isLayout: false,\n      locked: false,\n      affixed: false,\n      scrollY: 0,\n      affixMatched: false,\n      expandMatched: false,\n      useExpand: false,\n      expanded: false,\n      reduced: false,\n      navConfig: false,\n      classes: Object.freeze({}),\n      changeInLock: noop\n    }) as LayoutState\n  )\n}\n\nconst breakPoints = Object.freeze(['xs', 'sm', 'md', 'lg', 'xl', 'xxl'])\n\nexport function useMediaQuery(query: Ref<string | boolean>) {\n  const matched = ref(false)\n  const updateTrigger = ref(0)\n\n  const computedStyle = isClient && getComputedStyle(document.documentElement)\n  const computedQuery = computed(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    updateTrigger.value\n\n    if (breakPoints.includes(query.value as any)) {\n      const usedQuery = query.value === 'xs' ? 'sm' : query.value\n      const media = computedStyle && computedStyle.getPropertyValue(`--poc-break-point-${usedQuery}`).trim()\n      return media && `only screen and ${media}`\n    }\n\n    return query.value\n  })\n\n  let isMounted = false\n  let mediaQuery: MediaQueryList | undefined\n\n  const update = () => {\n    if (typeof computedQuery.value === 'boolean') {\n      matched.value = computedQuery.value\n      return\n    }\n\n    if (!computedQuery.value || computedQuery.value === 'min') {\n      matched.value = false\n      return\n    }\n\n    if (computedQuery.value === 'max') {\n      matched.value = true\n      return\n    }\n\n    if (isMounted) {\n      mediaQuery = matchMedia(computedQuery.value)\n      mediaQuery?.addEventListener('change', update)\n    }\n\n    matched.value = mediaQuery!.matches\n  }\n\n  watch(computedQuery, () => {\n    update()\n  })\n\n  onMounted(() => {\n    ++updateTrigger.value\n    isMounted = true\n    update()\n  })\n\n  onBeforeUnmount(() => {\n    isMounted = false\n    mediaQuery?.removeEventListener('change', update)\n    mediaQuery = undefined\n  })\n\n  return matched\n}\n\nexport function useUpdateCounter() {\n  const counter = ref(0)\n\n  onMounted(() => {\n    counter.value++\n  })\n  onUpdated(() => {\n    counter.value++\n  })\n\n  return counter\n}\n"
    },
    {
      "target": "components/layout/index.ts",
      "content": "export { default as Layout } from './layout'\nexport { layoutProps } from './props'\n\nexport type { LayoutProps, LayoutCProps } from './props'\nexport type {\n  LayoutSignType,\n  LayoutConfig,\n  LayoutSection,\n  LayoutInnerClass,\n  LayoutMenuProps,\n  LayoutHeaderAction,\n  LayoutUser,\n  LayoutFooterLink,\n  LayoutExposed,\n  LayoutSlotParams,\n  LayoutHeaderSlotParams\n} from './symbol'\n"
    },
    {
      "target": "components/layout/layout-aside.tsx",
      "content": "import { Icon } from '@/components/icon'\n\nimport { Menu } from '@/components/menu'\nimport { NativeScroll } from '@/components/native-scroll'\n\nimport { SlotsType, computed, defineComponent, reactive, ref, renderSlot, shallowReadonly, toRef, watch } from 'vue'\n\nimport { emitEvent, useIcons, useNameHelper, useProps } from '@pocui/config'\n\nimport { useLayoutState, useMediaQuery, useUpdateCounter } from './helper'\nimport { layoutAsideProps } from './props'\nimport { LayoutSlotParams } from './symbol'\n\nimport type { MenuExposed } from '@/components/menu'\n\nexport default defineComponent({\n  name: 'LayoutAside',\n  description:'侧边栏区域，支持折叠、宽度自定义与滚动隔离，承载菜单、树形导航或工具面板。',\n  categories: ['layout'],\n  props: layoutAsideProps,\n  emits: ['update:reduced', 'update:expanded'],\n  slots: Object as SlotsType<{\n    top?(props: LayoutSlotParams): any,\n    default?(props: LayoutSlotParams): any,\n    bottom?(props: LayoutSlotParams): any,\n    expand?(props: LayoutSlotParams): any\n  }>,\n  setup(_props, { slots, emit, expose }) {\n    const props = useProps('layoutAside', _props, {\n      tag: 'aside',\n      expanded: false,\n      reduced: false,\n      menus: {\n        default: () => [],\n        static: true\n      },\n      menuProps: null,\n      logo: '',\n      signName: '',\n      fixed: 'lg',\n      signType: 'aside'\n    })\n\n    const nh = useNameHelper('layout')\n    const icons = useIcons()\n\n    const layoutState = useLayoutState()\n    const currentReduced = ref(props.reduced)\n    const currentExpanded = ref(props.expanded)\n    const scrollHeight = ref('100%')\n\n    const matched = useMediaQuery(toRef(props, 'fixed'))\n    const counter = useUpdateCounter()\n\n    const top = ref<HTMLElement>()\n    const bottom = ref<HTMLElement>()\n    const menu = ref<MenuExposed>()\n\n    const className = computed(() => {\n      return [\n        nh.be('aside'),\n        {\n          [nh.bs('vars')]: !layoutState.isLayout,\n          [nh.inc()]: layoutState.isLayout || props.inherit,\n          [nh.bem('aside', 'fixed')]: matched.value,\n          [nh.bem('aside', 'expanded')]: currentExpanded.value,\n          [nh.bem('aside', 'reduced')]: currentReduced.value,\n          [nh.bem('aside', 'no-sign')]: props.signType !== 'aside'\n        },\n        layoutState.classes.aside\n      ]\n    })\n    const hasTop = computed(() => {\n      return !!(props.logo || props.signName || slots.top)\n    })\n    const hasMenu = computed(() => {\n      return !!(props.menus?.length || props.menuProps?.router)\n    })\n\n    const slotParams = shallowReadonly(\n      reactive({\n        expanded: currentExpanded,\n        reduced: currentReduced,\n        toggleExpanded,\n        toggleReduced\n      })\n    )\n\n    expose({\n      menu,\n      toggleExpanded,\n      toggleReduced,\n      expandMenuByLabel\n    })\n\n    watch(\n      () => props.reduced,\n      value => {\n        currentReduced.value = value\n      }\n    )\n    watch(\n      () => props.expanded,\n      value => {\n        currentExpanded.value = value\n      }\n    )\n    watch(\n      matched,\n      value => {\n        layoutState.useExpand = !value\n        value && toggleExpanded(false)\n      },\n      { immediate: true }\n    )\n    watch(counter, () => computeScrollHeight)\n\n    function computeScrollHeight() {\n      let topHeight = 0\n      let bottomHeight = 0\n\n      if (top.value) {\n        topHeight = top.value.offsetHeight\n      }\n\n      if (bottom.value) {\n        bottomHeight = bottom.value.offsetHeight\n      }\n\n      if (topHeight || bottomHeight) {\n        scrollHeight.value = `calc(100% - ${topHeight + bottomHeight}px)`\n      } else {\n        scrollHeight.value = '100%'\n      }\n    }\n\n    function toggleExpanded(expanded = !currentExpanded.value) {\n      currentExpanded.value = expanded\n\n      emit('update:expanded', expanded)\n      emitEvent(props.onExpandedChange, expanded)\n    }\n\n    function toggleReduced(reduced = !currentReduced.value) {\n      currentReduced.value = reduced\n\n      emit('update:reduced', reduced)\n      emitEvent(props.onReducedChange, reduced)\n    }\n\n    function handleSignClick(event: MouseEvent) {\n      emitEvent(props.onSignClick, event)\n    }\n\n    function handleMenuSelect(label: string, meta: Record<string, any>) {\n      emitEvent(props.onMenuSelect, label, meta)\n    }\n\n    function expandMenuByLabel(label: string) {\n      menu.value?.expandItemByLabel(label)\n    }\n\n    return () => {\n      const CustomTag = (props.tag || 'aside') as any\n\n      return (\n        <CustomTag class={className.value}>\n          {hasTop.value && (\n            <div ref={top} class={[nh.be('aside-top'), layoutState.classes.asideTop]}>\n              {slots.top\n                ? (\n                    renderSlot(slots, 'top', slotParams)\n                  )\n                : (\n                  <div class={nh.be('sign')} onClick={handleSignClick}>\n                    {props.logo && (\n                      <div class={nh.be('logo')}>\n                        <img src={props.logo} alt='Logo' />\n                      </div>\n                    )}\n                    {props.signName && <span class={nh.be('sign-name')}>{props.signName}</span>}\n                  </div>\n                  )}\n            </div>\n          )}\n          <NativeScroll\n            class={[nh.be('aside-main'), layoutState.classes.main]}\n            use-y-bar\n            observe-deep\n            height={scrollHeight.value}\n          >\n            {slots.default\n              ? (\n                  renderSlot(slots, 'default', slotParams)\n                )\n              : hasMenu.value\n                ? (\n                  <Menu\n                    ref={menu}\n                    {...(props.menuProps || {})}\n                    transfer\n                    options={props.menus}\n                    reduced={currentReduced.value}\n                    onSelect={handleMenuSelect}\n                  ></Menu>\n                  )\n                : null}\n          </NativeScroll>\n          <div ref={bottom} class={[nh.be('aside-bottom'), layoutState.classes.asideBottom]}>\n            {slots.bottom\n              ? (\n                  renderSlot(slots, 'bottom', slotParams)\n                )\n              : (\n                <div class={nh.be('reduce-handler')} onClick={() => toggleReduced()}>\n                  {currentReduced.value ? <Icon {...icons.value.expand}></Icon> : <Icon {...icons.value.fold}></Icon>}\n                </div>\n                )}\n          </div>\n          <div class={[nh.be('expand-handler'), layoutState.classes.expandHandler]} onClick={() => toggleExpanded()}>\n            {slots.expand ? renderSlot(slots, 'expand', slotParams) : <Icon {...icons.value.angleRight}></Icon>}\n          </div>\n        </CustomTag>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/layout/layout-footer.tsx",
      "content": "import { Icon } from '@/components/icon'\nimport { Linker } from '@/components/linker'\n\nimport { SlotsType, computed, defineComponent, renderSlot, toRef } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\n\nimport { useLayoutState, useMediaQuery } from './helper'\nimport { layoutFooterProps } from './props'\n\nexport default defineComponent({\n  name: 'LayoutFooter',\n  description:'底栏区域，支持固定、高度自定义与版权信息插槽，用于放置页脚链接、统计与备案号。',\n  categories: ['layout'],\n  props: layoutFooterProps,\n  slots: Object as SlotsType<{\n    copyright?(): any,\n    links?(): any\n  }>,\n  setup(_props, { slots }) {\n    const props = useProps('layoutFooter', _props, {\n      tag: 'footer',\n      copyright: '',\n      links: () => [],\n      verticalLinks: 'md'\n    })\n\n    const nh = useNameHelper('layout')\n    const layoutState = useLayoutState()\n    const horizontalMatched = useMediaQuery(toRef(props, 'verticalLinks'))\n\n    const className = computed(() => {\n      return [\n        nh.be('footer'),\n        {\n          [nh.bs('vars')]: !layoutState.isLayout,\n          [nh.inc()]: layoutState.isLayout || props.inherit\n        },\n        layoutState.classes.footer\n      ]\n    })\n\n    function renderLinks() {\n      if (!props.links?.length) {\n        return <div role='none' aria-hidden style='display: none'></div>\n      }\n\n      return (\n        <div\n          class={[\n            nh.be('links'),\n            !horizontalMatched.value && nh.bem('links', 'vertical'),\n            layoutState.classes.footerLinks\n          ]}\n        >\n          <div class={nh.be('links-row')}>\n            {props.links.map((group, index) => (\n              <div\n                key={index}\n                class={[nh.be('link-group'), !horizontalMatched.value && nh.bem('link-group', 'vertical')]}\n              >\n                <div class={[nh.be('link-name'), nh.bem('link-name', 'group')]}>\n                  {group.to\n                    ? (\n                      <Linker icon={group.icon} to={group.to} target={group.target}>\n                        {group.name}\n                      </Linker>\n                      )\n                    : (\n                        [group.icon && <Icon icon={group.icon}></Icon>, group.name]\n                      )}\n                  {group.subname && <div class={nh.be('link-sub-name')}>{`- ${group.subname}`}</div>}\n                </div>\n                {group.children?.length\n                  ? group.children.map((link, index) => (\n                    <div key={index} class={nh.be('link')}>\n                      <Linker icon={link.icon} to={link.to} target={link.target}>\n                        {link.name}\n                      </Linker>\n                      {link.subname && <div class={nh.be('link-sub-name')}>{`- ${link.subname}`}</div>}\n                    </div>\n                  ))\n                  : null}\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n\n    return () => {\n      const CustomTag = (props.tag || 'footer') as any\n\n      return (\n        <CustomTag class={className.value}>\n          {slots.links ? renderSlot(slots, 'links') : renderLinks()}\n          <div class={[nh.be('copyright'), layoutState.classes.copyright]}>\n            {slots.copyright ? slots.copyright() : props.copyright}\n          </div>\n        </CustomTag>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/layout/layout-header.tsx",
      "content": "import { Avatar } from '@/components/avatar'\nimport { Dropdown } from '@/components/dropdown'\nimport { DropdownItem } from '@/components/dropdown-item'\nimport { DropdownList } from '@/components/dropdown-list'\nimport { Icon } from '@/components/icon'\n\nimport { Menu } from '@/components/menu'\n\nimport { SlotsType, computed, defineComponent, reactive, ref, renderSlot, shallowReadonly, toRef, watch } from 'vue'\n\nimport { emitEvent, useIcons, useLocale, useNameHelper, useProps } from '@pocui/config'\n\nimport { useLayoutState } from './helper'\nimport { layoutHeaderProps } from './props'\n\nimport type { MenuExposed } from '@/components/menu'\nimport type { LayoutConfig, LayoutHeaderAction, LayoutHeaderSlotParams, LayoutSignType } from './symbol'\n\nexport default defineComponent({\n  name: 'LayoutHeader',\n  description:'顶部栏区域，支持固定、高度自定义与阴影样式，常用于放置 Logo、导航与工具入口。',\n  categories: ['layout'],\n  props: layoutHeaderProps,\n  emits: ['update:sign-type', 'update:user-dropped', 'update:dark-mode'],\n  slots: Object as SlotsType<{\n    default?(props: LayoutHeaderSlotParams): any,\n    left?(props: LayoutHeaderSlotParams): any,\n    right?(props: LayoutHeaderSlotParams): any,\n    user?(props: LayoutHeaderSlotParams): any,\n    avatar?(props: LayoutHeaderSlotParams): any\n  }>,\n  setup(_props, { slots, emit, expose }) {\n    const props = useProps('layoutHeader', _props, {\n      locale: null,\n      tag: 'header',\n      logo: '',\n      signName: '',\n      user: {\n        default: () => ({ name: '' }),\n        static: true\n      },\n      userDropped: false,\n      avatarCircle: false,\n      config: () => ['nav', 'theme', 'color'] as LayoutConfig[],\n      actions: () => [],\n      signType: 'aside',\n      menus: {\n        default: () => [],\n        static: true\n      },\n      menuProps: null\n    })\n\n    const nh = useNameHelper('layout')\n    const icons = useIcons()\n    const locale = useLocale('layout', toRef(props, 'locale'))\n    const layoutState = useLayoutState()\n    const currentSignType = ref<LayoutSignType>(props.signType)\n    const currentUserDropped = ref(props.userDropped)\n\n    const menu = ref<MenuExposed>()\n\n    const className = computed(() => {\n      return [\n        nh.be('header'),\n        {\n          [nh.bs('vars')]: !layoutState.isLayout,\n          [nh.inc()]: layoutState.isLayout || props.inherit,\n          [nh.bem('header', 'away')]: !layoutState.affixMatched,\n          [nh.bem('header', 'affixed')]: layoutState.affixed\n        },\n        layoutState.classes.header\n      ]\n    })\n    const userActions = computed(() => {\n      if (!props.actions?.length) {\n        return [\n          {\n            label: 'logout',\n            name: locale.value.logout,\n            icon: icons.value.logout.icon,\n            iconProps: icons.value.logout\n          }\n        ] as LayoutHeaderAction[]\n      }\n\n      return props.actions\n    })\n    const hasLeft = computed(() => {\n      return !!(props.logo || props.signName || slots.left)\n    })\n    const hasMenu = computed(() => {\n      return !!(props.menus?.length || props.menuProps?.router)\n    })\n\n    const slotParams = shallowReadonly(\n      reactive({\n        expanded: toRef(layoutState, 'expanded'),\n        reduced: toRef(layoutState, 'reduced'),\n        toggleExpanded,\n        toggleReduced,\n        toggleUserDropped\n      })\n    )\n\n    expose({\n      menu,\n      toggleExpanded,\n      toggleReduced,\n      expandMenuByLabel,\n      toggleUserDropped\n    })\n\n    watch(\n      () => props.signType,\n      value => {\n        currentSignType.value = value\n      }\n    )\n    watch(\n      () => props.userDropped,\n      value => {\n        currentUserDropped.value = value\n      }\n    )\n\n    function handleUserActionSelect(label: string, meta: Record<string, any>) {\n      emitEvent(props.onUserAction, label, meta)\n    }\n\n    function handleSignTypeChange(type: LayoutSignType) {\n      layoutState.changeInLock(() => {\n        currentSignType.value = type\n\n        emit('update:sign-type', type)\n        emitEvent(props.onNavChange, type)\n      })\n    }\n\n    function toggleExpanded(expanded = !layoutState.expanded) {\n      layoutState.expanded = expanded\n\n      emitEvent(props.onExpandedChange, expanded)\n    }\n\n    function toggleReduced(reduced = !layoutState.reduced) {\n      layoutState.reduced = reduced\n\n      emitEvent(props.onReducedChange, reduced)\n    }\n\n    function handleSignClick(event: MouseEvent) {\n      emitEvent(props.onSignClick, event)\n    }\n\n    function toggleUserDropped(dropped = !currentUserDropped.value) {\n      currentUserDropped.value = dropped\n\n      emit('update:user-dropped', dropped)\n      emitEvent(props.onDroppedChange, dropped)\n    }\n\n    function handleMenuSelect(label: string, meta: Record<string, any>) {\n      toggleUserDropped(false)\n      emitEvent(props.onMenuSelect, label, meta)\n    }\n\n    function expandMenuByLabel(label: string) {\n      menu.value?.expandItemByLabel(label)\n    }\n\n    function renderCheck() {\n      return <Icon {...icons.value.check}></Icon>\n    }\n\n    function renderLayoutConfig() {\n      return (\n        <div class={nh.be('config-unit')}>\n          <div\n            class={[nh.be('brief-block'), nh.bem('brief-block', 'aside')]}\n            onClick={() => handleSignTypeChange('header')}\n          >\n            {currentSignType.value === 'header' && renderCheck()}\n          </div>\n          <div class={nh.be('brief-block')} onClick={() => handleSignTypeChange('aside')}>\n            {currentSignType.value === 'aside' && renderCheck()}\n          </div>\n        </div>\n      )\n    }\n\n    function renderUserAvatar() {\n      if (slots.avatar) {\n        return renderSlot(slots, 'avatar', slotParams)\n      }\n      if (typeof props.user?.avatar === 'string') {\n        return (\n          <Avatar src={props.user.avatar} circle={props.avatarCircle} onClick={() => toggleUserDropped()}>\n            {{\n              icon: () => <Icon {...icons.value.user}></Icon>\n            }}\n          </Avatar>\n        )\n      }\n\n      return (\n        <Avatar circle={props.avatarCircle} onClick={() => toggleUserDropped()}>\n          {{\n            icon: () => <Icon {...icons.value.user} icon={props.user.avatar || icons.value.user.icon}></Icon>\n          }}\n        </Avatar>\n      )\n    }\n\n    function renderUserDrop() {\n      return (\n        <DropdownList>\n          {props.user?.name && (\n            <li class={nh.be('user-profile')}>\n              <span class={nh.be('user-name')}>{props.user.name}</span>\n              {props.user.email && <span class={nh.be('user-email')}>{props.user.email}</span>}\n            </li>\n          )}\n          {props.config?.length ? renderConfigs() : null}\n          {userActions.value.map(action => (\n            <DropdownItem\n              key={action.label}\n              class={nh.be('user-action')}\n              label={action.label}\n              disabled={action.disabled}\n              divided={action.divided}\n              onSelect={() => handleUserActionSelect(action.label, action.meta || {})}\n            >\n              {action.icon && <Icon {...action.iconProps} icon={action.icon} style={{ marginRight: '6px' }}></Icon>}\n              {action.name || action.label}\n            </DropdownItem>\n          ))}\n        </DropdownList>\n      )\n    }\n\n    function renderConfigs() {\n      return (\n        <li class={nh.be('config')}>\n          {props.config.includes('nav') &&\n            layoutState.navConfig && [\n              <div key={1} class={nh.be('config-label')}>\n                {locale.value.signType}\n              </div>,\n              renderLayoutConfig()\n          ]}\n        </li>\n      )\n    }\n\n    return () => {\n      const CustomTag = (props.tag || 'header') as any\n\n      return (\n        <CustomTag class={className.value}>\n          {hasLeft.value && (\n            <div class={[nh.be('header-left'), layoutState.classes.headerLeft]}>\n              {slots.left\n                ? (\n                    renderSlot(slots, 'left', slotParams)\n                  )\n                : props.signType === 'header'\n                  ? (\n                    <div class={nh.be('sign')} onClick={handleSignClick}>\n                      {props.logo && (\n                        <div class={nh.be('logo')}>\n                          <img src={props.logo} alt='Logo' />\n                        </div>\n                      )}\n                      {props.signName && <span class={nh.be('sign-name')}>{props.signName}</span>}\n                    </div>\n                    )\n                  : null}\n            </div>\n          )}\n          <div class={[nh.be('header-main'), layoutState.classes.headerMain]}>\n            {slots.default\n              ? (\n                  renderSlot(slots, 'default', slotParams)\n                )\n              : hasMenu.value\n                ? (\n                  <Menu\n                    ref={menu}\n                    {...(props.menuProps || {})}\n                    horizontal\n                    transfer\n                    options={props.menus}\n                    onSelect={handleMenuSelect}\n                  ></Menu>\n                  )\n                : null}\n          </div>\n          {slots.right && (\n            <div class={[nh.be('header-right'), layoutState.classes.headerRight]}>\n              {renderSlot(slots, 'right', slotParams)}\n            </div>\n          )}\n          {slots.user\n            ? (\n                renderSlot(slots, 'user', slotParams)\n              )\n            : (\n              <Dropdown\n                class={[nh.be('user'), layoutState.classes.headerUser]}\n                transfer\n                placement='bottom-end'\n                visible={currentUserDropped.value}\n                trigger='custom'\n                onClickOutside={() => toggleUserDropped(false)}\n              >\n                {{\n                  default: renderUserAvatar,\n                  drop: renderUserDrop\n                }}\n              </Dropdown>\n              )}\n        </CustomTag>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/layout/layout-main.tsx",
      "content": "import { computed, defineComponent } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { useLayoutState } from './helper'\nimport { layoutMainProps } from './props'\n\nexport default defineComponent({\n  name: 'LayoutMain',\n  description:'内容主区域，自动填充剩余空间并支持滚动隔离，是业务页面核心渲染画布。',\n  categories: ['layout'],\n  props: layoutMainProps,\n  setup(_props, { slots }) {\n    const props = useProps('layoutMain', _props, {\n      tag: 'main',\n      fixed: false\n    })\n    const nh = useNameHelper('layout')\n    const state = useLayoutState()\n\n    const className = computed(() => {\n      return [nh.be('main'), props.fixed && nh.bem('main', 'fixed'), state.classes.main]\n    })\n\n    return () => {\n      const CustomTag = (props.tag || 'main') as any\n\n      return <CustomTag class={className.value}>{slots.default?.()}</CustomTag>\n    }\n  }\n})\n"
    },
    {
      "target": "components/layout/layout.tsx",
      "content": "import { NativeScroll } from '@/components/native-scroll'\nimport { ResizeObserver } from '@/components/resize-observer'\n\nimport {\n  SlotsType,\n  computed,\n  defineComponent,\n  provide,\n  reactive,\n  ref,\n  renderSlot,\n  shallowReadonly,\n  toRef,\n  watch\n} from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { createSlotRender, useMounted } from '@pocui/hooks'\n\nimport { getYBorder, runQueueFrame } from '@pocui/utils'\n\nimport { useMediaQuery } from './helper'\nimport LayoutAside from './layout-aside'\nimport LayoutFooter from './layout-footer'\nimport LayoutHeader from './layout-header'\nimport LayoutMain from './layout-main'\nimport { layoutProps } from './props'\n\nimport { LAYOUT_STATE, LayoutHeaderSlotParams, LayoutSlotParams } from './symbol'\n\nimport type { LayoutAsideExposed, LayoutConfig, LayoutHeaderExposed, LayoutSignType } from './symbol'\nimport type { NativeScrollExposed } from '@/components/native-scroll'\n\nexport default defineComponent({\n  name: 'Layout',\n  description:'这是一个渐进式的强业务逻辑布局组件，根据需要可以进行不同程度的定制化。',\n  categories: ['layout'],\n  props: layoutProps,\n  slots: Object as SlotsType<{\n    aside?(props: LayoutSlotParams): any,\n    'aside-top'(props: LayoutSlotParams): any,\n    asideTop(props: LayoutSlotParams): any,\n    'aside-bottom'(props: LayoutSlotParams): any,\n    asideBottom(props: LayoutSlotParams): any,\n    'aside-expand'(props: LayoutSlotParams): any,\n    asideExpand(props: LayoutSlotParams): any,\n    'aside-main'(props: LayoutSlotParams): any,\n    asideMain(props: LayoutSlotParams): any,\n    default?(props: LayoutSlotParams): any,\n    footer?(props: LayoutSlotParams): any,\n    'footer-copyright'(): any,\n    footerCopyright(): any,\n    'footer-links'(): any,\n    footerLinks(): any,\n    header?(props: LayoutSlotParams): any,\n    'header-avatar'(props: LayoutHeaderSlotParams): any,\n    headerAvatar(props: LayoutHeaderSlotParams): any,\n    'header-left'(props: LayoutHeaderSlotParams): any,\n    headerLeft(props: LayoutHeaderSlotParams): any,\n    'header-main'(props: LayoutHeaderSlotParams): any,\n    headerMain(props: LayoutHeaderSlotParams): any,\n    'header-right'(props: LayoutHeaderSlotParams): any,\n    headerRight(props: LayoutHeaderSlotParams): any,\n    'header-user'(props: LayoutHeaderSlotParams): any,\n    headerUser(props: LayoutHeaderSlotParams): any,\n    main(): any,\n    sign?(props: LayoutSlotParams): any\n  }>,\n  emits: ['update:expanded', 'update:reduced', 'update:sign-type'],\n  setup(_props, { slots, emit, expose }) {\n    const props = useProps('layout', _props, {\n      locale: null,\n      noAside: false,\n      footer: false,\n      tag: 'section',\n      menus: {\n        default: () => [],\n        static: true\n      },\n      menuProps: null,\n      logo: '',\n      signName: '',\n      config: () => ['nav'] as LayoutConfig[],\n      user: null,\n      actions: () => [],\n      expanded: false,\n      reduced: false,\n      avatarCircle: false,\n      signType: 'aside',\n      headerFixed: 'lg',\n      asideFixed: 'lg',\n      copyright: '',\n      links: () => [],\n      miniHeaderSign: 'lg',\n      verticalLinks: 'md',\n      fixedMain: false,\n      fitWindow: false,\n      innerClasses: () => ({}),\n      noHeader: false\n    })\n\n    const nh = useNameHelper('layout')\n    const locked = ref(false)\n    const asideExpanded = ref(props.expanded)\n    const asideReduced = ref(props.reduced)\n    const currentSignType = ref<LayoutSignType>(props.signType)\n    const userDropped = ref(false)\n\n    const { isMounted } = useMounted('frame')\n\n    const section = ref<HTMLElement>()\n    const scroll = ref<NativeScrollExposed>()\n    const header = ref<LayoutHeaderExposed>()\n    const aside = ref<LayoutAsideExposed>()\n\n    const affixMatched = useMediaQuery(toRef(props, 'headerFixed'))\n    const expandMatched = useMediaQuery(toRef(props, 'asideFixed'))\n    const signNameMatched = useMediaQuery(toRef(props, 'miniHeaderSign'))\n\n    const state = reactive({\n      isLayout: true,\n      locked: computed(() => locked.value),\n      affixed: false,\n      scrollY: 0,\n      affixMatched,\n      expandMatched,\n      useExpand: false,\n      expanded: asideExpanded,\n      reduced: asideReduced,\n      navConfig: computed(() => !props.noAside),\n      classes: toRef(props, 'innerClasses'),\n      changeInLock\n    })\n\n    const className = computed(() => {\n      return [\n        nh.b(),\n        nh.bs('vars'),\n        {\n          [nh.inc()]: props.inherit,\n          [nh.bm('no-aside')]: props.noAside,\n          [nh.bm('no-header')]: props.noHeader,\n          [nh.bm('header-main')]: currentSignType.value === 'header',\n          [nh.bm('locked')]: !isMounted.value || locked.value,\n          [nh.bm('fit-window')]: props.fitWindow\n        }\n      ]\n    })\n\n    const signInHeader = computed(() => {\n      return props.noAside || currentSignType.value === 'header' || state.useExpand\n    })\n    const menu = computed(() => aside.value?.menu || header.value?.menu)\n\n    const viewHeight = ref('100%')\n\n    const style = computed(() => {\n      return {\n        [nh.cv('view-height')]: props.fitWindow ? '100vh' : viewHeight.value\n      }\n    })\n\n    const slotParams = shallowReadonly(\n      reactive({\n        expanded: asideExpanded,\n        reduced: asideReduced,\n        toggleExpanded,\n        toggleReduced\n      })\n    )\n\n    provide(LAYOUT_STATE, state)\n\n    expose({\n      scroll,\n      menu,\n      toggleExpanded,\n      toggleReduced,\n      expandMenuByLabel\n    })\n\n    watch(affixMatched, value => {\n      state.affixed = !value && state.scrollY >= 50\n    })\n    watch(\n      () => props.expanded,\n      value => {\n        asideExpanded.value = value\n      }\n    )\n    watch(\n      () => props.reduced,\n      value => {\n        asideReduced.value = value\n      }\n    )\n    watch(currentSignType, value => {\n      emit('update:sign-type', value)\n      emitEvent(props.onNavChange, value)\n    })\n\n    function toggleExpanded(expanded = !asideReduced.value) {\n      asideExpanded.value = expanded\n\n      emit('update:expanded', expanded)\n      emitEvent(props.onExpandedChange, expanded)\n    }\n\n    function toggleReduced(reduced = !asideReduced.value) {\n      asideReduced.value = reduced\n\n      emit('update:reduced', reduced)\n      emitEvent(props.onReducedChange, reduced)\n    }\n\n    function handleSignClick(event: MouseEvent) {\n      emitEvent(props.onSignClick, event)\n    }\n\n    function handleMenuSelect(label: string, meta: Record<string, any>) {\n      emitEvent(props.onMenuSelect, label, meta)\n    }\n\n    function handleUserAction(label: string, meta: Record<string, any>) {\n      emitEvent(props.onUserAction, label, meta)\n    }\n\n    function expandMenuByLabel(label: string) {\n      menu.value?.expandItemByLabel(label)\n    }\n\n    function handleResize() {\n      if (scroll.value?.$el) {\n        viewHeight.value = `${scroll.value.$el.offsetHeight - getYBorder(scroll.value.$el)}px`\n      }\n\n      emitEvent(props.onContentResize)\n    }\n\n    let cancelChange: (() => void) | undefined\n\n    function changeInLock(doChange: () => void) {\n      cancelChange?.()\n      cancelChange = runQueueFrame([() => (locked.value = true), doChange, () => (locked.value = false)])\n    }\n\n    function stopAndPrevent(event: Event) {\n      event.stopPropagation()\n      event.preventDefault()\n    }\n\n    function renderSign() {\n      if (!props.logo && !props.signName && !slots.sign) {\n        return null\n      }\n\n      if (slots.sign) {\n        return renderSlot(slots, 'sign', slotParams)\n      }\n\n      const showSignName = props.signName && !(signInHeader.value && !signNameMatched.value)\n\n      return (\n        <div class={[nh.be('sign'), !showSignName && nh.bem('sign', 'logo-only')]} onClick={handleSignClick}>\n          {[\n            props.logo && (\n              <div class={nh.be('logo')}>\n                <img src={props.logo} alt='Logo' />\n              </div>\n            ),\n            showSignName && <span class={nh.be('sign-name')}>{props.signName}</span>\n          ]}\n        </div>\n      )\n    }\n\n    function renderHeader() {\n      if (props.noHeader) {\n        return <header role='none' aria-hidden style='display: none'></header>\n      }\n      if (slots.header) {\n        return renderSlot(slots, 'header', slotParams)\n      }\n\n      return (\n        <LayoutHeader\n          ref={header}\n          v-model:sign-type={currentSignType.value}\n          v-model:user-dropped={userDropped.value}\n          inherit\n          locale={props.locale}\n          user={props.user}\n          actions={props.actions}\n          config={props.config}\n          avatar-circle={props.avatarCircle}\n          menus={props.noAside ? props.menus : []}\n          menu-props={props.noAside ? props.menuProps : null}\n          onUserAction={handleUserAction}\n          onExpandedChange={toggleExpanded}\n          onReducedChange={toggleReduced}\n          onMenuSelect={handleMenuSelect}\n          {...{\n            onWheel: stopAndPrevent,\n            onMousemove: stopAndPrevent\n          }}\n        >\n          {{\n            left: createSlotRender(slots, ['header-left', 'headerLeft'], () =>\n              signInHeader.value ? renderSign() : null\n            ),\n            default: createSlotRender(slots, ['header-main', 'headerMain']),\n            right: createSlotRender(slots, ['header-right', 'headerRight']),\n            user: createSlotRender(slots, ['header-user', 'headerUser']),\n            avatar: createSlotRender(slots, ['header-avatar', 'headerAvatar'])\n          }}\n        </LayoutHeader>\n      )\n    }\n\n    function renderAside() {\n      if (props.noAside) {\n        return <div role='none' aria-hidden style='display: none'></div>\n      }\n\n      return (\n        <div\n          class={[nh.be('sidebar'), !expandMatched.value && nh.bem('sidebar', 'away'), props.innerClasses.sidebar]}\n          onWheel={stopAndPrevent}\n          onMousemove={stopAndPrevent}\n        >\n          {slots.aside\n            ? (\n                renderSlot(slots, 'aside', slotParams)\n              )\n            : (\n              <LayoutAside\n                ref={aside}\n                v-model:expanded={asideExpanded.value}\n                v-model:reduced={asideReduced.value}\n                inherit\n                sign-type={currentSignType.value}\n                menus={props.menus}\n                menu-props={props.menuProps}\n                fixed={props.asideFixed}\n                onExpandedChange={toggleExpanded}\n                onReducedChange={toggleReduced}\n                onMenuSelect={handleMenuSelect}\n              >\n                {{\n                  top: createSlotRender(slots, ['aside-top', 'asideTop'], () =>\n                    !signInHeader.value ? renderSign() : null\n                  ),\n                  default: createSlotRender(slots, ['aside-main', 'asideMain']),\n                  bottom: createSlotRender(slots, ['aside-bottom', 'asideBottom']),\n                  expand: createSlotRender(slots, ['aside-expand', 'asideExpand'])\n                }}\n              </LayoutAside>\n              )}\n        </div>\n      )\n    }\n\n    function renderMain() {\n      if (slots.default) {\n        return renderSlot(slots, 'default', slotParams)\n      }\n\n      return (\n        <LayoutMain fixed={props.fixedMain}>\n          {{\n            default: createSlotRender(slots, ['main'])\n          }}\n        </LayoutMain>\n      )\n    }\n\n    function renderFooter() {\n      if (slots.footer) {\n        return renderSlot(slots, 'footer', slotParams)\n      }\n\n      return (\n        <LayoutFooter inherit copyright={props.copyright} links={props.links} vertical-links={props.verticalLinks}>\n          {{\n            links: createSlotRender(slots, ['footer-links', 'footerLinks']),\n            copyright: createSlotRender(slots, ['footer-copyright', 'footerCopyright'])\n          }}\n        </LayoutFooter>\n      )\n    }\n\n    function renderWrapper() {\n      const CustomTag = (props.tag || 'section') as any\n\n      return (\n        <CustomTag\n          class={[nh.be('wrapper'), props.fixedMain && nh.bem('wrapper', 'fixed'), props.innerClasses.wrapper]}\n        >\n          {currentSignType.value === 'header' && renderHeader()}\n          {renderAside()}\n          <section\n            ref={section}\n            class={[\n              nh.be('section'),\n              {\n                [nh.bem('section', 'away')]: expandMatched.value,\n                [nh.bem('section', 'reduced')]: asideReduced.value,\n                [nh.bem('section', 'locked')]: locked.value,\n                [nh.bem('section', 'fixed')]: props.fixedMain\n              },\n              props.innerClasses.section\n            ]}\n          >\n            {currentSignType.value === 'aside' && renderHeader()}\n            {renderMain()}\n            {props.footer && renderFooter()}\n          </section>\n        </CustomTag>\n      )\n    }\n\n    return () => {\n      if (props.fitWindow) {\n        return (\n          <section class={className.value} style={style.value}>\n            <ResizeObserver throttle onResize={handleResize}>\n              {renderWrapper()}\n            </ResizeObserver>\n          </section>\n        )\n      }\n\n      return (\n        <NativeScroll\n          ref={scroll}\n          class={className.value}\n          inherit={props.inherit}\n          use-y-bar\n          observe-deep\n          bar-class={[nh.be('scrollbar'), props.innerClasses.scrollbar]}\n          style={style.value}\n          onResize={handleResize}\n        >\n          {renderWrapper()}\n        </NativeScroll>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/layout/props.ts",
      "content": "import { booleanProp, booleanStringProp, buildProps, eventProp, localeProp } from '@pocui/config'\n\nimport type { MenuOptions } from '@/components/menu'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type {\n  LayoutConfig,\n  LayoutFooterLink,\n  LayoutHeaderAction,\n  LayoutInnerClass,\n  LayoutMenuProps,\n  LayoutSignType,\n  LayoutUser\n} from './symbol'\n\nexport const layoutProps = buildProps({\n  locale: localeProp('layout'),\n  noAside: booleanProp,\n  footer: booleanProp,\n  tag: String,\n  menus: Object as PropType<MenuOptions[]>,\n  menuProps: Object as PropType<LayoutMenuProps>,\n  logo: String,\n  signName: String,\n  config: Array as PropType<LayoutConfig[]>,\n  user: Object as PropType<LayoutUser>,\n  actions: Array as PropType<LayoutHeaderAction[]>,\n  expanded: booleanProp,\n  reduced: booleanProp,\n  avatarCircle: booleanProp,\n  signType: String as PropType<LayoutSignType>,\n  headerFixed: booleanStringProp,\n  asideFixed: booleanStringProp,\n  copyright: String,\n  links: Array as PropType<LayoutFooterLink[]>,\n  miniHeaderSign: booleanStringProp,\n  verticalLinks: booleanStringProp,\n  fixedMain: booleanProp,\n  fitWindow: booleanProp,\n  innerClasses: Object as PropType<LayoutInnerClass>,\n  noHeader: booleanProp,\n  onExpandedChange: eventProp<(expanded: boolean) => void>(),\n  onReducedChange: eventProp<(reduced: boolean) => void>(),\n  onSignClick: eventProp<(event: MouseEvent) => void>(),\n  onMenuSelect: eventProp<(label: string, meta: any) => void>(),\n  onUserAction: eventProp<(label: string, meta: any) => void>(),\n  onNavChange: eventProp<(type: LayoutSignType) => void>(),\n  onColorChange: eventProp<(color: string) => void>(),\n  onToggleTheme: eventProp<(isDark: boolean) => void>(),\n  onContentResize: eventProp<() => void>()\n})\n\nexport type LayoutProps = ExtractPropTypes<typeof layoutProps>\nexport type LayoutCProps = ConfigurableProps<LayoutProps, 'menus'>\n\nexport const layoutAsideProps = buildProps({\n  tag: String,\n  expanded: booleanProp,\n  reduced: booleanProp,\n  menus: Array as PropType<MenuOptions[]>,\n  menuProps: Object as PropType<LayoutMenuProps>,\n  logo: String,\n  signName: String,\n  fixed: booleanStringProp,\n  signType: String as PropType<LayoutSignType>,\n  onExpandedChange: eventProp<(expanded: boolean) => void>(),\n  onReducedChange: eventProp<(reduced: boolean) => void>(),\n  onSignClick: eventProp<(event: MouseEvent) => void>(),\n  onMenuSelect: eventProp<(label: string, meta: any) => void>()\n})\n\nexport type LayoutAsideProps = ExtractPropTypes<typeof layoutAsideProps>\nexport type LayoutAsideCProps = ConfigurableProps<LayoutAsideProps, 'menus'>\n\nexport const layoutHeaderProps = buildProps({\n  locale: localeProp('layout'),\n  tag: String,\n  logo: String,\n  signName: String,\n  user: Object as PropType<LayoutUser>,\n  userDropped: booleanProp,\n  avatarCircle: booleanProp,\n  config: Array as PropType<LayoutConfig[]>,\n  actions: Array as PropType<LayoutHeaderAction[]>,\n  signType: String as PropType<LayoutSignType>,\n  menus: Object as PropType<MenuOptions[]>,\n  menuProps: Object as PropType<LayoutMenuProps>,\n  onNavChange: eventProp<(type: LayoutSignType) => void>(),\n  onColorChange: eventProp<(color: string) => void>(),\n  onUserAction: eventProp<(label: string, meta: any) => void>(),\n  onSignClick: eventProp<(event: MouseEvent) => void>(),\n  onDroppedChange: eventProp<(target: boolean) => void>(),\n  onExpandedChange: eventProp<(expanded: boolean) => void>(),\n  onReducedChange: eventProp<(reduced: boolean) => void>(),\n  onMenuSelect: eventProp<(label: string, meta: any) => void>(),\n  onToggleTheme: eventProp<(isDark: boolean) => void>()\n})\n\nexport type LayoutHeaderProps = ExtractPropTypes<typeof layoutHeaderProps>\nexport type LayoutHeaderCProps = ConfigurableProps<LayoutHeaderProps, 'user' | 'menus'>\n\nexport const layoutMainProps = buildProps({\n  tag: String,\n  fixed: booleanProp\n})\n\nexport type LayoutMainProps = ExtractPropTypes<typeof layoutMainProps>\nexport type LayoutMainCProps = ConfigurableProps<LayoutMainProps>\n\nexport const layoutFooterProps = buildProps({\n  tag: String,\n  copyright: String,\n  links: Array as PropType<LayoutFooterLink[]>,\n  verticalLinks: booleanStringProp\n})\n\nexport type LayoutFooterProps = ExtractPropTypes<typeof layoutFooterProps>\nexport type LayoutFooterCProps = ConfigurableProps<LayoutFooterProps>\n"
    },
    {
      "target": "components/layout/symbol.ts",
      "content": "import type { IconMinorProps } from '@/components/icon'\n\nimport type { MenuExposed, MenuGroupType, MenuMarkerType } from '@/components/menu'\nimport type { NativeScrollExposed } from '@/components/native-scroll'\nimport type { ClassType } from '@pocui/config'\nimport type { ComponentPublicInstance, InjectionKey } from 'vue'\nimport type { Router } from 'vue-router'\n\nexport type LayoutSignType = 'aside' | 'header'\nexport type LayoutConfig = 'nav'\nexport type LayoutSection =\n  | 'wrapper'\n  | 'section'\n  | 'header'\n  | 'headerLeft'\n  | 'headerMain'\n  | 'headerRight'\n  | 'headerUser'\n  | 'sidebar'\n  | 'aside'\n  | 'asideTop'\n  | 'asideMain'\n  | 'asideBottom'\n  | 'expandHandler'\n  | 'main'\n  | 'footer'\n  | 'footerLinks'\n  | 'copyright'\n  | 'scrollbar'\n\nexport type LayoutInnerClass = Partial<Record<LayoutSection, ClassType>>\n\nexport interface LayoutMenuProps {\n  active?: string,\n\n  accordion?: boolean,\n\n  markerType?: MenuMarkerType,\n\n  groupType?: MenuGroupType,\n\n  tooltipReverse?: boolean,\n\n  router?: Router,\n\n  manualRoute?: boolean,\n\n  onExpand?: (label: string, meta: Record<string, any>) => void,\n\n  onReduce?: (label: string, meta: Record<string, any>) => void\n}\n\nexport interface LayoutHeaderAction {\n  label: string,\n\n  icon?: Record<string, any> | string,\n\n  iconProps?: IconMinorProps,\n\n  name?: string,\n\n  disabled?: boolean,\n\n  divided?: boolean,\n\n  meta?: Record<string, any>\n}\n\nexport interface LayoutUser {\n  name: string,\n\n  email?: string,\n\n  avatar?: string | Record<string, any>\n}\n\nexport interface LayoutFooterLink {\n  name: string,\n\n  subname?: string,\n\n  icon?: Record<string, any>,\n\n  iconProps?: string,\n\n  to?: string,\n\n  target?: string,\n\n  children?: Array<Omit<LayoutFooterLink, 'children'>>\n}\n\nexport interface LayoutState {\n  isLayout: boolean,\n\n  locked: boolean,\n\n  affixed: boolean,\n\n  scrollY: number,\n\n  affixMatched: boolean,\n\n  expandMatched: boolean,\n\n  useExpand: boolean,\n\n  expanded: boolean,\n\n  reduced: boolean,\n\n  navConfig: boolean,\n\n  classes: LayoutInnerClass,\n\n  changeInLock: (doChange: () => void) => void\n}\n\nexport interface LayoutSlotParams {\n  expanded: boolean,\n\n  reduced: boolean,\n\n  toggleExpanded: (expanded?: boolean) => void,\n\n  toggleReduced: (reduced?: boolean) => void\n}\n\nexport interface LayoutHeaderSlotParams extends LayoutSlotParams {\n  handleColorChange: (color: string) => void,\n\n  toggleUserDropped: (dropped?: boolean) => void\n}\n\nexport interface LayoutExposed extends ComponentPublicInstance {\n  scroll?: NativeScrollExposed,\n\n  menu?: MenuExposed,\n\n  toggleExpanded: (expanded?: boolean) => void,\n\n  toggleReduced: (reduced?: boolean) => void,\n\n  expandMenuByLabel: (label: string) => void\n}\n\nexport interface LayoutHeaderExposed extends ComponentPublicInstance {\n  menu?: MenuExposed,\n\n  toggleExpanded: (expanded?: boolean) => void,\n\n  toggleReduced: (reduced?: boolean) => void,\n\n  expandMenuByLabel: (label: string) => void,\n\n  toggleUserDropped: (dropped: boolean) => void\n}\n\nexport interface LayoutMainExposed extends ComponentPublicInstance {}\n\nexport interface LayoutAsideExposed extends ComponentPublicInstance {\n  menu?: MenuExposed,\n\n  toggleExpanded: (expanded?: boolean) => void,\n\n  toggleReduced: (reduced?: boolean) => void,\n\n  expandMenuByLabel: (label: string) => void\n}\n\nexport const LAYOUT_STATE = Symbol('LAYOUT_STATE') as InjectionKey<LayoutState>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/utils", "@pocui/config", "@pocui/hooks", "vue-router"],
  "registryDependencies": [
    "layout.scss",
    "icon",
    "menu",
    "native-scroll",
    "linker",
    "avatar",
    "dropdown",
    "dropdown-item",
    "dropdown-list",
    "resize-observer"
  ],
  "categories": ["layout"],
  "meta": { "isReferenceOnly": false }
}
