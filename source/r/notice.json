{
  "name": "notice",
  "type": "registry:component",
  "description": "常用于全局展示一些较重量级的交互反馈信息，如操作操作失败时的具体错误信息等。",
  "files": [
    {
      "target": "components/notice/index.ts",
      "content": "import { createApp, createVNode, markRaw, render } from 'vue'\n\nimport { proxyExposed, unrefElement } from '@pocui/hooks'\n\nimport { destroyObject, isClient, isNullish, isObject, noop, toNumber } from '@pocui/utils'\n\nimport Component from './notice.vue'\n\nimport type { MaybeInstance } from '@pocui/hooks'\n\nimport type { App, MaybeRef } from 'vue'\n\nimport type { Key, NoticeConfig, NoticeInstance, NoticeOptions, NoticePlacement, NoticeType } from './symbol'\n\nexport type { NoticeType, NoticePlacement, NoticeOptions }\n\ntype FuzzyOptions = string | NoticeOptions\ntype ManagerOptions = { marker?: boolean, duration?: number, placement?: NoticePlacement } & Record<string, unknown>\n\ninterface AipMethod {\n  (options: NoticeOptions): () => void,\n\n  (title: string, duration?: number): () => void,\n\n  (title: string, content: string, duration?: number): () => void,\n\n  (options: FuzzyOptions, duration?: number): () => void\n}\n\nconst placementWhiteList: NoticePlacement[] = ['top-right', 'top-left', 'bottom-right', 'bottom-left']\n\nlet count = 1\n\nfunction getKey() {\n  return `notice-${count++}`\n}\n\nexport class NoticeManager {\n  name: string\n\n  defaults: Record<string, unknown>\n\n  open: AipMethod\n\n  primary: AipMethod\n\n  info: AipMethod\n\n  success: AipMethod\n\n  warning: AipMethod\n\n  error: AipMethod\n\n  private _mountedApp: App<unknown> | null\n\n  private _instance: NoticeInstance | null\n\n  private _innerApp: App<unknown> | null\n\n  private _container: HTMLElement | null\n\n  private _wrapper: HTMLElement | SVGElement | null\n\n  private _mountedEl: HTMLElement | null\n\n  constructor(options: ManagerOptions = {}) {\n    options = {\n      ...options,\n      marker: !!options.marker,\n      duration: options.duration ? toNumber(options.duration) : 4000\n    }\n\n    this._mountedApp = null\n    this._instance = null\n    this._innerApp = null\n    this._container = null\n    this._wrapper = null\n    this._mountedEl = null\n    this.name = 'Notice'\n    this.defaults = {}\n\n    this.config(options)\n\n    this.open = (title: FuzzyOptions, content?: string | number, duration?: number) => {\n      return this._open(null, title, content, duration)\n    }\n\n    this.primary = (title: FuzzyOptions, content?: string | number, duration?: number) => {\n      return this._open('primary', title, content, duration)\n    }\n\n    this.info = (title: FuzzyOptions, content?: string | number, duration?: number) => {\n      return this._open('info', title, content, duration)\n    }\n\n    this.success = (title: FuzzyOptions, content?: string | number, duration?: number) => {\n      return this._open('success', title, content, duration)\n    }\n\n    this.warning = (title: FuzzyOptions, content?: string | number, duration?: number) => {\n      return this._open('warning', title, content, duration)\n    }\n\n    this.error = (title: FuzzyOptions, content?: string | number, duration?: number) => {\n      return this._open('error', title, content, duration)\n    }\n  }\n\n  judge(state: boolean, success: string, error: string, duration?: number): void\n  judge(state: boolean, success: NoticeOptions, error: string, duration?: number): void\n  judge(state: boolean, success: string, error: NoticeOptions, duration?: number): void\n  judge(state: boolean, success: NoticeOptions, error: NoticeOptions): void\n  judge(state: boolean, success: string | NoticeOptions, error: string | NoticeOptions, duration?: number) {\n    if (state) {\n      this.success(success, duration)\n    } else {\n      this.error(error, duration)\n    }\n  }\n\n  close(key: Key) {\n    if (isNullish(key)) {\n      this.clear()\n    } else {\n      this._getInstance()?.remove(key)\n    }\n  }\n\n  config({ placement, ...others }: NoticeConfig & NoticeOptions) {\n    if (placement) {\n      this._getInstance()?.config({\n        placement: placementWhiteList.includes(placement) ? placement : placementWhiteList[0]\n      })\n    }\n\n    this.defaults = { ...this.defaults, ...others }\n  }\n\n  clone() {\n    const manager = new NoticeManager(this.defaults)\n\n    manager._mountedApp = this._mountedApp\n\n    return manager\n  }\n\n  clear() {\n    this._getInstance()?.clear()\n  }\n\n  destroy() {\n    this._mountedEl && this._wrapper?.removeChild(this._mountedEl)\n    this._innerApp?.unmount()\n    this._container && render(null, this._container)\n    destroyObject(this)\n  }\n\n  isDestroyed() {\n    return false\n  }\n\n  install(app: App, options: ManagerOptions & { property?: string } = {}) {\n    const { property, ...others } = options\n\n    this.config(others)\n    this._mountedApp = app\n\n    if (property || !app.config.globalProperties.$notice) {\n      app.config.globalProperties[property || '$notice'] = this\n    }\n  }\n\n  transferTo(target: MaybeRef<string | MaybeInstance>) {\n    if (!isClient) return\n\n    const el = unrefElement(target)\n\n    if (el) {\n      this._wrapper = el as HTMLElement | SVGElement | null\n\n      if (this._instance) {\n        this._mountedEl && !isNullish(this._wrapper) && this._wrapper.appendChild(this._mountedEl)\n      } else {\n        this._getInstance()\n      }\n    }\n  }\n\n  private _getInstance() {\n    if (!this._instance && isClient) {\n      if (!this._mountedApp) {\n        console.warn('[pocui:Notice]: 应用程序丢失,插件可能未安装.')\n\n        this._container = document.createElement('div')\n        this._innerApp = createApp(Component)\n        this._instance = this._innerApp.mount(this._container) as NoticeInstance\n      } else {\n        const vnode = createVNode(Component, null, null)\n\n        this._container = document.createElement('div')\n        vnode.appContext = this._mountedApp._context\n\n        render(vnode, this._container)\n\n        this._instance = proxyExposed<NoticeInstance>(vnode)\n      }\n\n      this._mountedEl = this._container.firstElementChild as HTMLElement\n      ;(this._wrapper || document.body).appendChild(this._mountedEl)\n    }\n\n    return this._instance\n  }\n\n  private _open(type: null | NoticeType, title: FuzzyOptions, content?: string | number, _duration?: number) {\n    if (!isClient) {\n      return noop\n    }\n\n    let options: NoticeOptions\n\n    if (isObject(title)) {\n      options = title\n    } else {\n      if (typeof content === 'number') {\n        options = {\n          title,\n          duration: content\n        }\n      } else if (!content) {\n        options = {\n          title,\n          duration: _duration\n        }\n      } else {\n        options = {\n          title,\n          content,\n          duration: _duration\n        }\n      }\n    }\n\n    const key = options.key ?? getKey()\n    const notice = this._getInstance()!\n\n    let timer: ReturnType<typeof setTimeout>\n\n    const userCloseFn = options.onClose\n    const onClose = () => {\n      clearTimeout(timer)\n\n      if (typeof userCloseFn === 'function') {\n        return userCloseFn()\n      }\n    }\n\n    const userEnterFn = options.onEnter\n    const onEnter = () => {\n      if (options.liveOnEnter) {\n        clearTimeout(timer)\n      }\n\n      if (typeof userEnterFn === 'function') {\n        return userEnterFn()\n      }\n    }\n\n    const userLeaveFn = options.onLeave\n    const onLeave = () => {\n      if (options.liveOnEnter) {\n        clearTimeout(timer)\n        setDelayClose()\n      }\n\n      if (typeof userLeaveFn === 'function') {\n        return userLeaveFn()\n      }\n    }\n\n    const item: NoticeOptions = {\n      ...this.defaults,\n      ...options,\n      key,\n      type,\n      onClose,\n      onEnter,\n      onLeave\n    }\n\n    if (item.icon && typeof item.icon !== 'function') {\n      item.icon = markRaw(item.icon)\n    }\n\n    notice.add(item)\n    setDelayClose()\n\n    function setDelayClose() {\n      const duration = typeof item.duration === 'number' ? item.duration : 4000\n\n      if (duration >= 500) {\n        timer = setTimeout(() => {\n          notice.remove(key)\n        }, duration)\n      }\n    }\n\n    return () => {\n      clearTimeout(timer)\n      notice.remove(key)\n    }\n  }\n}\n\nexport const Notice = new NoticeManager()\n"
    },
    {
      "target": "components/notice/notice.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@/components/icon'\nimport { Popup } from '@/components/popup'\nimport { Renderer } from '@/components/renderer'\n\nimport { computed, reactive, ref } from 'vue'\n\nimport { useIcons, useNameHelper } from '@pocui/config'\n\nimport { assertiveTypes, effectiveTypes } from './symbol'\n\nimport type { Key, NoticeConfig, NoticePlacement } from './symbol'\n\ndefineOptions({\n  name: 'Notice',\n  description:'常用于全局展示一些较重量级的交互反馈信息，如操作操作失败时的具体错误信息等。',\n  categories: ['feedback']\n})\n\nconst nh = useNameHelper('notice')\nconst icons = useIcons()\n\nconst predefinedIcons = computed(() => ({\n  primary: icons.value.info,\n  info: icons.value.info,\n  success: icons.value.success,\n  warning: icons.value.warning,\n  error: icons.value.error\n}))\n\nconst placement = ref<NoticePlacement>('top-right')\nconst popup = ref<InstanceType<typeof Popup>>()\n\nasync function add(options: Record<string, any>) {\n  if (popup.value) {\n    await popup.value.add(options)\n  }\n}\n\nasync function remove(key: Key) {\n  return !!popup.value && (await popup.value.remove(key))\n}\n\nfunction clear() {\n  popup.value && popup.value.clear()\n}\n\nfunction config(config: NoticeConfig) {\n  placement.value = config.placement || placement.value\n}\n\ndefineExpose(\n  reactive({\n    popup,\n    add,\n    remove,\n    clear,\n    config\n  })\n)\n</script>\n\n<template>\n  <Popup\n    ref=\"popup\"\n    :class=\"nh.b()\"\n    :transition-name=\"nh.ns(`popup-${placement.split('-')[1]}`)\"\n    :placement=\"placement\"\n  >\n    <template #item=\"item: any\">\n      <div\n        :class=\"[\n          {\n            [nh.be('item')]: true,\n            [nh.bs('vars')]: true,\n            [nh.bem('item', 'title-only')]: !item.content && typeof item.renderer !== 'function',\n            [nh.bem('item', 'has-icon')]: item.icon,\n            [nh.bem('item', 'content-only')]: !item.title,\n            [nh.bem('item', item.type!)]: item.type && effectiveTypes.includes(item.type),\n            [nh.bem('item', 'background')]: item.background,\n            [nh.bem('item', 'color')]: item.background && item.color,\n            [nh.bem('item', 'color-only')]: !item.background && item.color,\n            [nh.bem('item', 'marker')]: item.marker\n          },\n          item.className\n        ]\"\n        role=\"alert\"\n        :style=\"[\n          {\n            color: typeof item.color === 'string' ? item.color : undefined,\n            backgroundColor: typeof item.background === 'string' ? item.background : undefined\n          },\n          item.style || {}\n        ]\"\n        aria-atomic=\"true\"\n        :aria-live=\"item.type && assertiveTypes.includes(item.type) ? 'assertive' : 'polite'\"\n      >\n        <div\n          v-if=\"item.icon || (item.type && effectiveTypes.includes(item.type))\"\n          :class=\"nh.be('icon')\"\n          :style=\"{ color: item.iconColor }\"\n        >\n          <Icon\n            v-if=\"item.icon\"\n            :icon=\"item.icon\"\n            :scale=\"!item.content && typeof item.renderer !== 'function' ? 1 : 2\"\n            :style=\"[{ color: item.iconColor }, (item.icon as any).style]\"\n          ></Icon>\n          <Icon\n            v-else\n            v-bind=\"predefinedIcons[item.type!]\"\n            :scale=\"!item.content && typeof item.renderer !== 'function' ? 1 : 2\"\n            :style=\"{ color: item.iconColor }\"\n          ></Icon>\n        </div>\n        <div :class=\"nh.be('wrapper')\">\n          <Renderer v-if=\"typeof item.renderer === 'function'\" :renderer=\"item.renderer\" :data=\"item\"></Renderer>\n          <template v-else>\n            <template v-if=\"item.title\">\n              <div\n                v-if=\"item.parseHtml\"\n                :class=\"nh.be('title')\"\n                :style=\"{\n                  color: typeof item.titleColor === 'string' ? item.titleColor : undefined\n                }\"\n                v-html=\"item.title\"\n              ></div>\n              <div\n                v-else\n                :class=\"nh.be('title')\"\n                :style=\"{\n                  color: typeof item.titleColor === 'string' ? item.titleColor : undefined\n                }\"\n              >\n                {{ item.title || '' }}\n              </div>\n            </template>\n            <template v-if=\"item.content\">\n              <div v-if=\"item.parseHtml\" :class=\"nh.be('content')\" v-html=\"item.content\"></div>\n              <div v-else :class=\"nh.be('content')\">\n                {{ item.content || '' }}\n              </div>\n            </template>\n          </template>\n        </div>\n        <button\n          v-if=\"item.closable\"\n          type=\"button\"\n          :class=\"nh.be('close')\"\n          @click=\"remove(item.key!)\"\n        >\n          <Icon v-bind=\"icons.close\" label=\"close\"></Icon>\n        </button>\n      </div>\n    </template>\n  </Popup>\n</template>\n"
    },
    {
      "target": "components/notice/symbol.ts",
      "content": "import type { ComponentPublicInstance } from 'vue'\n\nexport type Key = string | number\nexport type NoticeType = 'primary' | 'info' | 'success' | 'warning' | 'error'\nexport type NoticePlacement = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'\n\nexport interface NoticeOptions extends Record<string, any> {\n  title?: string,\n\n  content?: string,\n\n  key?: Key,\n\n  icon?: Record<string, any> | (() => any),\n\n  iconColor?: string,\n\n  type?: NoticeType | null,\n\n  duration?: number,\n\n  className?: string | Record<string, any>,\n\n  style?: string | Record<string, any>,\n\n  zIndex?: number,\n\n  background?: boolean | string,\n\n  color?: boolean | string,\n\n  closable?: boolean,\n\n  parseHtml?: boolean,\n\n  liveOnEnter?: boolean,\n\n  renderer?: () => any\n}\n\nexport interface NoticeConfig {\n  placement?: NoticePlacement\n}\n\nexport interface NoticeInstance extends ComponentPublicInstance {\n  add: (options: NoticeOptions) => void,\n\n  remove: (key: string | number) => void,\n\n  clear: () => void,\n\n  config: (config: NoticeConfig) => void\n}\n\nexport const effectiveTypes = Object.freeze(['primary', 'info', 'success', 'warning', 'error'])\n\nexport const assertiveTypes = Object.freeze(['success', 'warning', 'error'])\n"
    }
  ],
  "dependencies": ["vue", "@pocui/hooks", "@pocui/utils", "@pocui/config"],
  "registryDependencies": ["notice.scss", "icon", "popup", "renderer"],
  "categories": ["feedback"],
  "meta": { "isReferenceOnly": false }
}
