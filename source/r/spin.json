{
  "name": "spin",
  "type": "registry:components",
  "description": "为一个区块启用加载中状态的快速切换，常用在数据渲染或异步处理耗时较长的场合，以避免用户长时间无法获得有效反馈。",
  "files": [
    {
      "target": "components/spin/directive.ts",
      "content": "import { Spin } from '@/components/spin'\n\nimport { createVNode, nextTick, render } from 'vue'\n\nimport { isObject } from '@pocui/utils'\n\nimport type { ObjectDirective, VNode } from 'vue'\n\ninterface LoadingRecord {\n  spin: VNode,\n\n  props: any,\n\n  originPosition: string\n}\n\nexport const loading: ObjectDirective<HTMLElement & { __loading?: LoadingRecord }, any> = {\n  mounted(el, binding) {\n    nextTick(() => {\n      const props = isObject(binding.value) ? { ...binding.value } : ({ active: binding.value } as any)\n\n      props.inner = true\n\n      const spin = createVNode(Spin, props, null, 0, Object.keys(props))\n      const position = getComputedStyle(el).position\n\n      el.__loading = {\n        spin,\n        props,\n        originPosition: position\n      }\n\n      if (position === 'static') {\n        el.style.position = 'relative'\n      }\n\n      render(spin, el)\n    })\n  },\n  updated(el, binding) {\n    nextTick(() => {\n      if (!el.__loading) return\n\n      const props = isObject(binding.value) ? binding.value : { active: binding.value }\n      const component = el.__loading.spin.component\n\n      if (component) {\n        Object.keys(props).forEach(key => {\n          component.props[key] = props[key]\n        })\n\n        component.props.inner = true\n      }\n    })\n  },\n  beforeUnmount(el) {\n    if (!el.__loading) return\n\n    render(null, el)\n    delete el.__loading\n  }\n}\n"
    },
    {
      "target": "components/spin/index.ts",
      "content": "import Spin from './spin.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Spin }\nexport { spinProps } from './props'\n\nexport type SpinExposed = ComponentPublicInstance & InstanceType<typeof Spin>\n\nexport type { SpinProps, SpinCProps } from './props'\n"
    },
    {
      "target": "components/spin/props.ts",
      "content": "import { booleanProp, buildProps, classProp, eventProp, iconProp, localeProp } from '@pocui/config'\n\nimport type { IconEffect } from '@/components/icon'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nexport const spinProps = buildProps({\n  locale: localeProp('spin'),\n  active: booleanProp,\n  icon: iconProp,\n  inner: booleanProp,\n  delay: {\n    type: [Boolean, Number, Array] as PropType<boolean | number | number[]>,\n    default: null\n  },\n  tip: String,\n  hideMask: booleanProp,\n  maskColor: String,\n  maskClass: classProp,\n  transitionName: String,\n  iconEffect: String as PropType<IconEffect>,\n  onMaskClick: eventProp<(event: MouseEvent) => void>(),\n  onShow: eventProp(),\n  onHide: eventProp()\n})\n\nexport type SpinProps = ExtractPropTypes<typeof spinProps>\nexport type SpinCProps = ConfigurableProps<SpinProps>\n"
    },
    {
      "target": "components/spin/spin.vue",
      "content": "<script lang=\"ts\">\nimport { Icon } from '@/components/icon'\n\nimport { computed, defineComponent, ref, toRef, watch } from 'vue'\n\nimport { createIconProp, emitEvent, useIcons, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { toNumber } from '@pocui/utils'\n\nimport { spinProps } from './props'\n\nimport type { SlotsType } from 'vue'\n\nexport default defineComponent({\n  name: 'Spin',\n  description:'为一个区块启用加载中状态的快速切换，常用在数据渲染或异步处理耗时较长的场合，以避免用户长时间无法获得有效反馈。',\n  categories: ['feedback'],\n  components: {\n    Icon\n  },\n  props: spinProps,\n  slots: Object as SlotsType<{\n    default(): any,\n    tip(): any,\n    content(): any,\n    icon(): any\n  }>,\n  setup(_props) {\n    const nh = useNameHelper('spin')\n    const props = useProps('spin', _props, {\n      locale: null,\n      active: {\n        default: false,\n        static: true\n      },\n      icon: createIconProp(),\n      inner: false,\n      delay: false,\n      tip: '',\n      hideMask: false,\n      maskColor: '',\n      maskClass: null,\n      transitionName: () => nh.ns('fade'),\n      iconEffect: null\n    })\n    const locale = useLocale('spin', toRef(props, 'locale'))\n\n    const currentActive = ref(props.active)\n    const parent = ref<HTMLDivElement | null>(null)\n\n    const calculateIconSize = computed(() => {\n      const parentWidth = parent.value?.clientWidth || 0\n      const parentHeight = parent.value?.clientHeight || 0\n      if (parentWidth === 0 || parentHeight === 0) return '1em'\n\n      return `${Math.min(parentWidth, parentHeight) / 3}px` // 图标大小是父元素宽高中最小值的一半\n    })\n\n    const maskStyle = computed(() => {\n      const style = {} as any\n\n      if (props.maskColor) {\n        style[nh.cv('mask-bg-color')] = props.maskColor\n      }\n\n      return style\n    })\n    const delayTime = computed(() => {\n      if (props.delay) {\n        if (props.delay === true) {\n          return {\n            enter: 500,\n            leave: 500\n          }\n        }\n\n        if (typeof props.delay === 'number') {\n          return {\n            enter: props.delay,\n            leave: props.delay\n          }\n        }\n\n        if (Array.isArray(props.delay)) {\n          return {\n            enter: toNumber(props.delay[0]),\n            leave: toNumber(props.delay[1])\n          }\n        }\n      }\n\n      return {\n        enter: 0,\n        leave: 0\n      }\n    })\n\n    let timer: ReturnType<typeof setTimeout>\n\n    watch(\n      () => props.active,\n      value => {\n        clearTimeout(timer)\n\n        const delay = value ? delayTime.value.enter : delayTime.value.leave\n\n        if (delay) {\n          timer = setTimeout(() => {\n            currentActive.value = value\n          }, delay)\n        } else {\n          currentActive.value = value\n        }\n      }\n    )\n\n    function handleMaskClick(event: MouseEvent) {\n      emitEvent(props.onMaskClick, event)\n    }\n\n    function handleShow() {\n      emitEvent(props.onShow)\n    }\n\n    function handleHide() {\n      emitEvent(props.onHide)\n    }\n\n    return {\n      props,\n      nh,\n      locale,\n      icons: useIcons(),\n      currentActive,\n      parent,\n      maskStyle,\n      calculateIconSize,\n      handleMaskClick,\n      handleShow,\n      handleHide\n    }\n  }\n})\n</script>\n\n<template>\n  <div\n    v-if=\"!props.inner\"\n    ref=\"parent\"\n    :class=\"[nh.b(), nh.bs('vars'), props.inherit && nh.in()]\"\n    :aria-busy=\"currentActive ? 'true' : undefined\"\n  >\n    <slot></slot>\n    <Transition\n      appear\n      :name=\"props.transitionName\"\n      @after-enter=\"handleShow\"\n      @after-leave=\"handleHide\"\n    >\n      <div v-if=\"currentActive\" :class=\"nh.be('loading')\">\n        <div\n          v-if=\"!props.hideMask\"\n          :class=\"[nh.be('mask'), props.maskClass]\"\n          :style=\"maskStyle\"\n          @click=\"handleMaskClick\"\n        ></div>\n        <slot name=\"content\">\n          <div :class=\"nh.be('icon')\">\n            <slot name=\"icon\">\n              <Icon\n                :style=\"{ fontSize: calculateIconSize }\"\n                v-bind=\"icons.loading\"\n                :icon=\"props.icon || icons.loading.icon\"\n                :effect=\"props.iconEffect || icons.loading.effect\"\n                label=\"loading\"\n              ></Icon>\n            </slot>\n          </div>\n          <div :class=\"nh.be('tip')\">\n            <slot name=\"tip\">\n              {{ props.tip || locale?.loading }}\n            </slot>\n          </div>\n        </slot>\n      </div>\n    </Transition>\n  </div>\n  <Transition\n    v-else\n    appear\n    :name=\"props.transitionName\"\n    @after-enter=\"handleShow\"\n    @after-leave=\"handleHide\"\n  >\n    <div v-if=\"currentActive\" ref=\"parent\" :class=\"[nh.b(), nh.bs('vars'), nh.bm('inner')]\">\n      <div\n        v-if=\"!props.hideMask\"\n        :class=\"[nh.be('mask'), props.maskClass]\"\n        :style=\"maskStyle\"\n        @click=\"handleMaskClick\"\n      ></div>\n      <slot name=\"content\">\n        <div :class=\"nh.be('icon')\">\n          <slot name=\"icon\">\n            <Icon\n              :style=\"{ fontSize: calculateIconSize }\"\n              v-bind=\"icons.loading\"\n              :icon=\"props.icon || icons.loading.icon\"\n              :effect=\"props.iconEffect || icons.loading.effect\"\n              label=\"loading\"\n            ></Icon>\n          </slot>\n        </div>\n        <div :class=\"nh.be('tip')\">\n          <slot name=\"tip\">\n            {{ props.tip || locale?.loading }}\n          </slot>\n        </div>\n      </slot>\n    </div>\n  </Transition>\n</template>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/utils", "@pocui/config"],
  "registryDependencies": ["spin.scss", "icon"],
  "categories": ["feedback"],
  "meta": { "isReferenceOnly": false }
}
