{
  "name": "skeleton",
  "type": "registry:component",
  "description": "一个占位符，常用于需要等待加载的地方。",
  "files": [
    {
      "target": "components/skeleton/index.ts",
      "content": "import Skeleton from './skeleton'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Skeleton }\nexport { skeletonProps } from './props'\n\nexport type SkeletonExposed = ComponentPublicInstance & InstanceType<typeof Skeleton>\n\nexport type { SkeletonProps, SkeletonCProps } from './props'\n"
    },
    {
      "target": "components/skeleton/props.ts",
      "content": "import { booleanProp, booleanStringProp, buildProps, iconProp, sizeProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes } from 'vue'\n\nexport const skeletonProps = buildProps({\n  size: sizeProp,\n  width: [Number, String],\n  height: [Number, String],\n  repeat: Number,\n  tag: String,\n  activated: booleanProp,\n  image: booleanProp,\n  imageIcon: iconProp,\n  iconScale: Number,\n  round: booleanProp,\n  circle: booleanProp,\n  block: booleanProp,\n  spread: Number,\n  loading: booleanProp\n})\n\nexport type SkeletonProps = ExtractPropTypes<typeof skeletonProps>\nexport type SkeletonCProps = ConfigurableProps<SkeletonProps>\n\nexport const skeletonGroupProps = buildProps({\n  size: sizeProp,\n  tag: booleanStringProp,\n  itemTag: String,\n  activated: booleanProp,\n  round: booleanProp,\n  circle: booleanProp,\n  block: booleanProp,\n  loading: booleanProp\n})\n\nexport type SkeletonGroupProps = ExtractPropTypes<typeof skeletonGroupProps>\nexport type SkeletonGroupCProps = ConfigurableProps<SkeletonGroupProps>\n"
    },
    {
      "target": "components/skeleton/skeleton-group.ts",
      "content": "import { defineComponent, h, provide, renderSlot } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { skeletonGroupProps } from './props'\nimport { GROUP_STATE } from './symbol'\n\nexport default defineComponent({\n  name: 'SkeletonGroup',\n  description:'骨架屏组组件，用于批量管理和控制多个骨架屏的加载状态',\n  categories: ['display'],\n  props: skeletonGroupProps,\n  setup(_props, { slots }) {\n    const props = useProps('skeletonGroup', _props, {\n      size: null,\n      tag: false,\n      itemTag: null,\n      activated: false,\n      round: false,\n      circle: false,\n      block: false,\n      loading: true\n    })\n\n    const nh = useNameHelper('skeletonGroup')\n\n    provide(GROUP_STATE, props)\n\n    return () => {\n      if (props.tag) {\n        return h(\n          typeof props.tag === 'string' ? props.tag : 'div',\n          {\n            class: [nh.b(), props.inherit && nh.in()],\n            role: 'group'\n          },\n          {\n            default: () => slots.default?.()\n          }\n        )\n      }\n\n      return renderSlot(slots, 'default')\n    }\n  }\n})\n"
    },
    {
      "target": "components/skeleton/skeleton.tsx",
      "content": "import { Icon } from '@/components/icon'\n\nimport { computed, defineComponent, h, inject, renderSlot } from 'vue'\n\nimport { createIconProp, useIcons, useNameHelper, useProps } from '@pocui/config'\n\nimport { skeletonProps } from './props'\nimport { GROUP_STATE } from './symbol'\n\nexport default defineComponent({\n  name: 'Skeleton',\n  description:'一个占位符，常用于需要等待加载的地方。',\n  categories: ['display'],\n  inheritAttrs: false,\n  props: skeletonProps,\n  setup(_props, { attrs, slots }) {\n    const props = useProps('skeleton', _props, {\n      size: null,\n      width: null,\n      height: null,\n      repeat: {\n        default: 1,\n        validator: (value: number) => value > 0\n      },\n      tag: 'div',\n      activated: null,\n      image: false,\n      imageIcon: createIconProp(),\n      iconScale: 4,\n      round: null,\n      circle: null,\n      block: null,\n      spread: 0,\n      loading: null\n    })\n\n    const groupState = inject(GROUP_STATE, {} as any)\n\n    const nh = useNameHelper('skeleton')\n    const icons = useIcons()\n\n    const activated = computed(() => {\n      return props.activated ?? groupState.activated ?? false\n    })\n    const round = computed(() => {\n      return props.round ?? groupState.round ?? false\n    })\n    const circle = computed(() => {\n      return props.circle ?? groupState.circle ?? false\n    })\n    const block = computed(() => {\n      return props.block ?? groupState.block ?? false\n    })\n    const loading = computed(() => {\n      return props.loading ?? groupState.loading ?? true\n    })\n    const tag = computed(() => {\n      return props.tag || groupState.itemTag || 'div'\n    })\n    const className = computed(() => {\n      return {\n        [nh.b()]: true,\n        [nh.bs('vars')]: true,\n        [nh.in()]: Object.keys(groupState).length || props.inherit,\n        [nh.bm(props.size)]: props.size ?? groupState?.size,\n        [nh.bm('block')]: block.value,\n        [nh.bm('image')]: props.image,\n        [nh.bm('round')]: round.value && !circle.value,\n        [nh.bm('circle')]: circle.value,\n        [nh.bm('activated')]: activated.value\n      }\n    })\n    const style = computed(() => {\n      const style: Record<string, string> = {}\n\n      if (props.width !== null) {\n        style[nh.cv('width')] = parseSize(props.width)\n      }\n\n      if (props.height !== null) {\n        style[nh.cv('height')] = parseSize(props.height)\n      }\n\n      if (props.spread) {\n        style[nh.cv('spread')] = parseSize(props.spread)\n      }\n\n      return style\n    })\n\n    function parseSize(value: string | number) {\n      if (typeof value === 'number') {\n        return `${value}px`\n      }\n\n      value = value.trim()\n\n      if (/\\d$/.test(value)) {\n        return `${value}px`\n      }\n\n      return value\n    }\n\n    function renderSkeleton() {\n      if (!loading.value) {\n        return renderSlot(slots, 'default')\n      }\n\n      return h(\n        tag.value || 'div',\n        {\n          ...attrs,\n          class: [className.value, attrs.class],\n          style: [style.value, attrs.style]\n        },\n        props.image\n          ? [\n            <Icon\n              key={1}\n              {...icons.value.image}\n              icon={props.imageIcon || icons.value.image.icon}\n              scale={props.iconScale}\n            ></Icon>\n            ]\n          : []\n      )\n    }\n\n    return () => {\n      if (props.repeat > 1) {\n        return Array.from({ length: props.repeat }, () => renderSkeleton())\n      }\n\n      return renderSkeleton()\n    }\n  }\n})\n"
    },
    {
      "target": "components/skeleton/symbol.ts",
      "content": "import type { ComponentSize } from '@pocui/config'\nimport type { InjectionKey } from 'vue'\n\nexport interface GroupState {\n  size: ComponentSize,\n\n  itemTag: string,\n\n  activated: boolean,\n\n  round: boolean,\n\n  circle: boolean,\n\n  block: boolean,\n\n  loading: boolean\n}\n\nexport const GROUP_STATE: InjectionKey<GroupState> = Symbol('GROUP_STATE')\n"
    }
  ],
  "dependencies": ["@pocui/config", "vue"],
  "registryDependencies": ["skeleton.scss", "icon"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
