{
  "name": "split",
  "type": "registry:component",
  "description": "快速实现左右、上下分屏。",
  "files": [
    {
      "target": "components/split/index.ts",
      "content": "import Split from './split.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Split }\nexport { splitProps } from './props'\n\nexport type SplitExposed = ComponentPublicInstance & InstanceType<typeof Split>\n\nexport type { SplitProps, SplitCProps } from './props'\n"
    },
    {
      "target": "components/split/props.ts",
      "content": "import { booleanProp, buildProps, eventProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes } from 'vue'\n\nexport const splitProps = buildProps({\n  value: Number,\n  min: Number,\n  max: Number,\n  vertical: booleanProp,\n  noTransition: booleanProp,\n  lazy: booleanProp,\n  canFull: booleanProp,\n  onChange: eventProp<(value: number) => void>(),\n  onFull: eventProp<(type: 'top' | 'right' | 'bottom' | 'left') => void>(),\n  onReset: eventProp(),\n  onMoveStart: eventProp<(value: number) => void>(),\n  onMove: eventProp<(value: number) => void>(),\n  onMoveEnd: eventProp<(value: number) => void>()\n})\n\nexport type SplitProps = ExtractPropTypes<typeof splitProps>\nexport type SplitCProps = ConfigurableProps<ExtractPropTypes<typeof splitProps>>\n"
    },
    {
      "target": "components/split/split.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@/components/icon'\n\nimport { computed, ref, watch } from 'vue'\n\nimport { emitEvent, useIcons, useNameHelper, useProps } from '@pocui/config'\nimport { splitProps } from './props'\nimport { useMoving } from '@pocui/hooks'\n\ndefineOptions({ name: 'Split',\n  description:'快速实现左右、上下分屏。',\n  categories: ['other'], components: { Icon } })\n\nconst _props = defineProps(splitProps)\nconst props = useProps('split', _props, {\n  value: {\n    default: 0.5,\n    validator: (value: number) => value > 0 && value < 1,\n    static: true\n  },\n  min: 0.1,\n  max: 0.9,\n  vertical: false,\n  noTransition: false,\n  lazy: false,\n  canFull: false\n})\n\nconst emit = defineEmits(['update:value'])\n\nconst nh = useNameHelper('split')\nconst icons = useIcons()\nconst currentValue = ref(props.value)\nconst currentFull = ref<0 | 1 | -1>(0)\nconst transition = ref(false)\n\nconst wrapper = ref<HTMLElement>()\nconst guide = ref<HTMLElement>()\n\nconst offset = computed(() => {\n  return props.vertical ? 'offsetHeight' : 'offsetWidth'\n})\nconst position = computed<['top', 'bottom'] | ['left', 'right']>(() => {\n  return props.vertical ? ['top', 'bottom'] : ['left', 'right']\n})\n\nconst { target: handler, moving } = useMoving({\n  lazy: true,\n  capture: false,\n  onStart: (state, event) => {\n    if (currentFull.value || !wrapper.value || event.button > 0) {\n      return false\n    }\n\n    const { min, max, vertical, lazy } = props\n    const outer = wrapper.value[offset.value]\n    const computedMin = min <= 1 ? min : min / outer\n    const computedMax = max <= 1 ? max : max / outer\n\n    state.outer = outer\n    state.min = computedMin\n    state.max = computedMax\n    state.vertical = vertical\n    state.splitLazy = lazy\n    state.start = currentValue.value * outer\n    state.target = currentValue.value\n\n    if (lazy && guide.value) {\n      guide.value.style[position.value[0]] = `${currentValue.value * 100}`\n      guide.value.style.display = 'block'\n    }\n\n    emitEvent(props.onMoveStart, currentValue.value)\n  },\n  onMove: state => {\n    const outer = state.outer as number\n    const min = state.min as number\n    const max = state.max as number\n    const delta = state.vertical ? state.deltaY : state.deltaX\n    const start = state.start as number\n    const value = Math.min(Math.max(min, (start + delta) / outer), max)\n\n    if (state.splitLazy) {\n      if (guide.value) {\n        guide.value.style[position.value[0]] = `${value * 100}%`\n      }\n\n      state.target = value\n    } else {\n      handleChange(value)\n    }\n\n    emitEvent(props.onMove, value)\n  },\n  onEnd: state => {\n    if (guide.value) {\n      guide.value.style.display = ''\n    }\n\n    if (state.splitLazy) {\n      const target = state.target as number\n\n      if (Math.abs(target - currentValue.value) > 0.01) {\n        setTransition()\n      }\n\n      handleChange(target)\n    }\n\n    emitEvent(props.onMoveEnd, currentValue.value)\n  }\n})\n\nconst className = computed(() => {\n  let fullType = ''\n\n  if (currentFull.value) {\n    if (props.vertical) {\n      fullType = currentFull.value < 0 ? 'top' : 'bottom'\n    } else {\n      fullType = currentFull.value < 0 ? 'left' : 'right'\n    }\n  }\n\n  return {\n    [nh.b()]: true,\n    [nh.bs('vars')]: true,\n    [nh.bm('inherit')]: props.inherit,\n    [nh.bm(props.vertical ? 'vertical' : 'horizontal')]: true,\n    [nh.bm('moving')]: moving.value,\n    [nh.bm(`${fullType}-full`)]: !!fullType,\n    [nh.bm('transition')]: transition.value\n  }\n})\nconst leftPaneStyle = computed(() => {\n  return {\n    [position.value[1]]:\n      currentFull.value < 0 ? '0' : currentFull.value > 0 ? '100%' : `${(1 - currentValue.value) * 100}%`\n  }\n})\n\nconst rightPaneStyle = computed(() => {\n  return {\n    [position.value[0]]: currentFull.value < 0 ? '100%' : currentFull.value > 0 ? '0' : `${currentValue.value * 100}%`\n  }\n})\nconst triggerStyle = computed(() => {\n  return {\n    [position.value[0]]:\n      currentFull.value < 0\n        ? '100%'\n        : currentFull.value > 0\n          ? '0'\n          : `calc(${currentValue.value * 100}% - var(${nh.cv('handler-size')}) * 0.5)`\n  }\n})\nconst fullIcons = computed(() => {\n  return props.vertical ? [icons.value.angleDown, icons.value.angleUp] : [icons.value.angleRight, icons.value.angleLeft]\n})\n\nwatch(\n  () => props.value,\n  value => {\n    if (value.toFixed(5) !== currentValue.value.toFixed(5)) {\n      currentValue.value = value\n      setTransition()\n    }\n  }\n)\nwatch(currentValue, value => {\n  if (guide.value) {\n    guide.value.style[position.value[0]] = `${value * 100}%`\n  }\n})\nwatch(currentFull, value => {\n  setTransition()\n\n  if (value) {\n    let type: 'top' | 'right' | 'bottom' | 'left'\n\n    if (props.vertical) {\n      type = value < 0 ? 'top' : 'bottom'\n    } else {\n      type = value < 0 ? 'left' : 'right'\n    }\n\n    emitEvent(props.onFull, type)\n  } else {\n    emitEvent(props.onReset)\n  }\n})\n\nfunction setTransition() {\n  transition.value = !props.noTransition && !moving.value\n}\n\nfunction removeTransition() {\n  transition.value = false\n}\n\nfunction handleFull(type: 1 | -1) {\n  if (!props.canFull) {\n    return\n  }\n\n  if (currentFull.value) {\n    currentFull.value = 0\n  } else {\n    currentFull.value = type\n  }\n}\n\nfunction handleChange(value: number) {\n  if (value.toFixed(5) !== currentValue.value.toFixed(5)) {\n    currentValue.value = value\n\n    emitEvent(props.onChange, value)\n    emit('update:value', value)\n  }\n}\n</script>\n\n<template>\n  <div ref=\"wrapper\" :class=\"className\" @transitionend=\"removeTransition\">\n    <div :class=\"[nh.be('panel'), nh.bem('panel', props.vertical ? 'top' : 'left')]\" :style=\"leftPaneStyle\">\n      <slot name=\"left\"></slot>\n    </div>\n    <div :class=\"[nh.be('panel'), nh.bem('panel', props.vertical ? 'bottom' : 'right')]\" :style=\"rightPaneStyle\">\n      <slot name=\"right\"></slot>\n    </div>\n    <div :class=\"nh.be('trigger')\" :style=\"triggerStyle\">\n      <div ref=\"handler\" :class=\"nh.be('handler')\">\n        <template v-if=\"props.canFull\">\n          <button\n            type=\"button\"\n            :class=\"[nh.be('button'), nh.bem('button', `${props.vertical ? 'top' : 'left'}-full`)]\"\n            @pointerdown.stop\n            @click.left=\"handleFull(-1)\"\n          >\n            <Icon v-bind=\"fullIcons[0]\" :scale=\"+(fullIcons[0].scale || 1) * 0.6\"></Icon>\n          </button>\n          <button\n            type=\"button\"\n            :class=\"[nh.be('button'), nh.bem('button', `${props.vertical ? 'bottom' : 'right'}-full`)]\"\n            @pointerdown.stop\n            @click.left=\"handleFull(1)\"\n          >\n            <Icon v-bind=\"fullIcons[1]\" :scale=\"+(fullIcons[1].scale || 1) * 0.6\"></Icon>\n          </button>\n        </template>\n        <template v-else>\n          <slot name=\"handler\">\n            <span v-for=\"n in 6\" :key=\"n\" :class=\"nh.be('pointer')\"></span>\n          </slot>\n        </template>\n      </div>\n    </div>\n    <div ref=\"guide\" :class=\"nh.be('guide')\"></div>\n  </div>\n</template>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/hooks"],
  "registryDependencies": ["split.scss", "icon"],
  "categories": ["other"],
  "meta": { "isReferenceOnly": false }
}
