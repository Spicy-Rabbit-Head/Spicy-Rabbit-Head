{
  "name": "alert",
  "type": "registry:components",
  "description": "提供一个静态的警告提示，展现需要关注的内容，不会自动消失，可以由用户点击关闭。",
  "files": [
    {
      "target": "components/alert/alert.vue",
      "content": "<script setup lang=\"ts\">\nimport { CollapseTransition } from '@/components/collapse-transition'\nimport { Icon } from '@/components/icon'\n\nimport { computed, onMounted, ref, watch } from 'vue'\n\nimport { emitEvent, useIcons, useNameHelper, useProps } from '@pocui/config'\nimport { adjustAlpha, getRangeWidth, isClient, mixColor, parseColorToRgba } from '@pocui/utils'\n\nimport { alertProps } from './props'\nimport { alertTypes } from './symbol'\n\ndefineOptions({\n  name: 'Alert',\n  description: '提供一个静态的警告提示，展现需要关注的内容，不会自动消失，可以由用户点击关闭。',\n  categories: ['feedback']\n})\n\nconst _props = defineProps(alertProps)\nconst props = useProps('alert', _props, {\n  type: {\n    default: 'primary',\n    validator: value => alertTypes.includes(value)\n  },\n  title: '',\n  colorfulText: false,\n  icon: {\n    isFunc: true,\n    default: false\n  },\n  closable: false,\n  iconColor: '',\n  noBorder: false,\n  banner: false,\n  manual: false,\n  scroll: false,\n  scrollSpeed: 1,\n  color: null\n})\n\nconst slots = defineSlots<{\n  default(): any,\n  title(): any,\n  close(): any,\n  icon(): any\n}>()\n\nconst nh = useNameHelper('alert')\nconst icons = useIcons()\n\nconst predefinedIcons = computed(() => ({\n  default: icons.value.alert,\n  primary: icons.value.info,\n  info: icons.value.info,\n  success: icons.value.success,\n  warning: icons.value.warning,\n  error: icons.value.error\n}))\n\nconst closed = ref(false)\nconst hidden = ref(false)\nconst scrollDuration = ref(0)\nconst scrollOffset = ref(0)\nconst scrollWidth = ref(0)\n\nconst content = ref<HTMLElement>()\nconst scrollEl = ref<HTMLElement>()\n\nconst hasTitle = computed(() => {\n  return !!(props.title || slots.title)\n})\nconst hasIcon = computed(() => {\n  return !!(props.icon || slots.icon)\n})\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.bs('vars')]: true,\n    [nh.in()]: props.inherit,\n    [nh.bm(props.type)]: props.type,\n    [nh.bm('colorful-text')]: props.colorfulText,\n    [nh.bm('has-title')]: hasTitle.value,\n    [nh.bm('has-icon')]: hasIcon.value,\n    [nh.bm('closable')]: props.closable,\n    [nh.bm('no-border')]: !props.banner && props.noBorder,\n    [nh.bm('banner')]: props.banner\n  }\n})\nconst style = computed(() => {\n  if (!props.color) return undefined\n\n  const rootStyle = isClient ? getComputedStyle(document.documentElement) : null\n  const black = parseColorToRgba(rootStyle?.getPropertyValue(nh.nv('color-black')) || '#000')\n  const baseColor = parseColorToRgba(props.color)\n\n  return nh.cvm({\n    'bg-color': adjustAlpha(baseColor, 0.2).toString(),\n    'b-color': adjustAlpha(baseColor, 0.5).toString(),\n    'icon-color': mixColor(black, baseColor, 0.2).toString(),\n    ...(props.colorfulText\n      ? {\n          'text-color': mixColor(black, baseColor, 0.2).toString(),\n          'title-color': mixColor(black, baseColor, 0.2).toString()\n        }\n      : {})\n  })\n})\nconst iconComp = computed(() => {\n  if (typeof props.icon === 'boolean') {\n    return predefinedIcons.value[props.type] ?? {}\n  }\n\n  return { icon: props.icon }\n})\nconst scrollStyle = computed(() => {\n  return {\n    width: `${scrollWidth.value}px`,\n    transitionDuration: `${scrollDuration.value}ms`,\n    transform: `translateX(${scrollOffset.value}px)`\n  }\n})\n\nwatch(\n  () => props.scroll,\n  value => {\n    value && startScroll()\n  }\n)\n\nonMounted(() => {\n  props.scroll && startScroll()\n})\n\nfunction handleClose() {\n  if (!props.manual) {\n    closed.value = true\n  }\n\n  emitEvent(props.onClose)\n}\n\nfunction handleAfterLeave() {\n  emitEvent(props.onHide)\n  hidden.value = true\n}\n\nfunction startScroll() {\n  if (content.value && scrollEl.value) {\n    const contentRect = content.value.getBoundingClientRect()\n    const rangeWidth = getRangeWidth(scrollEl.value)\n    const duration = ((contentRect.width + rangeWidth) * 12) / (Math.max(props.scrollSpeed, 0) || 1)\n\n    scrollDuration.value = 0\n    scrollOffset.value = contentRect.width\n    scrollWidth.value = rangeWidth\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        scrollDuration.value = duration\n        scrollOffset.value = -rangeWidth\n      })\n    })\n  }\n}\n\nfunction handleScrollEnd() {\n  emitEvent(props.onScrollEnd)\n  requestAnimationFrame(startScroll)\n}\n</script>\n\n<template>\n  <CollapseTransition v-if=\"!hidden\" fade-effect @after-leave=\"handleAfterLeave\">\n    <div\n      v-if=\"!closed\"\n      :class=\"className\"\n      role=\"alert\"\n      :style=\"style\"\n    >\n      <div :class=\"nh.be('wrapper')\">\n        <div v-if=\"hasTitle\" :class=\"nh.be('title')\">\n          <slot name=\"title\">\n            {{ title }}\n          </slot>\n        </div>\n        <div ref=\"content\" :class=\"[nh.be('content'), props.scroll && nh.bem('content', 'scroll')]\">\n          <span\n            v-if=\"props.scroll\"\n            ref=\"scrollEl\"\n            :class=\"nh.be('scroll')\"\n            :style=\"scrollStyle\"\n            @transitionend=\"handleScrollEnd\"\n          >\n            <slot></slot>\n          </span>\n          <slot v-else></slot>\n        </div>\n      </div>\n      <button\n        v-if=\"props.closable\"\n        type=\"button\"\n        :class=\"nh.be('close')\"\n        @click=\"handleClose\"\n      >\n        <slot name=\"close\">\n          <Icon v-bind=\"icons.close\" label=\"close\"></Icon>\n        </slot>\n      </button>\n      <div v-if=\"hasIcon\" :class=\"nh.be('icon')\">\n        <slot name=\"icon\">\n          <Icon v-bind=\"iconComp\" :scale=\"hasTitle ? 2 : 1\" :style=\"{ color: props.iconColor }\"></Icon>\n        </slot>\n      </div>\n    </div>\n  </CollapseTransition>\n</template>\n"
    },
    {
      "target": "components/alert/index.ts",
      "content": "import Alert from './alert.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Alert }\nexport { alertProps } from './props'\n\nexport type AlertExposed = ComponentPublicInstance & InstanceType<typeof Alert>\n\nexport type { AlertProps, AlertCProps } from './props'\nexport type { AlertType } from './symbol'\n"
    },
    {
      "target": "components/alert/props.ts",
      "content": "import { booleanProp, buildProps, eventProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { AlertType } from './symbol'\n\nexport const alertProps = buildProps({\n  type: String as PropType<AlertType>,\n  title: String,\n  colorfulText: booleanProp,\n  icon: {\n    type: [Boolean, String, Function],\n    default: null\n  },\n  closable: booleanProp,\n  iconColor: String,\n  noBorder: booleanProp,\n  banner: booleanProp,\n  manual: booleanProp,\n  scroll: booleanProp,\n  scrollSpeed: Number,\n  color: String,\n  onClose: eventProp(),\n  onHide: eventProp(),\n  onScrollEnd: eventProp()\n})\n\nexport type AlertProps = ExtractPropTypes<typeof alertProps>\nexport type AlertCProps = ConfigurableProps<ExtractPropTypes<typeof alertProps>>\n"
    },
    {
      "target": "components/alert/symbol.ts",
      "content": "export type AlertType = 'default' | 'primary' | 'info' | 'success' | 'warning' | 'error'\n\nexport const alertTypes = Object.freeze<AlertType[]>([\n  'default',\n  'primary',\n  'info',\n  'success',\n  'warning',\n  'error'\n])\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["collapse-transition", "icon", "alert.scss"],
  "categories": ["feedback"],
  "meta": { "isReferenceOnly": false }
}
