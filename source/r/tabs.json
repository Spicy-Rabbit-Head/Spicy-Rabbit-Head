{
  "name": "tabs",
  "type": "registry:components",
  "description": "标签页可提供多个平级的区域，以将一些大量内容进行收纳和展现，保持界面整洁。",
  "files": [
    {
      "target": "components/tabs/index.ts",
      "content": "import Tabs from './tabs.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Tabs }\nexport { tabsProps } from './props'\n\nexport type TabsExposed = ComponentPublicInstance & InstanceType<typeof Tabs>\n\nexport type { TabsProps, TabsCProps } from './props'\n"
    },
    {
      "target": "components/tabs/props.ts",
      "content": "import { tabNavProps } from '@/components/tab-nav'\nimport { tabNavItemProps } from '@/components/tab-nav-item'\n\nimport { omitProps, wrapProps } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes } from 'vue'\n\nexport const tabsProps = omitProps(tabNavProps, ['options'])\n\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\nexport type TabsCProps = ConfigurableProps<TabsProps>\n\nexport const tabPanelProps = wrapProps({\n  ...tabNavItemProps,\n  name: {\n    type: String,\n    default: ''\n  }\n})\n\nexport type TabPanelProps = ExtractPropTypes<typeof tabPanelProps>\n"
    },
    {
      "target": "components/tabs/symbol.ts",
      "content": "import type { InjectionKey } from 'vue'\n\nexport type ChangeEvent = (label: string | number) => void\n\nexport interface ItemState {\n  label: string | number,\n\n  name: string,\n\n  icon: Record<string, any>,\n\n  disabled: boolean,\n\n  closable?: boolean,\n\n  labelRenderer: null | ((data: { label: string | number }) => any)\n}\n\nexport interface TabsState {\n  currentActive: string | number,\n\n  increaseItem: (item: ItemState) => void,\n\n  decreaseItem: (item: ItemState) => void,\n\n  handleActive: (label: string | number) => void,\n\n  refreshLabels: () => void\n}\n\nexport const TABS_STATE: InjectionKey<TabsState> = Symbol('TABS_STATE')\n"
    },
    {
      "target": "components/tabs/tab-panel.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, inject, onBeforeUnmount, reactive, ref, toRef, watch } from 'vue'\n\nimport { emitEvent, useNameHelper } from '@pocui/config'\nimport { tabPanelProps } from './props'\n\nimport { TABS_STATE } from './symbol'\n\nimport type { ItemState } from './symbol'\n\ndefineOptions({ name: 'TabPanel',\n  description:'标签面板组件，作为标签页的内容面板。',\n  categories: ['navigation'] })\n\nconst props = defineProps(tabPanelProps)\nconst slots = defineSlots<{\n  default(): any,\n  label(props: { label: string | number }): any\n}>()\n\nconst tabsState = inject(TABS_STATE, null)\n\nconst nh = useNameHelper('tabs')\nconst active = ref(false)\nconst currentLabel = ref(props.label)\n\nconst className = computed(() => {\n  const baseClass = nh.be('panel')\n\n  return {\n    [baseClass]: true,\n    [`${baseClass}--disabled`]: props.disabled,\n    [`${baseClass}--active`]: !props.disabled && active.value\n  }\n})\n\nwatch(\n  () => props.label,\n  value => {\n    currentLabel.value = value\n    tabsState?.refreshLabels()\n  }\n)\nwatch(active, value => {\n  emitEvent(props.onToggle!, value)\n})\n\nif (tabsState) {\n  const state = reactive({\n    label: currentLabel,\n    name: toRef(props, 'name'),\n    icon: toRef(props, 'icon'),\n    disabled: toRef(props, 'disabled'),\n    closable: toRef(props, 'closable'),\n    labelRenderer: null\n  }) as ItemState\n\n  watch(\n    () => slots.label,\n    value => {\n      state.labelRenderer = value ? data => value(data) : null\n    },\n    { immediate: true }\n  )\n  watch(currentLabel, () => {\n    active.value = currentLabel.value === tabsState.currentActive\n  })\n  watch(\n    () => tabsState.currentActive,\n    value => {\n      active.value = currentLabel.value === value\n    },\n    { immediate: true }\n  )\n\n  tabsState.increaseItem(state)\n\n  onBeforeUnmount(() => {\n    tabsState.decreaseItem(state)\n  })\n}\n</script>\n\n<template>\n  <div :class=\"className\" role=\"tabpanel\" :aria-hidden=\"!active\">\n    <slot></slot>\n  </div>\n</template>\n"
    },
    {
      "target": "components/tabs/tabs.vue",
      "content": "<script setup lang=\"ts\">\nimport { Renderer } from '@/components/renderer'\nimport { TabNav } from '@/components/tab-nav'\nimport { TabNavItem } from '@/components/tab-nav-item'\n\nimport { computed, onMounted, provide, reactive, ref, watch } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { debounceMinor, isFunction, isNullish } from '@pocui/utils'\n\nimport { tabsProps } from './props'\n\nimport { TABS_STATE } from './symbol'\n\nimport type { ChangeEvent, ItemState } from './symbol'\n\ndefineOptions({\n  name: 'Tabs',\n  description:'标签页可提供多个平级的区域，以将一些大量内容进行收纳和展现，保持界面整洁。',\n  categories: ['navigation'],\n  components: {\n    Renderer,\n    TabNav,\n    TabNavItem\n  }\n})\n\nconst _props = defineProps(tabsProps)\nconst props = useProps('tabs', _props, {\n  active: {\n    default: null,\n    static: true\n  },\n  card: false,\n  align: 'left',\n  placement: 'top',\n  closable: false,\n  showAdd: false\n})\n\ndefineSlots<{\n  default(): any,\n  add(): any,\n  prefix(): any,\n  suffix(): any\n}>()\n\nconst nh = useNameHelper('tabs')\n\nconst emit = defineEmits(['update:active'])\nconst currentActive = ref(props.active)\nconst currentIndex = ref(0)\nconst itemStates = reactive(new Set<ItemState>())\nconst isTransition = ref(false)\n\nconst mainStyle = computed(() => {\n  return {\n    transform: `translateX(-${currentIndex.value}00%) translateZ(0)`\n  }\n})\nconst itemList = computed(() => Array.from(itemStates))\n\nconst refreshLabels = debounceMinor(() => {\n  itemList.value.forEach((item, index) => {\n    if (isNullish(item.label)) {\n      item.label = index + 1\n    }\n  })\n\n  if (itemList.value.length >= 1 && isActiveEmpty()) {\n    currentActive.value = itemList.value[0].label\n  }\n})\nconst computeIndex = debounceMinor(() => {\n  const index = itemList.value.findIndex(item => item.label === currentActive.value)\n\n  if (~index) {\n    currentIndex.value = index\n  }\n})\n\ndefineExpose({\n  mainStyle,\n  handleActive,\n  handleAdd,\n  handleClose\n})\n\nprovide(\n  TABS_STATE,\n  reactive({\n    currentActive,\n    handleActive,\n    increaseItem,\n    decreaseItem,\n    refreshLabels\n  })\n)\n\nwatch(\n  () => props.active,\n  value => {\n    currentActive.value = value\n  }\n)\n\nonMounted(computeIndex)\n\nfunction isActiveEmpty() {\n  return isNullish(currentActive.value) || currentActive.value === ''\n}\n\nfunction increaseItem(item: ItemState) {\n  itemStates.add(item)\n  refreshLabels()\n}\n\nfunction decreaseItem(item: ItemState) {\n  itemStates.delete(item)\n  refreshLabels()\n}\n\nfunction handleActive(label: string | number) {\n  currentActive.value = label\n\n  computeIndex()\n  emit('update:active', label)\n  emitEvent(props.onChange as ChangeEvent, label)\n}\n\nfunction handleAdd() {\n  emitEvent(props.onAdd)\n}\n\nfunction handleClose(label: string | number) {\n  emitEvent(props.onClose as ChangeEvent, label)\n}\n</script>\n\n<template>\n  <div :class=\"[nh.b(), nh.bm(props.placement), props.inherit && nh.in()]\">\n    <div :class=\"nh.be('header')\">\n      <TabNav\n        inherit\n        :active=\"currentActive\"\n        :card=\"props.card\"\n        :align=\"props.align\"\n        :placement=\"props.placement\"\n        :closable=\"props.closable\"\n        :show-add=\"props.showAdd\"\n        @change=\"handleActive\"\n        @add=\"handleAdd\"\n        @close=\"handleClose\"\n      >\n        <template v-if=\"$slots.prefix\" #prefix>\n          <slot name=\"prefix\"></slot>\n        </template>\n        <TabNavItem\n          v-for=\"(item, index) in itemList\"\n          :key=\"index\"\n          :label=\"item.label\"\n          :icon=\"item.icon\"\n          :disabled=\"item.disabled\"\n          :closable=\"item.closable\"\n        >\n          <template v-if=\"isFunction(item.labelRenderer)\">\n            <Renderer :renderer=\"item.labelRenderer\" :data=\"{ label: item.label, disabled: item.disabled }\"></Renderer>\n          </template>\n          <template v-else>\n            {{ item.name || item.label }}\n          </template>\n        </TabNavItem>\n        <template v-if=\"$slots.suffix\" #suffix>\n          <slot name=\"suffix\"></slot>\n        </template>\n        <template v-if=\"$slots.add\">\n          <slot name=\"add\"></slot>\n        </template>\n      </TabNav>\n    </div>\n    <div\n      :class=\"{\n        [nh.be('main')]: true,\n        [nh.bem('main', 'transition')]: isTransition\n      }\"\n      @transitionend=\"isTransition = false\"\n    >\n      <slot></slot>\n    </div>\n  </div>\n</template>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["tabs.scss", "tab-nav", "tab-nav-item", "renderer"],
  "categories": ["navigation"],
  "meta": { "isReferenceOnly": false }
}
