{
  "name": "calendar",
  "type": "registry:component",
  "description": "将数据按照日历的形式展示的容器，一般用于数据按日期划分的场合，例如日程表、课表等等。",
  "files": [
    {
      "target": "components/calendar/calendar-cell.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed } from \"vue\";\n\nimport { useNameHelper } from \"@pocui/config\";\n\nimport { toAttrValue } from \"@pocui/utils\";\n\nimport type { LocaleConfig } from \"@pocui/config\";\n\nimport type { PropType } from \"vue\";\n\nimport type { MonthIndex, WeekIndex } from \"./symbol\";\n\ndefineOptions({\n  name: \"CalendarCell\",\n  description: \"日历的单元格，通常由 Calendar 组件使用，用于展示某一天的日期。\",\n  categories: [\"display\"],\n});\n\nconst props = defineProps({\n  date: {\n    type: Date,\n    required: true,\n  },\n  locale: {\n    type: Object as PropType<LocaleConfig[\"calendar\"]>,\n    required: true,\n  },\n  selected: {\n    type: Boolean,\n    default: false,\n  },\n  hovered: {\n    type: Boolean,\n    default: false,\n  },\n  isPrev: {\n    type: Boolean,\n    default: false,\n  },\n  isNext: {\n    type: Boolean,\n    default: false,\n  },\n  isToday: {\n    type: Boolean,\n    default: false,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  inRange: {\n    type: Boolean,\n    default: false,\n  },\n});\n\nconst emit = defineEmits([\"select\", \"hover\"]);\n\ndefineSlots<{\n  default(props: {\n    date: Date;\n    label: string;\n    selected: boolean;\n    hovered: boolean;\n    isPrev: boolean;\n    isNext: boolean;\n    isToday: boolean;\n    disabled: boolean;\n    inRange: boolean;\n  }): any;\n}>();\n\nconst nh = useNameHelper(\"calendar\");\n\nconst label = computed(() => {\n  const label = props.locale.ariaLabel;\n  const year = props.date.getFullYear();\n  const month = (props.date.getMonth() + 1) as MonthIndex;\n  const day = props.date.getDate();\n  const weekDay = (props.date.getDay() || 7) as WeekIndex;\n\n  return `${label[`week${weekDay}`]}, ${label[`month${month}`]} ${day}, ${year}`;\n});\n</script>\n\n<template>\n  <div\n    :class=\"nh.be('cell')\"\n    role=\"gridcell\"\n    :aria-selected=\"toAttrValue(selected)\"\n    :aria-disabled=\"toAttrValue(disabled)\"\n    @mouseenter=\"emit('hover', date)\"\n  >\n    <slot\n      name=\"default\"\n      :date=\"date\"\n      :label=\"label\"\n      :selected=\"selected\"\n      :hovered=\"hovered\"\n      :is-prev=\"isPrev\"\n      :is-next=\"isNext\"\n      :is-today=\"isToday\"\n      :disabled=\"disabled\"\n      :in-range=\"inRange\"\n    >\n      <div\n        :class=\"{\n          [nh.be('index')]: true,\n          [nh.bem('index', 'selected')]: selected,\n          [nh.bem('index', 'prev')]: isPrev,\n          [nh.bem('index', 'next')]: isNext,\n          [nh.bem('index', 'today')]: isToday,\n          [nh.bem('index', 'disabled')]: disabled,\n          [nh.bem('index', 'in-range')]: inRange,\n        }\"\n        tabindex=\"0\"\n        role=\"button\"\n        :aria-label=\"label\"\n        :aria-disabled=\"toAttrValue(disabled)\"\n        @click=\"emit('select', date)\"\n        @keydown.enter.prevent=\"emit('select', date)\"\n        @keydown.space.prevent=\"emit('select', date)\"\n      >\n        <div :class=\"nh.be('index-inner')\">\n          {{ date.getDate() }}\n        </div>\n      </div>\n    </slot>\n  </div>\n</template>\n"
    },
    {
      "target": "components/calendar/calendar-panel.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, ref, toRef, watch } from \"vue\";\n\nimport { emitEvent, useLocale, useNameHelper, useProps } from \"@pocui/config\";\nimport { useHover } from \"@pocui/hooks\";\n\nimport {\n  debounceMinor,\n  differenceDays,\n  endOfDay,\n  rangeDate,\n  startOfDay,\n  startOfWeek,\n  toFalse,\n} from \"@pocui/utils\";\n\nimport CalendarCell from \"./calendar-cell.vue\";\nimport { calendarPanelProps } from \"./props\";\n\nimport type { Dateable } from \"@pocui/utils\";\n\nimport type { WeekIndex } from \"./symbol\";\n\ndefineOptions({\n  name: \"CalendarPanel\",\n  description:\n    \"日历面板组件，用于显示日历网格和日期选择。\",\n  categories: [\"display\"],\n});\n\nconst _props = defineProps(calendarPanelProps);\nconst props = useProps(\"calendarBase\", _props, {\n  locale: null,\n  value: {\n    default: null,\n    static: true,\n  },\n  year: () => new Date().getFullYear(),\n  month: {\n    default: () => new Date().getMonth() + 1,\n    validator: (value) => value > 0 && value <= 12,\n  },\n  weekDays: {\n    default: null,\n    validator: (value) => !value || value.length === 0 || value.length === 7,\n  },\n  weekStart: {\n    default: 0,\n    validator: (value) => value >= 0 && value < 7,\n  },\n  today: {\n    default: () => new Date(),\n    validator: (value) => !Number.isNaN(+new Date(value)),\n  },\n  disabledDate: {\n    default: toFalse,\n    isFunc: true,\n  },\n  valueType: {\n    default: \"start\",\n    validator: (value) => value === \"start\" || value === \"end\",\n  },\n  min: null,\n  max: null,\n  range: null,\n});\n\nconst emit = defineEmits([\"update:value\"]);\n\ndefineSlots<{\n  header(): any;\n  week(props: { label: string; index: number; week: number }): any;\n  item(props: {\n    date: Date;\n    label: string;\n    selected: boolean;\n    hovered: boolean;\n    isPrev: boolean;\n    isNext: boolean;\n    isToday: boolean;\n    disabled: boolean;\n    inRange: boolean;\n  }): any;\n  footer(): any;\n}>();\n\nconst nh = useNameHelper(\"calendar\");\n\nconst startValue = ref<Date | null>(null);\nconst endValue = ref<Date | null>(null);\nconst dateRange = ref<Date[]>([]);\nconst hoveredDate = ref<Date | null>(null);\n\nconst { wrapper, isHover } = useHover();\nconst locale = useLocale(\"calendar\", toRef(props, \"locale\"));\n\nconst min = computed(() => (props.min ? +startOfDay(props.min) : -Infinity));\nconst max = computed(() => (props.max ? +endOfDay(props.max) : Infinity));\nconst reversed = computed(() => {\n  if (Number.isNaN(min.value) || Number.isNaN(max.value)) {\n    return false;\n  }\n\n  return min.value > max.value;\n});\n\nconst updateDateRange = debounceMinor(setDateRange);\n\nparseValue(props.value);\nsetDateRange();\n\nwatch(() => props.value, parseValue);\nwatch(\n  [() => props.year, () => props.month, () => props.weekStart],\n  updateDateRange,\n);\nwatch(isHover, (value) => {\n  if (!value) {\n    hoveredDate.value = null;\n  }\n});\nwatch(hoveredDate, (value) => {\n  emitEvent(props.onHover, value);\n});\n\ndefineExpose({\n  startValue,\n  endValue,\n  body: wrapper,\n  isSelected,\n  isHovered,\n  isPrevMonth,\n  isNextMonth,\n  isDisabled,\n  isToday,\n  isInRange,\n});\n\nfunction getWeekLabel(index: number) {\n  return (\n    props.weekDays?.[index] || locale.value[`week${(index || 7) as WeekIndex}`]\n  );\n}\n\nfunction setDateRange() {\n  dateRange.value = rangeDate(\n    startOfWeek(new Date(props.year, props.month - 1, 1), props.weekStart),\n    42,\n  );\n}\n\nfunction parseValue(value: Dateable | Dateable[]) {\n  if (!Array.isArray(value)) {\n    value = [value, value];\n  }\n\n  for (let i = 0; i < 2; ++i) {\n    const date = new Date(value[i] ?? \"\");\n\n    if (i === 0) {\n      startValue.value = Number.isNaN(+date) ? null : date;\n    } else {\n      endValue.value = Number.isNaN(+date) ? null : date;\n    }\n\n    if (!props.range) break;\n  }\n}\n\nfunction isSelected(date: Date) {\n  if (!date || (!startValue.value && !endValue.value)) {\n    return false;\n  }\n\n  return !!(\n    (startValue.value && !differenceDays(date, startValue.value)) ||\n    (endValue.value && !differenceDays(date, endValue.value))\n  );\n}\n\nfunction isDisabled(date: Date) {\n  if (typeof props.disabledDate === \"function\") {\n    if (props.disabledDate(date)) {\n      return true;\n    }\n  }\n\n  const time = date.getTime();\n\n  if (reversed.value) {\n    if (time > max.value && time < min.value) {\n      return true;\n    }\n  } else {\n    if (time < min.value || time > max.value) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isHovered(date: Date) {\n  if (!date || !hoveredDate.value) {\n    return false;\n  }\n\n  return !differenceDays(date, hoveredDate.value);\n}\n\nfunction isPrevMonth(date: Date) {\n  const { year, month } = props;\n  const dateYear = date.getFullYear();\n  const dateMonth = date.getMonth();\n\n  return dateYear < year || (dateYear === year && dateMonth < month - 1);\n}\n\nfunction isNextMonth(date: Date) {\n  const { year, month } = props;\n  const dateYear = date.getFullYear();\n  const dateMonth = date.getMonth();\n\n  return dateYear > year || (dateYear === year && dateMonth > month - 1);\n}\n\nfunction isToday(date: Date) {\n  return differenceDays(date, props.today) === 0;\n}\n\nfunction handleSelect(date: Date) {\n  if (isDisabled(date)) {\n    return;\n  }\n\n  if (props.valueType === \"start\") {\n    startValue.value = date;\n  } else {\n    endValue.value = date;\n  }\n\n  emitEvent(props.onSelect, date);\n  emit(\"update:value\", date);\n}\n\nfunction handleHover(date: Date) {\n  hoveredDate.value = isDisabled(date) ? null : date;\n}\n\nfunction isInRange(date: Date) {\n  if (!hoveredDate.value && !startValue.value && !endValue.value) {\n    return false;\n  }\n\n  let min: number;\n  let max: number;\n\n  if (startValue.value && endValue.value) {\n    const startTime = startValue.value.getTime();\n    const endTime = endValue.value.getTime();\n\n    min = Math.min(startTime, endTime);\n    max = Math.max(startTime, endTime);\n  } else if (hoveredDate.value) {\n    if (!startValue.value && !endValue.value) return false;\n\n    const hoveredTime = hoveredDate.value.getTime();\n\n    if (!startValue.value || !endValue.value) {\n      const selectedTime = (startValue.value ?? endValue.value)!.getTime();\n\n      min = Math.min(hoveredTime, selectedTime);\n      max = Math.max(hoveredTime, selectedTime);\n    } else {\n      const startTime = startValue.value.getTime();\n      const endTime = endValue.value.getTime();\n      const minTime = Math.min(startTime, endTime);\n      const maxTime = Math.max(startTime, endTime);\n\n      min = Math.min(hoveredTime, minTime);\n      max = Math.max(hoveredTime, maxTime);\n    }\n  } else {\n    return false;\n  }\n\n  return date.getTime() >= min && date.getTime() <= max;\n}\n</script>\n\n<template>\n  <div\n    :class=\"[\n      nh.be('panel'),\n      nh.bs('vars'),\n      props.inherit && nh.bem('panel', 'inherit'),\n    ]\"\n    role=\"grid\"\n  >\n    <slot name=\"header\"></slot>\n    <div :class=\"[nh.be('row'), nh.bem('row', 'week')]\" aria-hidden=\"true\">\n      <div\n        v-for=\"week in 7\"\n        :key=\"week\"\n        :class=\"[nh.be('cell'), nh.be('cell-week')]\"\n      >\n        <slot\n          name=\"week\"\n          :label=\"getWeekLabel((week - 1 + props.weekStart) % 7)\"\n          :index=\"week - 1\"\n          :week=\"(week - 1 + props.weekStart) % 7\"\n        >\n          <div :class=\"nh.be('index')\">\n            {{ getWeekLabel((week - 1 + props.weekStart) % 7) }}\n          </div>\n        </slot>\n      </div>\n    </div>\n    <div ref=\"body\" :class=\"nh.be('body')\">\n      <div v-for=\"row in 6\" :key=\"row\" :class=\"nh.be('row')\">\n        <CalendarCell\n          v-for=\"cell in 7\"\n          :key=\"(row - 1) * 7 + cell\"\n          :date=\"dateRange[(row - 1) * 7 + cell - 1]\"\n          :locale=\"locale\"\n          :selected=\"isSelected(dateRange[(row - 1) * 7 + cell - 1])\"\n          :hovered=\"isHovered(dateRange[(row - 1) * 7 + cell - 1])\"\n          :is-prev=\"isPrevMonth(dateRange[(row - 1) * 7 + cell - 1])\"\n          :is-next=\"isNextMonth(dateRange[(row - 1) * 7 + cell - 1])\"\n          :is-today=\"isToday(dateRange[(row - 1) * 7 + cell - 1])\"\n          :disabled=\"isDisabled(dateRange[(row - 1) * 7 + cell - 1])\"\n          :in-range=\"\n            props.range && isInRange(dateRange[(row - 1) * 7 + cell - 1])\n          \"\n          @hover=\"handleHover\"\n          @select=\"handleSelect\"\n        >\n          <template\n            v-if=\"$slots.item\"\n            #default=\"{\n              date,\n              label,\n              selected,\n              hovered,\n              isPrev,\n              isNext,\n              isToday: matchedToday,\n              disabled,\n              inRange,\n            }\"\n          >\n            <slot\n              name=\"item\"\n              :date=\"date\"\n              :label=\"label\"\n              :selected=\"selected\"\n              :hovered=\"hovered\"\n              :is-prev=\"isPrev\"\n              :is-next=\"isNext\"\n              :is-today=\"matchedToday\"\n              :disabled=\"disabled\"\n              :in-range=\"inRange\"\n            ></slot>\n          </template>\n        </CalendarCell>\n      </div>\n    </div>\n    <slot name=\"footer\"></slot>\n  </div>\n</template>\n"
    },
    {
      "target": "components/calendar/calendar.vue",
      "content": "<script setup lang=\"ts\">\nimport { Column } from \"@/components/column\";\nimport { NumberInput } from \"@/components/number-input\";\nimport { Row } from \"@/components/row\";\n\nimport { ref, toRef, watch } from \"vue\";\n\nimport { emitEvent, useLocale, useNameHelper, useProps } from \"@pocui/config\";\n\nimport CalendarPanel from \"./calendar-panel.vue\";\nimport { calendarProps } from \"./props\";\n\ndefineOptions({\n  name: \"Calendar\",\n  description:\n    \"将数据按照日历的形式展示的容器，一般用于数据按日期划分的场合，例如日程表、课表等等。\",\n  categories: [\"display\"],\n});\n\nconst _props = defineProps(calendarProps);\nconst props = useProps(\"calendar\", _props, {\n  locale: null,\n  value: {\n    default: null,\n    static: true,\n  },\n  year: () => new Date().getFullYear(),\n  month: {\n    default: () => new Date().getMonth() + 1,\n    validator: (value) => value > 0 && value <= 12,\n  },\n  weekDays: {\n    default: null,\n    validator: (value) => !value || value.length === 0 || value.length === 7,\n  },\n  weekStart: {\n    default: 0,\n    validator: (value) => value >= 0 && value < 7,\n  },\n  today: {\n    default: () => new Date(),\n    validator: (value) => !Number.isNaN(+new Date(value)),\n  },\n  disabledDate: {\n    default: () => false,\n    isFunc: true,\n  },\n});\n\nconst emit = defineEmits([\"update:value\", \"update:year\", \"update:month\"]);\n\ndefineSlots<{\n  header(): any;\n  title(): any;\n  week(props: { label: string; index: number; week: number }): any;\n  content(props: {\n    date: Date;\n    selected: boolean;\n    hovered: boolean;\n    isPrev: boolean;\n    isNext: boolean;\n    isToday: boolean;\n    disabled: boolean;\n  }): any;\n}>();\n\nconst nh = useNameHelper(\"calendar\");\nconst locale = useLocale(\"calendar\", toRef(props, \"locale\"));\n\nconst calendarValue = ref(props.value);\nconst calendarYear = ref(props.year);\nconst calendarMonth = ref(props.month);\n\nwatch(\n  () => props.value,\n  (value) => {\n    calendarValue.value = value;\n  },\n);\nwatch(\n  () => props.year,\n  (value) => {\n    calendarYear.value = value;\n  },\n);\nwatch(\n  () => props.month,\n  (value) => {\n    calendarMonth.value = value;\n  },\n);\n\ndefineExpose({\n  calendarValue,\n  calendarYear,\n  calendarMonth,\n});\n\nfunction formatYearInput(value: number) {\n  return `${value}${locale.value.year}`;\n}\n\nfunction formatMonthInput(value: number) {\n  return `${value}${locale.value.month}`;\n}\n\nfunction isDisabled(date: Date) {\n  if (typeof props.disabledDate !== \"function\") {\n    return true;\n  }\n\n  return props.disabledDate(date);\n}\n\nfunction handleClick(date: Date) {\n  if (!isDisabled(date)) {\n    calendarValue.value = date;\n  }\n\n  emitEvent(props.onSelect, date);\n  emit(\"update:value\", date);\n}\n\nfunction handleYearChange(value: number) {\n  calendarYear.value = value;\n\n  emitEvent(props.onYearChange, value, calendarMonth.value);\n  emit(\"update:year\", value);\n}\n\nfunction handleMonthChange(value: number) {\n  calendarMonth.value = value;\n\n  emitEvent(props.onMonthChange, calendarYear.value, value);\n  emit(\"update:month\", value);\n}\n</script>\n\n<template>\n  <CalendarPanel\n    v-model:value=\"calendarValue\"\n    :inherit=\"props.inherit\"\n    :class=\"[nh.b()]\"\n    :year=\"calendarYear\"\n    :month=\"calendarMonth\"\n    :week-start=\"props.weekStart\"\n    :today=\"props.today\"\n    :disabled-date=\"props.disabledDate\"\n  >\n    <template #header>\n      <slot name=\"header\">\n        <Row inherit :class=\"nh.be('header')\" align=\"middle\">\n          <Column flex=\"auto\">\n            <slot name=\"title\"></slot>\n          </Column>\n          <Column :class=\"nh.be('actions')\" flex=\"0\">\n            <NumberInput\n              :value=\"calendarYear\"\n              inherit\n              :class=\"nh.be('year-input')\"\n              :min=\"1970\"\n              :max=\"2300\"\n              :formatter=\"formatYearInput\"\n              @change=\"handleYearChange\"\n            ></NumberInput>\n            <NumberInput\n              :value=\"calendarMonth\"\n              inherit\n              :class=\"nh.be('month-input')\"\n              :min=\"1\"\n              :max=\"12\"\n              :formatter=\"formatMonthInput\"\n              @change=\"handleMonthChange\"\n            ></NumberInput>\n          </Column>\n        </Row>\n      </slot>\n    </template>\n    <template #week=\"{ label, index, week }\">\n      <div :class=\"nh.be('week')\">\n        <slot name=\"week\" :label=\"label\" :index=\"index\" :week=\"week\">\n          <div :class=\"nh.be('week-value')\">\n            {{ label }}\n          </div>\n        </slot>\n      </div>\n    </template>\n    <template\n      #item=\"{\n        date,\n        label,\n        selected,\n        hovered,\n        isPrev,\n        isNext,\n        isToday,\n        disabled,\n      }\"\n    >\n      <div\n        :class=\"{\n          [nh.be('date')]: true,\n          [nh.bem('date', 'selected')]: selected,\n          [nh.bem('date', 'prev')]: isPrev,\n          [nh.bem('date', 'next')]: isNext,\n          [nh.bem('date', 'today')]: isToday,\n          [nh.bem('date', 'disabled')]: disabled,\n        }\"\n        tabindex=\"0\"\n        @click=\"handleClick(date)\"\n        @keydown.enter.prevent=\"handleClick(date)\"\n        @keydown.space.prevent=\"handleClick(date)\"\n      >\n        <div :class=\"nh.be('date-header')\">\n          <div :class=\"nh.be('date-value')\" :aria-label=\"label\">\n            {{ date.getDate() }}\n          </div>\n        </div>\n        <div :class=\"nh.be('date-content')\">\n          <slot\n            name=\"content\"\n            :selected=\"selected\"\n            :hovered=\"hovered\"\n            :date=\"date\"\n            :is-prev=\"isPrev\"\n            :is-next=\"isNext\"\n            :is-today=\"isToday\"\n            :disabled=\"disabled\"\n          ></slot>\n        </div>\n      </div>\n    </template>\n  </CalendarPanel>\n</template>\n"
    },
    {
      "target": "components/calendar/index.ts",
      "content": "import Calendar from './calendar.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Calendar }\nexport { calendarProps } from './props'\n\nexport type CalendarExposed = ComponentPublicInstance & InstanceType<typeof Calendar>\n\nexport type { CalendarProps, CalendarCProps } from './props'\nexport type { WeekIndex, MonthIndex } from './symbol'\n"
    },
    {
      "target": "components/calendar/props.ts",
      "content": "import { booleanProp, buildProps, eventProp, localeProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\nimport type { Dateable } from '@pocui/utils'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nexport const calendarProps = buildProps({\n  locale: localeProp('calendar'),\n  value: [Number, String, Date] as PropType<Dateable | Dateable[]>,\n  year: Number,\n  /**\n   * 当前日历显示的月份 (1 ~ 12)\n   */\n  month: Number,\n  /**\n   * 头部星期显示的内容，数量须为 7 个\n   */\n  weekDays: Array as PropType<string[]>,\n  weekStart: Number,\n  today: [Number, String, Date] as PropType<Dateable>,\n  disabledDate: Function as PropType<(data: Date) => boolean>,\n  onSelect: eventProp<(date: Date) => void>(),\n  onYearChange: eventProp<(year: number, month: number) => void>(),\n  onMonthChange: eventProp<(year: number, month: number) => void>()\n})\n\nexport type CalendarProps = ExtractPropTypes<typeof calendarProps>\nexport type CalendarCProps = ConfigurableProps<CalendarProps>\n\nexport const calendarPanelProps = buildProps({\n  locale: localeProp('calendar'),\n  /**\n   * 选中的日期\n   */\n  value: [Number, String, Date, Array] as PropType<Dateable | Dateable[]>,\n  /**\n   * 当前日历显示的年份\n   */\n  year: Number,\n  /**\n   * 当前日历显示的月份 (1 ~ 12)\n   */\n  month: Number,\n  /**\n   * 头部星期显示的内容，数量须为 7 个\n   */\n  weekDays: Array as PropType<string[]>,\n  weekStart: Number,\n  today: [Number, String, Date] as PropType<Dateable>,\n  disabledDate: Function as PropType<(data: Date) => boolean>,\n  valueType: String as PropType<'start' | 'end'>,\n  min: [Number, String, Date] as PropType<Dateable>,\n  max: [Number, String, Date] as PropType<Dateable>,\n  range: booleanProp,\n  onSelect: eventProp<(date: Date) => void>(),\n  onHover: eventProp<(date: Date | null) => void>()\n})\n\nexport type CalendarPanelProps = ExtractPropTypes<typeof calendarPanelProps>\nexport type CalendarPanelCProps = ConfigurableProps<CalendarPanelProps>\n"
    },
    {
      "target": "components/calendar/symbol.ts",
      "content": "export type WeekIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7\nexport type MonthIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/hooks", "@pocui/utils"],
  "registryDependencies": ["calendar.scss", "column", "number-input", "row"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
