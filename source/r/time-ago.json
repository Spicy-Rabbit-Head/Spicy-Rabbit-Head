{
  "name": "time-ago",
  "type": "registry:component",
  "description": "相对时间组件，用于显示相对于当前时间的时间段。",
  "files": [
    {
      "target": "components/time-ago/helper.ts",
      "content": "import { getCountWord, makeSentence } from '@pocui/config'\nimport {\n  DAY_ON_MILLISECONDS,\n  HOUR_ON_MILLISECONDS,\n  MINUTE_ON_MILLISECONDS,\n  SECOND_ON_MILLISECONDS\n} from '@pocui/utils'\n\nimport type { Ref } from 'vue'\n\nexport interface TimeAgoRecord {\n  datetime: Date,\n\n  timeAgo: Ref<string>,\n\n  locale: Ref<Record<string, string>>,\n\n  wordSpace: Ref<boolean>,\n\n  interval: false | number,\n\n  updated: number\n}\n\nlet id = 1\n\nexport function getId() {\n  return id++\n}\n\nconst recordMap = new Map<number, TimeAgoRecord>()\n\nlet timer: ReturnType<typeof setInterval>\nlet isRunning: boolean\n\nexport function subscribe(id: number, record: TimeAgoRecord) {\n  recordMap.set(id, record)\n\n  if (recordMap.size && !isRunning) {\n    clearInterval(timer)\n\n    timer = setInterval(() => {\n      isRunning = true\n\n      const current = Date.now()\n\n      recordMap.forEach(record => {\n        if (!record.interval) return\n\n        if (current - record.updated > record.interval) {\n          record.timeAgo.value = computeTimeAgo(record.datetime, current, record.locale.value, record.wordSpace.value)\n          record.updated = current\n        }\n      })\n    }, 5000)\n  }\n}\n\nexport function unsubscribe(id: number) {\n  recordMap.delete(id)\n\n  if (!recordMap.size) {\n    clearInterval(timer)\n    isRunning = false\n  }\n}\n\nexport function computeTimeAgo(date: Date, current: number, locale: Record<string, string>, wordSpace: boolean) {\n  const diff = Math.abs(current - date.getTime())\n  const type = current > date.getTime() ? locale.ago : locale.late\n\n  let label: string\n  let usedDiff: number\n  let noFormat = false\n\n  if (diff < 10 * SECOND_ON_MILLISECONDS) {\n    label = locale.justNow\n    noFormat = true\n  } else if (diff < MINUTE_ON_MILLISECONDS) {\n    label = locale.second\n    usedDiff = Math.floor(diff / SECOND_ON_MILLISECONDS)\n  } else if (diff < HOUR_ON_MILLISECONDS) {\n    label = locale.minute\n    usedDiff = Math.floor(diff / MINUTE_ON_MILLISECONDS)\n  } else if (diff < DAY_ON_MILLISECONDS) {\n    label = locale.hour\n    usedDiff = Math.floor(diff / HOUR_ON_MILLISECONDS)\n  } else if (diff < 30 * DAY_ON_MILLISECONDS) {\n    usedDiff = Math.floor(diff / DAY_ON_MILLISECONDS)\n\n    if (usedDiff === 1) {\n      label = locale.yesterday\n      noFormat = true\n    } else {\n      label = locale.days\n    }\n  } else if (diff < 365 * DAY_ON_MILLISECONDS) {\n    usedDiff = Math.floor(diff / (30 * DAY_ON_MILLISECONDS))\n\n    if (usedDiff === 1) {\n      label = locale.lastMonth\n      noFormat = true\n    } else {\n      label = locale.months\n    }\n  } else {\n    usedDiff = Math.floor(diff / 365 / DAY_ON_MILLISECONDS)\n\n    if (usedDiff === 1) {\n      label = locale.lastYear\n      noFormat = true\n    } else {\n      label = locale.years\n    }\n  }\n\n  if (noFormat) {\n    return label\n  }\n\n  return makeSentence(`${getCountWord(label, usedDiff!)} ${type}`, wordSpace)\n}\n"
    },
    {
      "target": "components/time-ago/index.ts",
      "content": "import TimeAgo from './time-ago.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { TimeAgo }\nexport { timeAgoProps } from './props'\n\nexport type TimeAgoExposed = ComponentPublicInstance & InstanceType<typeof TimeAgo>\n\nexport type { TimeAgoProps, TimeAgoCProps } from './props'\n"
    },
    {
      "target": "components/time-ago/props.ts",
      "content": "import { booleanNumberProp, booleanStringProp, buildProps, localeProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\nimport type { Dateable } from '@pocui/utils'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nexport const timeAgoProps = buildProps({\n  locale: localeProp('timeAgo'),\n  datetime: [String, Number, Date] as PropType<Dateable>,\n  interval: booleanNumberProp,\n  title: booleanStringProp,\n  titleFormat: String\n})\n\nexport type TimeAgoProps = ExtractPropTypes<typeof timeAgoProps>\nexport type TimeAgoCProps = ConfigurableProps<TimeAgoProps, 'datetime'>\n"
    },
    {
      "target": "components/time-ago/time-ago.vue",
      "content": "<script setup lang=\"ts\">\n\nimport { computed, onBeforeUnmount, ref, toRef, watch } from 'vue'\n\nimport { format, toDate } from '@pocui/utils'\nimport { useLocale, useNameHelper, useProps, useWordSpace } from '@pocui/config'\nimport { computeTimeAgo, getId, subscribe, unsubscribe } from './helper'\nimport { timeAgoProps } from './props'\n\nimport type { Dateable } from '@pocui/utils'\n\ndefineOptions({ name: 'TimeAgo' ,\n  description:'相对时间组件，用于显示相对于当前时间的时间段。',\n  categories: ['display']})\n\nconst _props = defineProps(timeAgoProps)\nconst props = useProps('timeAgo', _props, {\n  locale: null,\n  datetime: {\n    default: () => Date.now(),\n    static: true\n  },\n  interval: {\n    default: false,\n    validator: value => typeof value === 'boolean' || value >= 1\n  },\n  title: false,\n  titleFormat: 'yyyy-MM-dd HH:mm:ss'\n})\n\nconst nh = useNameHelper('time-ago')\nconst datetime = toDateValue(props.datetime)\nconst locale = useLocale('timeAgo', toRef(props, 'locale'))\nconst wordSpace = useWordSpace()\nconst timeAgo = ref(computeTimeAgo(datetime, Date.now(), locale.value, wordSpace.value))\n\nconst id = getId()\nconst record = {\n  datetime,\n  timeAgo,\n  locale,\n  wordSpace,\n  interval: parseInterval(props.interval),\n  updated: Date.now()\n}\n\nconst currentTitle = computed(() => {\n  if (!props.title) return undefined\n\n  if (typeof props.title === 'string') return props.title\n\n  return format(props.datetime, props.titleFormat)\n})\n\nsubscribe(id, record)\n\nwatch(\n  () => props.datetime,\n  value => {\n    record.datetime = toDateValue(value)\n    timeAgo.value = computeTimeAgo(datetime, Date.now(), locale.value, wordSpace.value)\n  }\n)\nwatch(\n  () => props.interval,\n  value => {\n    record.interval = parseInterval(value)\n  }\n)\n\nonBeforeUnmount(() => {\n  unsubscribe(id)\n})\n\nfunction parseInterval(interval: boolean | number) {\n  return interval && (interval === true ? 1e4 : interval * 1000)\n}\n\nfunction toDateValue(value: Dateable) {\n  if (typeof value === 'string') {\n    value = value.replace(/-/g, '/')\n  }\n\n  return toDate(value)\n}\n\ndefineExpose({ timeAgo })\n</script>\n\n<template>\n  <span :class=\"[nh.b(), props.inherit && nh.inc()]\" :title=\"currentTitle\">\n    {{ timeAgo }}\n  </span>\n</template>\n"
    }
  ],
  "dependencies": ["@pocui/config", "vue", "@pocui/utils"],
  "registryDependencies": ["time-ago.scss"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
