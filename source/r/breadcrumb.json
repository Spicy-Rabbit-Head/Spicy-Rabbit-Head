{
  "name": "breadcrumb",
  "type": "registry:component",
  "description": "显示当前页面在系统层级结构中的位置，并能向上返回。",
  "files": [
    {
      "target": "components/breadcrumb/breadcrumb-item.vue",
      "content": "<script setup lang=\"ts\">\nimport { Renderer } from '@/components/renderer'\n\nimport { inject, onBeforeUnmount, reactive, ref, watch } from 'vue'\n\nimport { emitEvent, useNameHelper } from '@pocui/config'\nimport { isFunction } from '@pocui/utils'\n\nimport { breadcrumbItemProps } from './props'\n\nimport { BREADCRUMB_STATE } from './symbol'\n\nimport type { BreadcrumbItemState, SelectEvent, SeparatorRenderFn } from './symbol'\n\ndefineOptions({\n  name: 'BreadcrumbItem',\n  description: 'Breadcrumb 的子组件，表示面包屑中的每一项。',\n  categories: ['navigation']\n})\n\nconst props = defineProps(breadcrumbItemProps)\n\ndefineSlots<{\n  default(): any,\n  separator(): any\n}>()\n\nconst nh = useNameHelper('breadcrumb')\n\nconst breadcrumbState = inject(BREADCRUMB_STATE, null)\n\nconst currentLabel = ref(props.label)\nconst separator = ref('/')\nconst separatorRenderer = ref<SeparatorRenderFn | null>(null)\n\nwatch(\n  () => props.label,\n  value => {\n    currentLabel.value = value\n    breadcrumbState?.refreshLabels()\n  }\n)\n\nif (breadcrumbState) {\n  const state: BreadcrumbItemState = reactive({\n    label: currentLabel\n  })\n\n  watch(\n    () => breadcrumbState.separator,\n    value => {\n      separator.value = value\n    },\n    { immediate: true }\n  )\n  watch(\n    () => breadcrumbState.separatorRenderer,\n    value => {\n      separatorRenderer.value = value\n    },\n    { immediate: true }\n  )\n\n  breadcrumbState.increaseItem(state)\n\n  onBeforeUnmount(() => {\n    breadcrumbState.decreaseItem(state)\n  })\n}\n\nfunction handleClick() {\n  emitEvent(props.onSelect! as SelectEvent, currentLabel.value)\n  breadcrumbState?.handleSelect(currentLabel.value)\n}\n\nfunction handleSeparatorClick() {\n  emitEvent(props.onSeparatorClick! as SelectEvent, currentLabel.value)\n  breadcrumbState?.handleSeparatorClick(currentLabel.value)\n}\n</script>\n\n<template>\n  <li :class=\"nh.be('item')\">\n    <a\n      :class=\"nh.be('label')\"\n      tabindex=\"0\"\n      @click=\"handleClick\"\n      @keydown.enter=\"handleClick\"\n    >\n      <slot>{{ props.label }}</slot>\n    </a>\n    <span :class=\"nh.be('separator')\" role=\"separator\" @click=\"handleSeparatorClick\">\n      <slot name=\"separator\">\n        <Renderer\n          v-if=\"isFunction(separatorRenderer)\"\n          :renderer=\"separatorRenderer\"\n          :data=\"{ label: currentLabel }\"\n        ></Renderer>\n        <template v-else>\n          {{ separator }}\n        </template>\n      </slot>\n    </span>\n  </li>\n</template>\n"
    },
    {
      "target": "components/breadcrumb/breadcrumb.vue",
      "content": "<script setup lang=\"ts\">\nimport { BreadcrumbItem } from '@/components/breadcrumb-item'\n\nimport { computed, provide, reactive, toRef, watch } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { callIfFunc, debounceMinor, isNullish } from '@pocui/utils'\n\nimport { breadcrumbProps } from './props'\n\nimport { BREADCRUMB_STATE } from './symbol'\n\nimport type { BreadcrumbItemState, BreadcrumbOptions, BreadcrumbState, SelectEvent } from './symbol'\n\ndefineOptions({\n  name: 'Breadcrumb',\n  description: '显示当前页面在系统层级结构中的位置，并能向上返回。',\n  categories: ['navigation']\n})\n\nconst _props = defineProps(breadcrumbProps)\nconst props = useProps('breadcrumb', _props, {\n  separator: '/',\n  border: false,\n  options: {\n    default: () => [],\n    static: true\n  },\n  router: null\n})\n\nconst slots = defineSlots<{\n  default: () => any,\n  item(props: { option: BreadcrumbOptions, index: number }): any,\n  separator(props: { label: string | number }): any\n}>()\n\nconst nh = useNameHelper('breadcrumb')\nconst itemStates = new Set<BreadcrumbItemState>()\n\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.bs('vars')]: true,\n    [nh.in()]: props.inherit,\n    [nh.bm('border')]: props.border\n  }\n})\nconst normalizedOptions = computed(() => {\n  if (props.router && !props.options?.length) {\n    const matched = props.router.currentRoute.value.matched\n    const options: BreadcrumbOptions[] = []\n\n    for (const route of matched) {\n      const meta = (route.meta || {}) as any\n\n      if (meta.menu === false) {\n        continue\n      }\n\n      options.push({\n        label: meta.label || route.path,\n        name: meta.name || route.name\n      })\n    }\n\n    return options\n  }\n\n  return props.options.map(option => {\n    if (typeof option === 'string') {\n      return { label: option }\n    }\n\n    return option\n  })\n})\n\nconst refreshLabels = debounceMinor(() => {\n  Array.from(itemStates).forEach((item, index) => {\n    if (isNullish(item.label)) {\n      item.label = index + 1\n    }\n  })\n})\n\nconst state: BreadcrumbState = reactive({\n  separator: toRef(props, 'separator'),\n  separatorRenderer: null,\n  increaseItem,\n  decreaseItem,\n  handleSelect,\n  refreshLabels,\n  handleSeparatorClick\n})\n\nprovide(BREADCRUMB_STATE, state)\n\nwatch(\n  () => slots.separator,\n  value => {\n    state.separatorRenderer = value ? data => value(data) : null\n  },\n  { immediate: true }\n)\n\nfunction increaseItem(item: BreadcrumbItemState) {\n  itemStates.add(item)\n  refreshLabels()\n}\n\nfunction decreaseItem(item: BreadcrumbItemState) {\n  itemStates.delete(item)\n  refreshLabels()\n}\n\nfunction handleSelect(label: string | number) {\n  emitEvent(props.onSelect as SelectEvent, label)\n}\n\nfunction handleSeparatorClick(label: string | number) {\n  emitEvent(props.onSeparatorClick as SelectEvent, label)\n}\n</script>\n\n<template>\n  <ol :class=\"className\">\n    <slot>\n      <BreadcrumbItem v-for=\"(option, index) in normalizedOptions\" :key=\"option.label\" :label=\"option.label\">\n        <slot name=\"item\" :option=\"option\" :index=\"index\">\n          {{ option.name ? callIfFunc(option.name) : option.label }}\n        </slot>\n      </BreadcrumbItem>\n    </slot>\n  </ol>\n</template>\n"
    },
    {
      "target": "components/breadcrumb/index.ts",
      "content": "import Breadcrumb from './breadcrumb.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Breadcrumb }\nexport { breadcrumbProps } from './props'\n\nexport type BreadcrumbExposed = ComponentPublicInstance & InstanceType<typeof Breadcrumb>\n\nexport type { BreadcrumbProps, BreadcrumbCProps } from './props'\n"
    },
    {
      "target": "components/breadcrumb/props.ts",
      "content": "import { Router } from 'vue-router'\n\nimport { booleanProp, buildProps, eventProp, wrapProps } from '@pocui/config'\n\nimport { BreadcrumbOptions, SelectEvent } from './symbol'\n\nimport type { ConfigurableProps, EventListener } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nexport const breadcrumbProps = buildProps({\n  separator: String,\n  border: booleanProp,\n  options: Array as PropType<(string | BreadcrumbOptions)[]>,\n  router: Object as PropType<Router>,\n  onSelect: eventProp<EventListener<SelectEvent>>(),\n  onSeparatorClick: eventProp<EventListener<SelectEvent>>()\n})\n\nexport type BreadcrumbProps = ExtractPropTypes<typeof breadcrumbProps>\nexport type BreadcrumbCProps = ConfigurableProps<ExtractPropTypes<typeof breadcrumbProps>>\n\nexport const breadcrumbItemProps = wrapProps({\n  label: {\n    type: [String, Number],\n    default: null\n  },\n  onSelect: eventProp<EventListener<SelectEvent>>(),\n  onSeparatorClick: eventProp<EventListener<SelectEvent>>()\n})\n\nexport type BreadcrumbItemProps = ExtractPropTypes<typeof breadcrumbItemProps>\n"
    },
    {
      "target": "components/breadcrumb/symbol.ts",
      "content": "import type { InjectionKey } from 'vue'\n\nexport interface BreadcrumbOptions {\n  label: string,\n\n  name?: string | (() => string)\n}\n\nexport type SeparatorRenderFn = (data: { label: string | number }) => any\n\nexport interface BreadcrumbItemState {\n  label: string | number\n}\n\nexport interface BreadcrumbState {\n  separator: string,\n\n  separatorRenderer: null | SeparatorRenderFn,\n\n  increaseItem: (item: BreadcrumbItemState) => void,\n\n  decreaseItem: (item: BreadcrumbItemState) => void,\n\n  handleSelect: (label: string | number) => void,\n\n  refreshLabels: () => void,\n\n  handleSeparatorClick: (label: string | number) => void\n}\n\nexport type SelectEvent = (label: string | number) => void\n\nexport const BREADCRUMB_STATE: InjectionKey<BreadcrumbState> = Symbol('BREADCRUMB_STATE')\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils", "vue-router"],
  "registryDependencies": ["renderer", "breadcrumb.scss", "breadcrumb-item"],
  "categories": ["navigation"],
  "meta": { "isReferenceOnly": false }
}
