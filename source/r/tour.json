{
  "name": "tour",
  "type": "registry:components",
  "description": "常用于引导用户了解如何使用某些功能。",
  "files": [
    {
      "target": "components/tour/index.ts",
      "content": "import Tour from './tour.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Tour }\nexport { tourProps } from './props'\n\nexport type TourExposed = ComponentPublicInstance & InstanceType<typeof Tour>\n\nexport type { TourProps, TourCProps } from './props'\nexport type {\n  TourType,\n  TourSignType,\n  TourVirtual,\n  TourTarget,\n  TourPayload,\n  TourStepOptions,\n  TourStepRenderFn,\n  TourSlotParams\n} from './symbol'\n"
    },
    {
      "target": "components/tour/props.ts",
      "content": "import { booleanProp, booleanStringProp, buildProps, eventProp, localeProp } from '@pocui/config'\nimport { Placement } from '@pocui/hooks'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { TourSignType, TourStepOptions, TourStepRenderFn, TourType } from './symbol'\n\nexport const tourProps = buildProps({\n  locale: localeProp('tour'),\n  active: booleanProp,\n  index: Number,\n  steps: Array as PropType<TourStepOptions[]>,\n  type: String as PropType<TourType>,\n  hideMask: booleanProp,\n  signType: String as PropType<TourSignType>,\n  padding: [Number, Array] as PropType<number | number[]>,\n  closable: booleanProp,\n  permeable: booleanProp,\n  transfer: booleanStringProp,\n  onToggle: eventProp<(active: boolean) => void>(),\n  onChange: eventProp<(index: number, step: TourStepOptions) => void>(),\n  onClose: eventProp(),\n  onMaskClick: eventProp<(event: MouseEvent) => void>()\n})\n\nexport type TourProps = ExtractPropTypes<typeof tourProps>\nexport type TourCProps = ConfigurableProps<ExtractPropTypes<typeof tourProps>>\n\nexport const tourStepProps = buildProps({\n  target: [String, Object, Function] as PropType<string | object | (() => any)>,\n  placement: String as PropType<Placement>,\n  title: String,\n  content: String,\n  order: Number,\n  type: String as PropType<TourType>,\n  renderer: Function as PropType<TourStepRenderFn>,\n  onPrev: eventProp(),\n  onNext: eventProp()\n})\n\nexport type TourStepProps = ExtractPropTypes<typeof tourStepProps>\nexport type TourStepCProps = ConfigurableProps<ExtractPropTypes<typeof tourStepProps>>\n"
    },
    {
      "target": "components/tour/symbol.ts",
      "content": "import type { BubbleType } from '@/components/bubble'\nimport type { MaybeElement, MaybeInstance, Placement } from '@pocui/hooks'\nimport type { InjectionKey, MaybeRef } from 'vue'\n\nexport type TourType = BubbleType\nexport type TourSignType = 'dot' | 'bar' | 'count'\n\nexport interface TourVirtual {\n  getBoundingClientRect(): { top: number, left: number, width: number, height: number }\n}\n\nexport type TourTarget = MaybeRef<string | MaybeInstance | TourVirtual> | (() => string | MaybeElement | TourVirtual)\n\nexport interface TourPayload {\n  start(): void,\n\n  prev(): void,\n\n  next(autoClose?: boolean): void,\n\n  close(): void\n}\n\nexport type TourStepRenderFn = (payload: TourPayload) => any\n\nexport interface TourStepOptions {\n  target?: TourTarget,\n\n  placement?: Placement,\n\n  title?: string,\n\n  content?: string,\n\n  order?: number,\n\n  type?: TourType,\n\n  renderer?: TourStepRenderFn\n}\n\nexport type TourSlotParams = TourPayload & { step: TourStepOptions, index: number }\nexport type TourCommonSLot = (props: TourSlotParams) => any\n\nexport interface TourState {\n  increaseStep(step: TourStepOptions): void,\n\n  decreaseStep(step: TourStepOptions): void\n}\n\nexport const TOUR_STATE = Symbol('TOUR_STATE') as InjectionKey<TourState>\n"
    },
    {
      "target": "components/tour/tour-step.ts",
      "content": "import { SlotsType, defineComponent, inject, onBeforeUnmount, reactive, renderSlot, watch } from 'vue'\n\nimport { useProps } from '@pocui/config'\nimport { tourStepProps } from './props'\n\nimport { TOUR_STATE } from './symbol'\n\nimport type { TourPayload, TourStepOptions } from './symbol'\n\ntype StepPropKey = keyof typeof tourStepProps\n\nconst propKeys = Object.keys(tourStepProps) as StepPropKey[]\nconst deepProps: StepPropKey[] = []\nconst ignoredProps: StepPropKey[] = ['renderer']\n\nconst funcProp = {\n  default: null,\n  isFunc: true,\n  static: true\n}\n\nexport default defineComponent({\n  name: 'TourStep',\n  description:'漫游步骤组件，作为漫游引导的单个步骤项。',\n  categories: ['other'],\n  props: tourStepProps,\n  slots: Object as SlotsType<{\n    default(props: TourPayload): any\n  }>,\n  setup(_props, { slots }) {\n    const props = useProps('tableColumn', _props, {\n      target: {\n        default: null,\n        static: true\n      },\n      placement: 'bottom',\n      title: '',\n      content: '',\n      order: {\n        default: 0,\n        static: true\n      },\n      type: 'default',\n      renderer: funcProp\n    })\n\n    const tourState = inject(TOUR_STATE, null)\n    const options = reactive({}) as TourStepOptions\n\n    for (const key of propKeys) {\n      if (ignoredProps.includes(key)) continue\n\n      watch(\n        () => props[key],\n        value => {\n          ;(options[key as keyof TourStepOptions] as any) = value\n        },\n        {\n          immediate: true,\n          deep: deepProps.includes(key)\n        }\n      )\n    }\n\n    watch(() => props.renderer, setRenderer)\n\n    setRenderer()\n\n    tourState?.increaseStep(options)\n\n    onBeforeUnmount(() => {\n      tourState?.decreaseStep(options)\n    })\n\n    function setRenderer() {\n      if (typeof slots.default === 'function') {\n        options.renderer = (payload: TourPayload) => renderSlot(slots, 'default', payload as any)\n      } else if (typeof props.renderer === 'function') {\n        options.renderer = props.renderer\n      } else {\n        options.renderer = undefined\n      }\n    }\n\n    return () => null\n  }\n})\n"
    },
    {
      "target": "components/tour/tour.vue",
      "content": "<script setup lang=\"ts\">\nimport { Bubble } from '@/components/bubble'\nimport { Button } from '@/components/button'\nimport { Icon } from '@/components/icon'\n\nimport { Masker } from '@/components/masker'\nimport { Renderer } from '@/components/renderer'\n\nimport { computed, provide, reactive, ref, shallowReadonly, toRef, watch } from 'vue'\n\nimport { emitEvent, getStepByWord, useIcons, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { unrefElement, useModifier, usePopper } from '@pocui/hooks'\n\nimport { callIfFunc, decide, getGlobalCount, isClient, isFunction } from '@pocui/utils'\n\nimport { tourProps } from './props'\n\nimport { TOUR_STATE } from './symbol'\n\nimport type { TourCommonSLot, TourStepOptions } from './symbol'\nimport type { MaskerExposed } from '@/components/masker'\nimport type { BubbleExposed } from '@/components/bubble'\n\ndefineOptions({\n  name: 'Tour',\n  description:'常用于引导用户了解如何使用某些功能。',\n  categories: ['other'],\n  inheritAttrs: false\n})\n\nconst _props = defineProps(tourProps)\nconst props = useProps('tour', _props, {\n  locale: null,\n  active: false,\n  index: {\n    static: true,\n    default: 0,\n    validator: value => value >= 0\n  },\n  steps: {\n    static: true,\n    default: () => []\n  },\n  type: 'default',\n  hideMask: false,\n  signType: 'dot',\n  padding: 10,\n  closable: true,\n  permeable: false,\n  transfer: false\n})\n\nconst emit = defineEmits(['update:active', 'update:index'])\n\ndefineSlots<{\n  default(): any,\n  header: TourCommonSLot,\n  title: TourCommonSLot,\n  close: TourCommonSLot,\n  body: TourCommonSLot,\n  footer: TourCommonSLot,\n  sign: TourCommonSLot,\n  actions: TourCommonSLot\n}>()\n\nconst idIndex = `${getGlobalCount()}`\n\nconst nh = useNameHelper('tour')\nconst locale = useLocale('tour', toRef(props, 'locale'))\nconst icons = useIcons()\n\nconst currentActive = ref(props.active)\nconst currentIndex = ref(props.index)\nconst tempSteps: Set<TourStepOptions> = reactive(new Set<any>())\nconst currentRect = ref<number[]>()\nconst sideRects = ref<(number | string)[][]>()\n\nconst masker = ref<MaskerExposed>()\nconst bubble = ref<BubbleExposed>()\nconst wrapper = computed(() => masker.value?.wrapper)\n\nuseModifier({\n  target: wrapper,\n  passive: false,\n  onKeyDown: (event, modifier) => {\n    if (!currentActive.value) return\n\n    decide(\n      [\n        [() => modifier.left || modifier.up, prev],\n        [() => modifier.right || modifier.down, next],\n        [() => modifier.escape, handleClose]\n      ],\n      {\n        beforeMatchAny: () => {\n          event.preventDefault()\n          event.stopPropagation()\n        },\n        afterMatchAny: modifier.resetAll\n      }\n    )\n  }\n})\n\nconst allSteps = computed(() => {\n  return Array.from(tempSteps)\n    .concat(props.steps)\n    .sort((prev, next) => (prev.order || 0) - (next.order || 0))\n})\nconst currentStep = computed(() => allSteps.value[currentIndex.value])\nconst type = computed(() => {\n  const type = currentStep.value?.type || props.type\n\n  return type === 'default' ? undefined : type\n})\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.bs('vars'),\n    {\n      [nh.bm('hide-mask')]: props.hideMask,\n      [nh.bm('permeable')]: props.permeable\n    }\n  ]\n})\nconst padding = computed(() => {\n  if (Array.isArray(props.padding)) {\n    return props.padding.length === 2\n      ? [props.padding[0], props.padding[1], props.padding[0], props.padding[1]]\n      : props.padding\n  } else {\n    return new Array<number>(4).fill(props.padding)\n  }\n})\nconst maskId = computed(() => `${nh.bs(idIndex)}__mask`)\n\nconst { reference, placement, updatePopper } = usePopper({\n  wrapper,\n  placement: computed(() => currentStep.value?.placement || 'bottom'),\n  popper: computed(() => bubble.value?.$el),\n  arrow: computed(() => bubble.value?.arrow),\n  shift: { crossAxis: true },\n  autoUpdate: false\n})\n\nwatch(\n  () => props.active,\n  value => {\n    if (value) {\n      start()\n    } else {\n      currentActive.value = value\n    }\n  }\n)\nwatch(\n  () => props.index,\n  value => {\n    currentIndex.value = Math.max(0, value)\n  }\n)\nwatch(\n  [currentActive, currentStep],\n  () => {\n    sideRects.value = undefined\n\n    if (!isClient || !currentActive.value || !currentStep.value) return\n\n    const target = unrefElement(callIfFunc(currentStep.value.target) as HTMLElement)\n\n    if (!target) {\n      currentRect.value = undefined\n      return\n    }\n\n    const { top, left, width, height } = target.getBoundingClientRect()\n\n    currentRect.value = [\n      left - padding.value[3],\n      top - padding.value[0],\n      width + padding.value[1] + padding.value[3],\n      height + padding.value[0] + padding.value[2]\n    ]\n\n    if (props.permeable) {\n      const [x, y, w, h] = currentRect.value\n\n      sideRects.value = [\n        [0, 0, '100%', y],\n        [x + w, 0, `calc(100% - ${x + w}px)`, '100%'],\n        [0, y + h, '100%', `calc(100% - ${y + h}px)`],\n        [0, 0, x, '100%']\n      ]\n    }\n\n    updatePopper()\n  },\n  {\n    immediate: true,\n    flush: 'post'\n  }\n)\n\nprovide(TOUR_STATE, {\n  increaseStep,\n  decreaseStep\n})\n\ndefineExpose({\n  wrapper,\n  currentActive,\n  currentIndex,\n  currentStep,\n  allSteps,\n  start,\n  prev,\n  next,\n  close\n})\n\nconst actions = {\n  start,\n  prev,\n  next,\n  close\n}\nconst slotParams = shallowReadonly(\n  reactive({\n    ...actions,\n    step: currentStep,\n    index: currentIndex\n  })\n)\n\nfunction increaseStep(step: TourStepOptions) {\n  tempSteps.add(step)\n}\n\nfunction decreaseStep(step: TourStepOptions) {\n  tempSteps.delete(step)\n}\n\nfunction start() {\n  if (currentActive.value) return\n\n  currentActive.value = true\n  emit('update:active', true)\n  emitEvent(props.onToggle, true)\n\n  if (currentIndex.value) {\n    currentIndex.value = 0\n    emit('update:index', 0)\n  }\n}\n\nfunction prev() {\n  if (!currentActive.value || currentIndex.value <= 0) return\n\n  --currentIndex.value\n  emit('update:index', currentIndex.value)\n  emitEvent(props.onChange, currentIndex.value, currentStep.value)\n}\n\nfunction next(autoClose = true) {\n  if (!currentActive.value) return\n\n  if (currentIndex.value >= allSteps.value.length - 1) {\n    if (autoClose) {\n      close()\n    }\n\n    return\n  }\n\n  ++currentIndex.value\n  emit('update:index', currentIndex.value)\n  emitEvent(props.onChange, currentIndex.value, currentStep.value)\n}\n\nfunction close() {\n  if (!currentActive.value) return\n\n  currentActive.value = false\n  emit('update:active', false)\n  emitEvent(props.onToggle, false)\n}\n\nfunction handleClose() {\n  if (!currentActive.value) return\n\n  close()\n  emitEvent(props.onClose)\n}\n</script>\n\n<template>\n  <div v-show=\"false\" role=\"none\" aria-hidden=\"true\">\n    <slot></slot>\n  </div>\n  <Masker\n    v-bind=\"$attrs\"\n    ref=\"masker\"\n    v-model:active=\"currentActive\"\n    :inherit=\"props.inherit\"\n    :class=\"className\"\n    :transfer=\"transfer\"\n    auto-remove\n    transition-name=\"\"\n    :disabled=\"props.hideMask\"\n    @show=\"updatePopper\"\n    @hide=\"currentRect = undefined\"\n    @mask-click=\"emitEvent(props.onMaskClick, $event)\"\n  >\n    <template #default=\"{ show }\">\n      <div\n        v-if=\"currentRect\"\n        ref=\"reference\"\n        :class=\"nh.be('reference')\"\n        role=\"none\"\n        aria-hidden=\"true\"\n        :style=\"{\n          top: `${currentRect[1]}px`,\n          left: `${currentRect[0]}px`,\n          width: `${currentRect[2]}px`,\n          height: `${currentRect[3]}px`\n        }\"\n      ></div>\n      <Transition appear :name=\"nh.ns('fade')\">\n        <Bubble\n          v-if=\"show && currentStep\"\n          ref=\"bubble\"\n          inherit\n          :class=\"[\n            nh.be('bubble'),\n            !currentRect && nh.bem('bubble', 'center'),\n            type && nh.bem('bubble', 'typed'),\n            type && nh.bem('bubble', type)\n          ]\"\n          :content-class=\"nh.be('step')\"\n          :placement=\"placement\"\n          :type=\"currentStep.type || props.type\"\n        >\n          <Renderer v-if=\"isFunction(currentStep.renderer)\" :renderer=\"currentStep.renderer\" :data=\"actions\"></Renderer>\n          <template v-else>\n            <div :class=\"nh.be('header')\">\n              <slot name=\"header\" v-bind=\"slotParams\">\n                <div :class=\"nh.be('title')\">\n                  <slot name=\"title\" v-bind=\"slotParams\">\n                    {{ currentStep.title ?? getStepByWord(locale.stepCount, currentIndex) }}\n                  </slot>\n                </div>\n                <button\n                  v-if=\"props.closable\"\n                  type=\"button\"\n                  :class=\"nh.be('close')\"\n                  @click=\"handleClose\"\n                >\n                  <slot name=\"close\" v-bind=\"slotParams\">\n                    <Icon v-bind=\"icons.close\" :scale=\"+(icons.close.scale || 1) * 1.2\" label=\"close\"></Icon>\n                  </slot>\n                </button>\n              </slot>\n            </div>\n            <div :class=\"nh.be('content')\">\n              <slot name=\"body\" v-bind=\"slotParams\">\n                {{ currentStep.content }}\n              </slot>\n            </div>\n            <div :class=\"nh.be('footer')\">\n              <slot name=\"footer\" v-bind=\"slotParams\">\n                <div :class=\"[nh.be('sign'), nh.bem('sign', props.signType)]\">\n                  <slot name=\"sign\" v-bind=\"slotParams\">\n                    <template v-if=\"props.signType === 'count'\">\n                      <span>{{ currentIndex + 1 }}</span>\n                      <span :class=\"nh.be('count-sep')\">/</span>\n                      <span>{{ allSteps.length }}</span>\n                    </template>\n                    <template v-else>\n                      <span\n                        v-for=\"n in allSteps.length\"\n                        :key=\"n\"\n                        :class=\"[\n                          nh.be(`sign-${props.signType === 'dot' ? 'dot' : 'bar'}`),\n                          n - 1 === currentIndex && nh.bem(`sign-${props.signType === 'dot' ? 'dot' : 'bar'}`, 'active')\n                        ]\"\n                      ></span>\n                    </template>\n                  </slot>\n                </div>\n                <span style=\"flex: auto\" role=\"none\"></span>\n                <slot name=\"actions\" v-bind=\"slotParams\">\n                  <Button\n                    v-if=\"currentIndex > 0\"\n                    inherit\n                    :class=\"[nh.be('action'), nh.bem('action', 'prev')]\"\n                    size=\"small\"\n                    :text=\"!!type\"\n                    @click=\"prev\"\n                  >\n                    {{ locale.prev }}\n                  </Button>\n                  <Button\n                    v-if=\"currentIndex <= allSteps.length - 1\"\n                    inherit\n                    :class=\"[nh.be('action'), nh.bem('action', 'next')]\"\n                    :type=\"type ? 'default' : 'primary'\"\n                    size=\"small\"\n                    @click=\"next()\"\n                  >\n                    {{ currentIndex === allSteps.length - 1 ? locale.done : locale.next }}\n                  </Button>\n                </slot>\n              </slot>\n            </div>\n          </template>\n        </Bubble>\n      </Transition>\n    </template>\n    <template #mask>\n      <svg style=\"width: 100%; height: 100%\">\n        <defs>\n          <mask :id=\"maskId\">\n            <rect\n              x=\"0\"\n              y=\"0\"\n              width=\"100%\"\n              height=\"100%\"\n              fill=\"white\"\n            />\n            <rect\n              v-if=\"currentRect\"\n              :class=\"[nh.be('hollow'), nh.bem('hollow', 'active')]\"\n              :x=\"currentRect[0]\"\n              :y=\"currentRect[1]\"\n              :width=\"currentRect[2]\"\n              :height=\"currentRect[3]\"\n              fill=\"black\"\n            />\n          </mask>\n        </defs>\n        <rect\n          x=\"0\"\n          y=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n          fill=\"rgba(0, 0, 0, 45%)\"\n          :mask=\"`url(#${maskId})`\"\n        />\n        <g v-if=\"sideRects?.length\" fill=\"transparent\" style=\"pointer-events: auto\">\n          <rect\n            v-for=\"(rect, index) in sideRects\"\n            :key=\"index\"\n            :x=\"rect[0]\"\n            :y=\"rect[1]\"\n            :width=\"rect[2]\"\n            :height=\"rect[3]\"\n          />\n        </g>\n      </svg>\n    </template>\n  </Masker>\n</template>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/hooks", "@pocui/utils"],
  "registryDependencies": ["tour.scss", "bubble", "button", "icon", "masker", "renderer"],
  "categories": ["other"],
  "meta": { "isReferenceOnly": false }
}
