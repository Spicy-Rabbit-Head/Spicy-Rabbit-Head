{
  "name": "virtual-list",
  "type": "registry:component",
  "description": "虚拟列表组件，用于高效渲染大量数据列表。",
  "files": [
    {
      "target": "components/virtual-list/index.ts",
      "content": "export { default as VirtualList } from './virtual-list'\nexport { virtualListProps } from './props'\n\nexport type { VirtualListProps, VirtualListCProps } from './props'\nexport type { VirtualListExposed } from './symbol'\n"
    },
    {
      "target": "components/virtual-list/props.ts",
      "content": "import { booleanProp, buildProps, eventProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ScrollPayload } from './symbol'\n\nexport const virtualListProps = buildProps({\n  items: Array as PropType<Array<Record<string, any>>>,\n  itemSize: Number,\n  itemFixed: booleanProp,\n  idKey: String,\n  defaultKeyAt: [Number, String, Symbol],\n  bufferSize: Number,\n  listTag: String,\n  itemsTag: String,\n  hideBar: booleanProp,\n  lockItems: booleanProp,\n  itemsAttrs: Object as PropType<Record<string, any>>,\n  autoplay: booleanProp,\n  ignoreResize: booleanProp,\n  onScroll: eventProp<(payload: ScrollPayload) => void>(),\n  onResize: eventProp<(entry: ResizeObserverEntry) => void>()\n})\n\nexport type VirtualListProps = ExtractPropTypes<typeof virtualListProps>\nexport type VirtualListCProps = ConfigurableProps<VirtualListProps, 'items'>\n"
    },
    {
      "target": "components/virtual-list/symbol.ts",
      "content": "import type { ComponentPublicInstance } from 'vue'\nimport type { NativeScrollExposed } from '@/components/native-scroll'\n\nexport interface VirtualListExposed extends ComponentPublicInstance {\n  scroll?: NativeScrollExposed,\n  wrapper?: HTMLElement,\n  list?: HTMLElement,\n  scrollOffset: number,\n  scrollTo: (top: number, behavior?: ScrollBehavior) => void,\n  scrollBy: (delta: number, behavior?: ScrollBehavior) => void,\n  scrollToKey: (key: string | number | symbol, behavior?: ScrollBehavior) => void,\n  scrollToIndex: (index: number, behavior?: ScrollBehavior) => void,\n  ensureIndexInView: (index: number, behavior?: ScrollBehavior) => void,\n  ensureKeyInView: (key: string | number | symbol, behavior?: ScrollBehavior) => void,\n  refresh: () => Promise<void>\n}\n\nexport interface ScrollPayload {\n  clientX: number,\n  clientY: number,\n  percentX: number,\n  percentY: number\n}\n"
    },
    {
      "target": "components/virtual-list/virtual-list.tsx",
      "content": "import { NativeScroll } from '@/components/native-scroll'\nimport { ResizeObserver } from '@/components/resize-observer'\n\nimport { SlotsType, computed, defineComponent, nextTick, ref, renderSlot, toRefs, watch } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { createSlotRender, useVirtual } from '@pocui/hooks'\n\nimport { virtualListProps } from './props'\n\nimport type { NativeScrollExposed } from '@/components/native-scroll'\nimport type { ScrollPayload } from './symbol'\n\nexport default defineComponent({\n  name: 'VirtualList',\n  description:'虚拟列表组件，用于高效渲染大量数据列表。',\n  categories: ['display'],\n  components: {\n    NativeScroll,\n    ResizeObserver\n  },\n  inheritAttrs: false,\n  props: virtualListProps,\n  emits: [],\n  slots: Object as SlotsType<{\n    default?(props: { item: Record<string, any>, index: number | undefined }): any,\n    empty(): any\n  }>,\n  setup(_props, { slots, attrs, expose }) {\n    const props = useProps('virtualList', _props, {\n      items: {\n        default: () => [],\n        static: true\n      },\n      itemSize: 36,\n      itemFixed: false,\n      idKey: 'id',\n      defaultKeyAt: null,\n      bufferSize: 5,\n      listTag: 'div',\n      itemsTag: 'ul',\n      itemsAttrs: null,\n      hideBar: false,\n      lockItems: false,\n      autoplay: false,\n      ignoreResize: false\n    })\n\n    const nh = useNameHelper('virtual-list')\n\n    const { items, itemSize, itemFixed, idKey, bufferSize } = toRefs(props)\n\n    const scroll = ref<NativeScrollExposed>()\n    const list = ref<HTMLElement>()\n    const wrapper = computed(() => scroll.value?.content)\n\n    const {\n      indexMap,\n      heightTree,\n      scrollOffset,\n      visibleItems,\n      listStyle,\n      itemsStyle,\n      handleScroll,\n      handleResize,\n      handleItemResize,\n      scrollTo,\n      scrollBy,\n      scrollToKey,\n      scrollToIndex,\n      ensureIndexInView,\n      ensureKeyInView\n    } = useVirtual({\n      items,\n      itemSize,\n      itemFixed,\n      idKey,\n      bufferSize,\n      wrapper,\n      defaultKeyAt: props.defaultKeyAt,\n      autoResize: false\n    })\n\n    expose({\n      scroll,\n      wrapper,\n      list,\n      indexMap,\n      heightTree,\n      scrollOffset,\n      scrollTo,\n      scrollBy,\n      scrollToKey,\n      scrollToIndex,\n      ensureIndexInView,\n      ensureKeyInView,\n      refresh\n    })\n\n    watch(\n      () => props.items.length,\n      () => {\n        nextTick(refresh)\n      }\n    )\n\n    function onScroll(payload: ScrollPayload) {\n      handleScroll()\n      emitEvent(props.onScroll, payload)\n    }\n\n    function onResize(entry: ResizeObserverEntry) {\n      if (props.ignoreResize) return\n\n      handleResize(entry)\n      emitEvent(props.onResize, entry)\n    }\n\n    function onItemResize(key: number | string | symbol, entry: ResizeObserverEntry) {\n      if (!props.lockItems && !props.ignoreResize) {\n        handleItemResize(key, entry)\n      }\n    }\n\n    function refresh() {\n      return scroll.value?.refresh() ?? Promise.resolve()\n    }\n\n    return () => {\n      const keyField = props.idKey\n      const itemFixed = props.itemFixed\n      const keyIndexMap = indexMap.value\n      const { class: itemsClass, style: itemsOtherStyle, ...itemsAttrs } = props.itemsAttrs || {}\n\n      const ListTag = (props.listTag || 'div') as any\n      const ItemsTag = (props.itemsTag || 'ul') as any\n\n      let renderingItems = visibleItems.value\n\n      if (import.meta.env.MODE === 'test') {\n        // 很难测试ResizeObserver，所以直接渲染所有项\n        renderingItems = props.items\n      }\n\n      return (\n        <NativeScroll\n          {...attrs}\n          ref={scroll}\n          class={[nh.b(), props.inherit && nh.in(), attrs.class]}\n          inherit={props.inherit}\n          use-y-bar={!props.hideBar}\n          scroll-y={scrollOffset.value}\n          autoplay={props.autoplay}\n          onScroll={onScroll}\n          onResize={onResize}\n        >\n          {{\n            default: () => (\n              <ResizeObserver onResize={refresh}>\n                <ListTag ref={list} class={nh.be('list')} style={listStyle.value}>\n                  <ItemsTag\n                    {...itemsAttrs}\n                    class={[nh.be('items'), itemsClass]}\n                    style={[itemsStyle.value, itemsOtherStyle]}\n                  >\n                    {slots.default && props.items.length\n                      ? renderingItems.map(item => {\n                        const key = item[keyField]\n                        const index = keyIndexMap.get(key)\n                        const vnode = renderSlot(slots, 'default', {\n                          item,\n                          index\n                        })\n\n                        if (itemFixed) {\n                          vnode.key = key\n\n                          return vnode\n                        }\n\n                        const onResize = onItemResize.bind(null, key)\n\n                        return (\n                          <ResizeObserver key={key} onResize={onResize}>\n                            {() => vnode}\n                          </ResizeObserver>\n                        )\n                      })\n                      : slots.empty?.()}\n                  </ItemsTag>\n                </ListTag>\n              </ResizeObserver>\n            ),\n            prefixTrap: createSlotRender(slots, ['prefix-trap', 'prefixTrap']),\n            suffixTrap: createSlotRender(slots, ['suffix-trap', 'suffixTrap'])\n          }}\n        </NativeScroll>\n      )\n    }\n  }\n})\n"
    }
  ],
  "dependencies": ["@pocui/config", "vue", "@pocui/hooks"],
  "registryDependencies": ["virtual-list.scss", "native-scroll", "resize-observer"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
