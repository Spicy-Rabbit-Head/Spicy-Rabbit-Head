{
  "name": "index",
  "type": "registry:file",
  "files": [
    {
      "target": "components/index.ts",
      "content": "import { buildInstall } from './create'\n\n// export { version } from './version'\nexport * from './create'\n\nexport type { PropsOptions } from './props'\n\nconst components = []\n\nexport const install = buildInstall(components)"
    },
    {
      "target": "components/props.ts",
      "content": "import type { ComponentSize, ComponentState } from '@pocui/config'\n\ninterface SuggestedDefault {\n  size?: ComponentSize,\n  state?: ComponentState,\n  transfer?: boolean | string,\n  disabled?: boolean,\n  loading?: boolean,\n  clearable?: boolean\n}\n\nexport interface PropsOptions {\n  default?: SuggestedDefault & Record<string, any>\n  \n  \n}"
    },
    {
      "target": "components/create.ts",
      "content": "import { computed, unref } from 'vue'\n\nimport { configHoverDelay, configLocale, configProps, configZIndex } from '@pocui/config'\n\nimport { isEmpty, toCapitalCase, toKebabCase } from '@pocui/utils'\n\nimport type { LocaleConfig, LocaleOptions } from '@pocui/config'\n\nimport type { App, Ref } from 'vue'\n\nimport type { PropsOptions } from './props'\n\ntype MaybeRef<T> = T | Ref<T>\n\nexport interface InstallOptions {\n  prefix?: string,\n\n  props?: MaybeRef<PropsOptions>,\n\n  locale?: MaybeRef<LocaleOptions>,\n\n  zIndex?: MaybeRef<number>,\n\n  hoverDelay?: MaybeRef<number>\n}\n\nexport function buildInstall(components: any[] = [], defaultLocale?: LocaleConfig) {\n  return function install(app: App, options: InstallOptions = {}) {\n    const { prefix = '', props = {}, locale = defaultLocale, zIndex, hoverDelay = 100 } = options\n    const withDefaultLocale = computed(() => {\n      return { ...defaultLocale, ...unref(locale) }\n    })\n\n    // 计算前缀\n    const calculatePrefix = isEmpty(prefix) ? '' : toKebabCase(prefix) + '-'\n\n    configProps(props, calculatePrefix, app)\n    configLocale(withDefaultLocale, app)\n    configHoverDelay(hoverDelay, app)\n\n    if (typeof unref(zIndex) === 'number') {\n      configZIndex(zIndex!, app)\n    }\n    const normalizedPrefix = toCapitalCase(prefix || '')\n    if (app) {\n      app.provide('prefix', normalizedPrefix)\n    }\n    components.forEach(component => {\n      if (typeof component === 'function' || typeof component.install === 'function') {\n        app.use(component)\n      } else {\n        app.component(`${normalizedPrefix}${component.name}`, component)\n      }\n    })\n  }\n}\n\n/**\n 提供组件的属性配置。\n\n @param props 属性配置\n @param app Vue的应用程序，如果指定，将使用app.provide\n */\nfunction proxyConfigProps(props: MaybeRef<PropsOptions>, app?: App) {\n  !isEmpty(props) && configProps(props, '', app)\n}\n\n/**\n 提供组件的支持配置。\n\n @param config 支持配置\n @param app Vue的应用程序，如果指定，将使用app.provide\n */\nexport function provideConfig(config: Omit<InstallOptions, 'prefix' | 'namespace'> = {}, app?: App) {\n  const { props = {}, locale = {}, zIndex } = config\n\n  proxyConfigProps(props, app)\n  !isEmpty(locale) && configLocale(locale, app)\n\n  if (typeof unref(zIndex) === 'number') {\n    configZIndex(zIndex!, app)\n  }\n}\n\nexport { proxyConfigProps as configProps, configLocale, configZIndex }\n"
    },
    {
      "target": "style/animation/border.scss",
      "content": "@keyframes vxp-border-round {\r\n  100% {\r\n    transform: rotate(1turn);\r\n  }\r\n}\r\n\r\n@keyframes vxp-h-moving-border {\r\n  0%,\r\n  100% {\r\n    transform: translate3d(-100%, 0, 0) scaleX(0.2);\r\n  }\r\n\r\n  25% {\r\n    transform: translate3d(0, 0, 0) scaleX(1);\r\n  }\r\n\r\n  50% {\r\n    transform: translate3d(100%, 0, 0) scaleX(0.2);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 0, 0) scaleX(1);\r\n  }\r\n}\r\n\r\n@keyframes vxp-v-moving-border {\r\n  0%,\r\n  100% {\r\n    transform: translate3d(0, -100%, 0) scaleY(0.2);\r\n  }\r\n\r\n  25% {\r\n    transform: translate3d(0, 0, 0) scaleY(1);\r\n  }\r\n\r\n  50% {\r\n    transform: translate3d(0, 100%, 0) scaleY(0.2);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 0, 0) scaleY(1);\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/animation/index.scss",
      "content": "@use './badge-zoom';\r\n@use './border';\r\n@use './drop';\r\n@use './ease';\r\n@use './fade';\r\n@use './move';\r\n@use './popup';\r\n@use './spin';\r\n@use './zoom';\r\n"
    },
    {
      "target": "style/animation/drop.scss",
      "content": "@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-name: '#{$namespace}-drop';\r\n\r\n@mixin -start {\r\n  opacity: 0%;\r\n  transform: translateZ(0) scaleY(0.35);\r\n}\r\n\r\n@mixin -end {\r\n  opacity: 100%;\r\n  transform: translateZ(0) scaleY(1);\r\n}\r\n\r\n.#{$-name} {\r\n  @at-root {\r\n    &-enter-active {\r\n      animation: {\r\n        name: #{$-name}-in;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n\r\n    &-leave-active {\r\n      animation: {\r\n        name: #{$-name}-out;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-in {\r\n  0% {\r\n    @include -start;\r\n  }\r\n\r\n  100% {\r\n    @include -end;\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-out {\r\n  0% {\r\n    @include -end;\r\n  }\r\n\r\n  100% {\r\n    @include -start;\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/animation/fade.scss",
      "content": "@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-name: '#{$namespace}-fade';\r\n\r\n@mixin -start {\r\n  opacity: 0%;\r\n}\r\n\r\n@mixin -end {\r\n  opacity: 100%;\r\n}\r\n\r\n.#{$-name} {\r\n  @at-root {\r\n    &-enter-active {\r\n      animation: {\r\n        name: #{$-name}-in;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n\r\n    &-leave-active {\r\n      animation: {\r\n        name: #{$-name}-out;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-in {\r\n  0% {\r\n    @include -start;\r\n  }\r\n\r\n  100% {\r\n    @include -end;\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-out {\r\n  0% {\r\n    @include -end;\r\n  }\r\n\r\n  100% {\r\n    @include -start;\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/design/index.scss",
      "content": "@use 'sass:color';\r\n@use 'sass:map';\r\n@use 'sass:math';\r\n\r\n@use '../shared' as *;\r\n\r\n$namespace: 'poc' !default;\r\n\r\n$types: primary, info, success, warning, error;\r\n\r\n$color-black: #000 !default;\r\n$color-white: #fff !default;\r\n$color-map: () !default;\r\n\r\n$color-map: map.deep-merge(\r\n    (\r\n      primary: (\r\n        base: #339af0\r\n      ),\r\n      info: (\r\n        base: #3bc9db\r\n      ),\r\n      success: (\r\n        base: #20c997\r\n      ),\r\n      warning: (\r\n        base: #fab005\r\n      ),\r\n      error: (\r\n        base: #f03e3e\r\n      )\r\n    ),\r\n    $color-map\r\n);\r\n\r\n@mixin define-level-colors($type, $max-level, $mode, $mixed-color) {\r\n  @for $i from 1 through $max-level {\r\n    $color-map: map.deep-merge(\r\n        (\r\n          $type: (\r\n            '#{$mode}-#{$i}': color.mix(\r\n                $mixed-color,\r\n                map.get($color-map, $type, 'base'),\r\n                math.percentage(math.div($i, 10))\r\n            )\r\n          )\r\n        ),\r\n        $color-map\r\n    ) !global;\r\n  }\r\n}\r\n\r\n@mixin define-opacity-colors($type, $max-level) {\r\n  @for $i from 1 through $max-level {\r\n    $color-map: map.deep-merge(\r\n        (\r\n          $type: (\r\n            'opacity-#{$i}': rgba(\r\n                map.get($color-map, $type, 'base'),\r\n                math.percentage(math.div(10 - $i, 10))\r\n            )\r\n          )\r\n        ),\r\n        $color-map\r\n    ) !global;\r\n  }\r\n}\r\n\r\n@each $type in $types {\r\n  @include define-level-colors($type, 9, 'light', $color-white);\r\n  @include define-level-colors($type, 2, 'dark', $color-black);\r\n  @include define-opacity-colors($type, 9);\r\n}\r\n\r\n@mixin define-type-color($type, $map: $color-map) {\r\n  $colors: map.get($map, $type);\r\n\r\n  @if $colors {\r\n    @each $name in map.keys($colors) {\r\n      @include define-css-var(('color', $type, $name), map.get($colors, $name));\r\n    }\r\n  }\r\n}\r\n\r\n$content-color-map: () !default;\r\n$content-color-map: map.merge(\r\n    (\r\n      primary: #212529,\r\n      base: #495057,\r\n      secondary: #868e96,\r\n      third: #a1adb1,\r\n      disabled: #adb5bd,\r\n      placeholder: #ced4da,\r\n      humble: #dee2e6,\r\n      reverse: #fff\r\n    ),\r\n    $content-color-map\r\n);\r\n\r\n$bg-color-map: () !default;\r\n$bg-color-map: map.merge(\r\n    (\r\n      base: #fff,\r\n      reverse: #131719\r\n    ),\r\n    $bg-color-map\r\n);\r\n\r\n$border-color-map: () !default;\r\n$border-color-map: map.merge(\r\n    (\r\n      base: #ced4da,\r\n      light-1: #dee2e6,\r\n      light-2: #e9ecef,\r\n      dark-1: #adb5bd,\r\n      dark-2: #868e96\r\n    ),\r\n    $border-color-map\r\n);\r\n\r\n$border-width: 1px !default;\r\n$border-style: solid !default;\r\n$border-shape: value('border-width') value('border-style') !default;\r\n\r\n$fill-color-map: () !default;\r\n$fill-color-map: map.merge(\r\n    (\r\n      base: #fff,\r\n      secondary: #d9dfe2,\r\n      disabled: #dee2e6,\r\n      hover: #e9ecef,\r\n      humble: #f3f4f6,\r\n      background: #f8f9fa,\r\n      reverse: #131719\r\n    ),\r\n    $fill-color-map\r\n);\r\n\r\n$font-family-map: () !default;\r\n$font-family-map: map.merge(\r\n    (\r\n      base: #{-apple-system,\r\n    BlinkMacSystemFont,\r\n    'Segoe UI',\r\n    Roboto,\r\n    'Fira Sans',\r\n    'Droid Sans',\r\n    'Helvetica Neue',\r\n    sans-serif,\r\n    'Apple Color Emoji',\r\n    'Segoe UI Emoji'},\r\n      mono: #{ui-monospace,\r\n    SFMono-Regular,\r\n    'SF Mono',\r\n    Menlo,\r\n    Monaco,\r\n    Consolas,\r\n    'Liberation Mono',\r\n    'Courier New',\r\n    monospace}\r\n    ),\r\n    $font-family-map\r\n);\r\n\r\n$font-size-map: () !default;\r\n$font-size-map: map.merge(\r\n    (\r\n      base: 14px,\r\n      primary: 16px,\r\n      secondary: 12px\r\n    ),\r\n    $font-size-map\r\n);\r\n\r\n$line-height-map: () !default;\r\n$line-height-map: map.merge(\r\n    (\r\n      base: 1.5,\r\n      secondary: 1\r\n    ),\r\n    $line-height-map\r\n);\r\n\r\n$radius-map: () !default;\r\n$radius-map: map.merge(\r\n    (\r\n      base: 4px,\r\n      large: 6px,\r\n      small: 2px\r\n    ),\r\n    $radius-map\r\n);\r\n\r\n$shadow-color-map: () !default;\r\n$shadow-color-map: map.merge(\r\n    (\r\n      base: #dee2e6,\r\n      light-1: #e9ecef,\r\n      light-2: #f1f3f5,\r\n      dark-1: #ced4da,\r\n      dark-2: #adb5bd\r\n    ),\r\n    $shadow-color-map\r\n);\r\n\r\n$shadow-x: 0 !default;\r\n$shadow-y: 0 !default;\r\n$shadow-blur: 6px !default;\r\n$shadow-shape: value('shadow-x') value('shadow-y') value('shadow-blur') !default;\r\n$shadow-base: value('shadow-shape') value('border-color-base') !default;\r\n\r\n$shadow-border: 0 0 0 1px !default;\r\n$shadow-focus: 0 0 2px 2px !default;\r\n\r\n$transition-duration: 250ms !default;\r\n$transition-timing: ease !default;\r\n$transition-base: value('transition-duration') value('transition-timing') !default;\r\n\r\n$transition-map: () !default;\r\n$transition-map: map.merge(\r\n    (\r\n      color: color value('transition-base'),\r\n      background: background-color value('transition-base'),\r\n      border: border-color value('transition-base'),\r\n      shadow: box-shadow value('transition-base'),\r\n      opacity: opacity value('transition-base'),\r\n      transform: transform value('transition-base')\r\n    ),\r\n    $transition-map\r\n);\r\n\r\n$z-index-map: () !default;\r\n$z-index-map: map.merge(\r\n    (\r\n      popper: 1000,\r\n      masker: 1500,\r\n      popup: 2000,\r\n      full: 2147483584\r\n    ),\r\n    $z-index-map\r\n);\r\n\r\n$break-point-sm: 576px !default;\r\n$break-point-md: 768px !default;\r\n$break-point-lg: 992px !default;\r\n$break-point-xl: 1200px !default;\r\n$break-point-xxl: 1600px !default;\r\n\r\n$break-point-map: () !default;\r\n$break-point-map: map.merge(\r\n    (\r\n      xs: (\r\n        max-width: $break-point-sm - 0.02px\r\n      ),\r\n      sm: (\r\n        min-width: $break-point-sm\r\n      ),\r\n      md: (\r\n        min-width: $break-point-md\r\n      ),\r\n      lg: (\r\n        min-width: $break-point-lg\r\n      ),\r\n      xl: (\r\n        min-width: $break-point-xl\r\n      ),\r\n      xxl: (\r\n        min-width: $break-point-xxl\r\n      )\r\n    ),\r\n    $break-point-map\r\n);\r\n\r\n@mixin define-theme-styles($theme-config: ()) {\r\n  @include define-css-var(\r\n      'color-black',\r\n      get-or-default($theme-config, $color-black, 'color-black')\r\n  );\r\n  @include define-css-var(\r\n      'color-white',\r\n      get-or-default($theme-config, $color-white, 'color-white')\r\n  );\r\n\r\n  @each $type in $types {\r\n    @include define-type-color($type, get-or-default($theme-config, $color-map, 'color-map'));\r\n  }\r\n\r\n  @include define-preset-values(\r\n      'content-color',\r\n      get-or-default($theme-config, $content-color-map, 'content-color-map')\r\n  );\r\n  @include define-preset-values(\r\n      'bg-color',\r\n      get-or-default($theme-config, $bg-color-map, 'bg-color-map')\r\n  );\r\n  @include define-preset-values(\r\n      'border-color',\r\n      get-or-default($theme-config, $border-color-map, 'border-color-map')\r\n  );\r\n\r\n  @include define-css-var(\r\n      'border-width',\r\n      get-or-default($theme-config, $border-width, 'border-width')\r\n  );\r\n  @include define-css-var(\r\n      'border-style',\r\n      get-or-default($theme-config, $border-style, 'border-style')\r\n  );\r\n  @include define-css-var(\r\n      'border-shape',\r\n      get-or-default($theme-config, $border-shape, 'border-shape')\r\n  );\r\n\r\n  @each $name in map.keys(get-or-default($theme-config, $border-color-map, 'border-color-map')) {\r\n    @include define-css-var(('border', $name), value('border-shape') value('border-color' $name));\r\n  }\r\n\r\n  @include define-preset-values(\r\n      'fill-color',\r\n      get-or-default($theme-config, $fill-color-map, 'fill-color-map')\r\n  );\r\n  @include define-preset-values(\r\n      'font-family',\r\n      get-or-default($theme-config, $font-family-map, 'font-family-map')\r\n  );\r\n  @include define-preset-values(\r\n      'font-size',\r\n      get-or-default($theme-config, $font-size-map, 'font-size-map')\r\n  );\r\n  @include define-preset-values(\r\n      'line-height',\r\n      get-or-default($theme-config, $line-height-map, 'line-height-map')\r\n  );\r\n  @include define-preset-values('radius', get-or-default($theme-config, $radius-map, 'radius-map'));\r\n\r\n  @include define-css-var('shadow-x', get-or-default($theme-config, $shadow-x, 'shadow-x'));\r\n  @include define-css-var('shadow-y', get-or-default($theme-config, $shadow-y, 'shadow-y'));\r\n  @include define-css-var(\r\n      'shadow-blur',\r\n      get-or-default($theme-config, $shadow-blur, 'shadow-blur')\r\n  );\r\n  @include define-css-var(\r\n      'shadow-shape',\r\n      get-or-default($theme-config, $shadow-shape, 'shadow-shape')\r\n  );\r\n  @include define-css-var(\r\n      'shadow-base',\r\n      get-or-default($theme-config, $shadow-base, 'shadow-base')\r\n  );\r\n\r\n  @include define-preset-values(\r\n      'shadow-color',\r\n      get-or-default($theme-config, $shadow-color-map, 'shadow-color-map')\r\n  );\r\n\r\n  @each $name in map.keys(get-or-default($theme-config, $shadow-color-map, 'shadow-color-map')) {\r\n    @include define-css-var(('shadow', $name), value('shadow-shape') value('shadow-color' $name));\r\n  }\r\n\r\n  @include define-css-var(\r\n      'shadow-border',\r\n      get-or-default($theme-config, $shadow-border, 'shadow-border')\r\n  );\r\n  @include define-css-var(\r\n      'shadow-focus',\r\n      get-or-default($theme-config, $shadow-focus, 'shadow-focus')\r\n  );\r\n\r\n  @include define-css-var(\r\n      'transition-duration',\r\n      get-or-default($theme-config, $transition-duration, 'transition-duration')\r\n  );\r\n  @include define-css-var(\r\n      'transition-timing',\r\n      get-or-default($theme-config, $transition-timing, 'transition-timing')\r\n  );\r\n  @include define-css-var(\r\n      'transition-base',\r\n      get-or-default($theme-config, $transition-base, 'transition-base')\r\n  );\r\n\r\n  @include define-preset-values(\r\n      'transition',\r\n      get-or-default($theme-config, $transition-map, 'transition-map')\r\n  );\r\n  @include define-preset-values(\r\n      'z-index',\r\n      get-or-default($theme-config, $z-index-map, 'z-index-map')\r\n  );\r\n  @include define-preset-values(\r\n      'break-point',\r\n      get-or-default($theme-config, $break-point-map, 'break-point-map'),\r\n      true\r\n  );\r\n}\r\n"
    },
    {
      "target": "style/shared/index.scss",
      "content": "@use 'sass:map';\r\n@use 'sass:meta';\r\n@use 'sass:math';\r\n@use 'sass:list';\r\n\r\n@function to-css-var-name($name-units...) {\r\n  // 变量前缀固定为 '--poc'\r\n  $name: '--poc';\r\n\r\n  @each $unit in $name-units {\r\n    @if $unit != '' {\r\n      $name: $name + '-' + $unit;\r\n    }\r\n  }\r\n\r\n  @return $name;\r\n}\r\n\r\n@function value($name-units, $default: null) {\r\n  @if not $default {\r\n    @return var(#{to-css-var-name($name-units...)});\r\n  }\r\n\r\n  @return var(#{to-css-var-name($name-units...)}, $default);\r\n}\r\n\r\n@function get-or-default($map, $default, $keys...) {\r\n  $value: map.get($map, $keys...);\r\n\r\n  @if not $value {\r\n    @return $default;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n@mixin define-css-var($name-units, $value) {\r\n  #{to-css-var-name($name-units...)}: #{$value};\r\n}\r\n\r\n@mixin define-preset-values($base-name, $style-map, $inspect: false) {\r\n  @each $name in map.keys($style-map) {\r\n    @include define-css-var(($base-name, $name), if($inspect, #{meta.inspect(map.get($style-map, $name))}, map.get($style-map, $name))\r\n    );\r\n  }\r\n}\r\n\r\n@mixin define-preset-style($base-name, $style-map) {\r\n  @each $name in map.keys($style-map) {\r\n    $style-units: map.get($style-map, $name);\r\n\r\n    @if list.length($style-units) != 0 {\r\n      @include define-css-var(($base-name, $name), value($style-units));\r\n    }\r\n  }\r\n}\r\n\r\n@mixin basis($inherit: true) {\r\n  & {\r\n    font-family: value('font-family-base');\r\n    font-size: value('font-size-base');\r\n    font-variant-numeric: tabular-nums;\r\n    line-height: value('line-height-base');\r\n    color: value('content-color-base');\r\n    @content;\r\n  }\r\n\r\n  &,\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  @if $inherit {\r\n    &--inherit {\r\n      font-family: inherit;\r\n      font-size: inherit;\r\n      font-variant-numeric: inherit;\r\n      line-height: inherit;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin inherit-color {\r\n  &--inherit {\r\n    color: inherit;\r\n  }\r\n}\r\n\r\n@mixin fixed {\r\n  & {\r\n    position: fixed;\r\n    inset: 0;\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin inner-fixed {\r\n  & {\r\n    position: absolute;\r\n    inset: 0;\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin clear-both {\r\n  &::before,\r\n  &::after {\r\n    display: table;\r\n    content: '';\r\n  }\r\n}\r\n\r\n@mixin clean-button {\r\n  & {\r\n    padding: 0;\r\n    appearance: none;\r\n    cursor: pointer;\r\n    background: transparent;\r\n    border: 0;\r\n    outline: 0;\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin query-media($point) {\r\n  @if map.has-key($break-point-map, $point) {\r\n    @media screen and #{meta.inspect(map.get($break-point-map, $point))} {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin rtl {\r\n  $self: #{&};\r\n\r\n  @at-root {\r\n    html.rtl,\r\n    html[dir='rtl'] {\r\n      #{$self} {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin around-border($border-color, $border-radius, $duration: 2000ms) {\r\n  & {\r\n    position: relative;\r\n    @content;\r\n  }\r\n\r\n  &::before {\r\n    position: absolute;\r\n    top: -4px;\r\n    left: -4px;\r\n    width: calc(100% + 8px);\r\n    height: calc(100% + 8px);\r\n    pointer-events: none;\r\n    content: '';\r\n    border: value('border-shape') $border-color;\r\n    border-radius: $border-radius;\r\n    transition: value('transition-border'), value('transition-opacity');\r\n    animation: vxp-border-clip $duration infinite linear;\r\n  }\r\n}\r\n\r\n@mixin round-border($border-color, $duration: 2000ms) {\r\n  & {\r\n    position: relative;\r\n    @content;\r\n  }\r\n\r\n  &::before {\r\n    position: absolute;\r\n    top: -4px;\r\n    left: -4px;\r\n    width: calc(100% + 8px);\r\n    height: calc(100% + 8px);\r\n    clip-path: inset(0 0 50% 50%);\r\n    pointer-events: none;\r\n    content: '';\r\n    border: value('border-shape') $border-color;\r\n    border-radius: 50%;\r\n    transition: value('transition-border'), value('transition-opacity');\r\n    transform-origin: 50% 50%;\r\n    animation: vxp-border-round $duration infinite linear;\r\n  }\r\n}\r\n\r\n@mixin h-moving-border($border-color, $duration: 2000ms) {\r\n  & {\r\n    position: relative;\r\n    will-change: inset;\r\n    @content;\r\n  }\r\n\r\n  &::before {\r\n    position: absolute;\r\n    inset: -4px 25% auto;\r\n    width: auto;\r\n    height: 0;\r\n    content: '';\r\n    border-top: value('border-shape') $border-color;\r\n    transition: value('transition-border'), value('transition-opacity');\r\n    animation: vxp-h-moving-border $duration infinite;\r\n  }\r\n\r\n  &::after {\r\n    position: absolute;\r\n    inset: auto 25% -4px;\r\n    width: auto;\r\n    height: 0;\r\n    content: '';\r\n    border-top: value('border-shape') $border-color;\r\n    transition: value('transition-border'), value('transition-opacity');\r\n    animation: vxp-h-moving-border $duration #{math.div(-$duration, 2)} infinite;\r\n  }\r\n}\r\n\r\n@mixin v-moving-border($border-color, $duration: 2000ms) {\r\n  & {\r\n    position: relative;\r\n    will-change: inset;\r\n    @content;\r\n  }\r\n\r\n  &::before {\r\n    position: absolute;\r\n    inset: 25% auto 25% -4px;\r\n    width: 0;\r\n    height: auto;\r\n    content: '';\r\n    border-inline-start: value('border-shape') $border-color;\r\n    transition: value('transition-border'), value('transition-opacity');\r\n    animation: vxp-v-moving-border $duration infinite;\r\n  }\r\n\r\n  &::after {\r\n    position: absolute;\r\n    inset: 25% -4px 25% auto;\r\n    width: 0;\r\n    height: auto;\r\n    content: '';\r\n    border-inline-start: value('border-shape') $border-color;\r\n    transition: value('transition-border'), value('transition-opacity');\r\n    animation: vxp-v-moving-border $duration #{math.div(-$duration, 2)} infinite;\r\n  }\r\n}\r\n\r\n@mixin logical-radius($values) {\r\n  @if list.nth($values, 1) {\r\n    border-start-start-radius: list.nth($values, 1);\r\n  }\r\n\r\n  @if list.nth($values, 2) {\r\n    border-start-end-radius: list.nth($values, 2);\r\n  }\r\n\r\n  @if list.nth($values, 3) {\r\n    border-end-end-radius: list.nth($values, 3);\r\n  }\r\n\r\n  @if list.nth($values, 4) {\r\n    border-end-start-radius: list.nth($values, 4);\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/animation/ease.scss",
      "content": "@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-name: '#{$namespace}-ease';\r\n\r\n@mixin -start {\r\n  opacity: 0%;\r\n  transform: translateZ(0) scale(0.9);\r\n}\r\n\r\n@mixin -end {\r\n  opacity: 100%;\r\n  transform: translateZ(0) scale(1);\r\n}\r\n\r\n.#{$-name} {\r\n  @at-root {\r\n    &-enter-active {\r\n      animation: {\r\n        name: #{$-name}-in;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n\r\n    &-leave-active {\r\n      animation: {\r\n        name: #{$-name}-out;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-in {\r\n  0% {\r\n    @include -start;\r\n  }\r\n\r\n  100% {\r\n    @include -end;\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-out {\r\n  0% {\r\n    @include -end;\r\n  }\r\n\r\n  100% {\r\n    @include -start;\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/animation/popup.scss",
      "content": "@use 'sass:map';\r\n\r\n@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-popup-types: (\r\n  top: 'Y(-100%) translateX(-50%)',\r\n  right: 'X(100%)',\r\n  bottom: 'Y(100%) translateX(-50%)',\r\n  left: 'X(-100%)'\r\n);\r\n\r\n@mixin -start($type) {\r\n  opacity: 0%;\r\n  transform: translate#{map.get($-popup-types, $type)} translateZ(0);\r\n}\r\n\r\n@mixin -end($type) {\r\n  opacity: 100%;\r\n\r\n  @if $type == 'top' or $type == 'bottom' {\r\n    transform: translate3d(-50%, 0, 0);\r\n  } @else {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n}\r\n\r\n@each $type in map.keys($map: $-popup-types) {\r\n  $root-name: #{$namespace}-popup-#{$type};\r\n\r\n  .#{$root-name} {\r\n    @at-root {\r\n      &-enter-active,\r\n      &-leave-active {\r\n        pointer-events: none;\r\n        user-select: none;\r\n        animation-duration: value('transition-duration');\r\n      }\r\n\r\n      &-enter-active {\r\n        animation-name: #{$root-name}-in;\r\n      }\r\n\r\n      &-leave-active {\r\n        animation-name: #{$root-name}-out;\r\n      }\r\n    }\r\n  }\r\n\r\n  @keyframes #{$root-name}-in {\r\n    0% {\r\n      @include -start($type);\r\n    }\r\n\r\n    100% {\r\n      @include -end($type);\r\n    }\r\n  }\r\n\r\n  @keyframes #{$root-name}-out {\r\n    0% {\r\n      @include -end($type);\r\n    }\r\n\r\n    100% {\r\n      opacity: 0%;\r\n    }\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/animation/spin.scss",
      "content": "@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-name: '#{$namespace}-spin';\r\n\r\n@mixin -start {\r\n  transform: translateZ(0) rotate(0deg);\r\n}\r\n\r\n@mixin -end {\r\n  transform: translateZ(0) rotate(360deg);\r\n}\r\n\r\n.#{$-name} {\r\n  @at-root {\r\n    &-enter-active {\r\n      animation: {\r\n        name: #{$-name}-in;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n\r\n    &-leave-active {\r\n      animation: {\r\n        name: #{$-name}-out;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-in {\r\n  0% {\r\n    @include -start;\r\n  }\r\n\r\n  100% {\r\n    @include -end;\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-out {\r\n  0% {\r\n    @include -end;\r\n  }\r\n\r\n  100% {\r\n    @include -start;\r\n  }\r\n}\r\n"
    },
    { "target": "components/style.ts", "content": "import '@/style/index.scss'\r\n" },
    {
      "target": "style/animation/move.scss",
      "content": "@use 'sass:map';\r\n\r\n@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-popup-types: (\r\n  top: 'Y(-100%)',\r\n  right: 'X(100%)',\r\n  bottom: 'Y(100%)',\r\n  left: 'X(-100%)'\r\n);\r\n\r\n@mixin -start($type) {\r\n  opacity: 0%;\r\n  transform: translate#{map.get($-popup-types, $type)} translateZ(0);\r\n}\r\n\r\n@mixin -end {\r\n  opacity: 100%;\r\n  transform: translate3d(0, 0, 0);\r\n}\r\n\r\n@each $type in map.keys($map: $-popup-types) {\r\n  $root-name: #{$namespace}-move-#{$type};\r\n\r\n  .#{$root-name} {\r\n    @at-root {\r\n      &-enter-active,\r\n      &-leave-active {\r\n        pointer-events: none;\r\n        user-select: none;\r\n        animation-duration: value('transition-duration');\r\n      }\r\n\r\n      &-enter-active {\r\n        animation-name: #{$root-name}-in;\r\n      }\r\n\r\n      &-leave-active {\r\n        animation-name: #{$root-name}-out;\r\n      }\r\n    }\r\n  }\r\n\r\n  @keyframes #{$root-name}-in {\r\n    0% {\r\n      @include -start($type);\r\n    }\r\n\r\n    100% {\r\n      @include -end;\r\n    }\r\n  }\r\n\r\n  @keyframes #{$root-name}-out {\r\n    0% {\r\n      @include -end;\r\n    }\r\n\r\n    100% {\r\n      @include -start($type);\r\n    }\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/animation/zoom.scss",
      "content": "@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-name: '#{$namespace}-zoom';\r\n\r\n@mixin -start {\r\n  opacity: 0%;\r\n  transform: translateZ(0) scale(0.35);\r\n}\r\n\r\n@mixin -end {\r\n  opacity: 100%;\r\n  transform: translateZ(0) scale(1);\r\n}\r\n\r\n.#{$-name} {\r\n  @at-root {\r\n    &-enter-active {\r\n      animation: {\r\n        name: #{$-name}-in;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n\r\n    &-leave-active {\r\n      animation: {\r\n        name: #{$-name}-out;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-in {\r\n  0% {\r\n    @include -start;\r\n  }\r\n\r\n  100% {\r\n    @include -end;\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-out {\r\n  0% {\r\n    @include -end;\r\n  }\r\n\r\n  100% {\r\n    @include -start;\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/animation/badge-zoom.scss",
      "content": "@use '../design' as *;\r\n@use '../shared' as *;\r\n\r\n$-name: '#{$namespace}-badge-zoom';\r\n\r\n@mixin -start {\r\n  opacity: 0%;\r\n  transform: translate(50%, -50%) scale(0.35);\r\n}\r\n\r\n@mixin -end {\r\n  opacity: 100%;\r\n  transform: translate(50%, -50%) scale(1);\r\n}\r\n\r\n.#{$-name} {\r\n  @at-root {\r\n    &-enter-active {\r\n      animation: {\r\n        name: #{$-name}-in;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n\r\n    &-leave-active {\r\n      animation: {\r\n        name: #{$-name}-out;\r\n        duration: value('transition-duration');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-in {\r\n  0% {\r\n    @include -start;\r\n  }\r\n\r\n  100% {\r\n    @include -end;\r\n  }\r\n}\r\n\r\n@keyframes #{$-name}-out {\r\n  0% {\r\n    @include -end;\r\n  }\r\n\r\n  100% {\r\n    @include -start;\r\n  }\r\n}\r\n"
    },
    {
      "target": "style/preset.scss",
      "content": "@use 'sass:map';\r\n\r\n@use './shared' as *;\r\n@use './design' as *;\r\n@use './animation';\r\n\r\n:root,\r\n.#{$namespace}-theme-vars-base {\r\n  @include define-theme-styles;\r\n}\r\n\r\nbody {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"]
}
