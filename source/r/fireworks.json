{
  "name": "fireworks",
  "type": "registry:components",
  "description": "绚丽的烟花特效，适用于庆祝或特殊场合的视觉展示。",
  "files": [
    {
      "target": "components/fireworks/fireworks.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, onMounted, onUnmounted, reactive, ref } from \"vue\";\n\nimport { useListener } from \"@pocui/hooks\";\n\nimport { useNameHelper } from \"@pocui/config\";\n\ndefineOptions({\n  name: \"Fireworks\",\n  description: \"绚丽的烟花特效，适用于庆祝或特殊场合的视觉展示。\",\n  categories: [\"other\"],\n});\n\nconst nh = useNameHelper(\"fireworks\");\nconst className = computed(() => {\n  return [nh.b()];\n});\nconst canvas = ref<HTMLCanvasElement | null>(null);\nconst ctx = ref<CanvasRenderingContext2D | null>(null);\nconst particlePool = ref<Firework[]>([]);\nconst fireworks = ref<Firework[]>([]);\n\n// 对象池大小\nconst POOL_SIZE = 600;\nconst config = {\n  // 每次爆炸的粒子数\n  particlesPerBurst: 200,\n  // 爆炸形状\n  sizes: {\n    rectangle: { width: 24, height: 12 }, // 矩形宽高\n    square: 12, // 正方形边长\n    circle: 12, // 圆形直径\n    triangle: 10, // 三角形边长\n    oval: { width: 24, height: 12 }, // 椭圆宽高\n    image: { width: 30, height: 30 }, // 图片尺寸\n  },\n  // 旋转相关参数\n  rotation: {\n    baseSpeed: 2, // 基础旋转速度\n    randomSpeed: 3, // 随机旋转速度增量\n    decay: 0.85, // 旋转衰减系数\n  },\n  // 烟花粒子颜色配置(带透明度)\n  colors: [\n    \"rgba(255, 68, 68, 1)\",\n    \"rgba(255, 68, 68, 0.9)\",\n    \"rgba(255, 68, 68, 0.8)\",\n    \"rgba(255, 116, 188, 1)\",\n    \"rgba(255, 116, 188, 0.9)\",\n    \"rgba(255, 116, 188, 0.8)\",\n    \"rgba(68, 68, 255, 0.8)\",\n    \"rgba(92, 202, 56, 0.7)\",\n    \"rgba(255, 68, 255, 0.8)\",\n    \"rgba(68, 255, 255, 0.7)\",\n    \"rgba(255, 136, 68, 0.7)\",\n    \"rgba(68, 136, 255, 1)\",\n    \"rgba(250, 198, 122, 0.8)\",\n  ],\n  // 烟花粒子形状配置(矩形出现概率更高)\n  shapes: [\n    \"rectangle\",\n    \"rectangle\",\n    \"rectangle\",\n    \"rectangle\",\n    \"rectangle\",\n    \"rectangle\",\n    \"rectangle\",\n    \"circle\",\n    \"triangle\",\n    \"oval\",\n  ],\n};\n\ninterface Firework {\n  x: number;\n\n  y: number;\n\n  color: string;\n\n  velocity: { x: number; y: number };\n\n  rotation: number;\n\n  rotationX: number;\n\n  rotationY: number;\n\n  scale: number;\n\n  shape: string;\n\n  active: boolean;\n\n  rotationSpeed: { x: number; y: number; z: number };\n\n  imageUrl?: string;\n\n  opacity: number; // 新增透明度属性\n}\n\n// 初始化对象池\nfunction initParticlePool() {\n  for (let i = 0; i < POOL_SIZE; i++) {\n    particlePool.value.push({\n      x: 0,\n      y: 0,\n      color: \"\",\n      velocity: { x: 0, y: 0 },\n      rotation: 0,\n      rotationX: 0,\n      rotationY: 0,\n      scale: 1,\n      shape: \"circle\",\n      active: false,\n      rotationSpeed: { x: 0, y: 0, z: 0 },\n      opacity: 1, // 初始化透明度为1\n    });\n  }\n}\n\n// 从对象池获取粒子\nfunction getParticleFromPool(): Firework | null {\n  const particle = particlePool.value.find((p) => !p.active);\n  if (particle) {\n    particle.active = true;\n    return particle;\n  }\n  return null;\n}\n\n// 创建烟花\nfunction createFirework() {\n  // 异步创建粒子，避免阻塞主线程\n  setTimeout(() => {\n    const startX = Math.random() * window.innerWidth;\n    const startY = window.innerHeight;\n\n    const availableShapes = config.shapes;\n\n    for (let i = 0; i < config.particlesPerBurst; i++) {\n      const particle = getParticleFromPool();\n      if (!particle) continue;\n\n      const angle = (Math.PI * i) / (config.particlesPerBurst / 2);\n      const speed = (12 + Math.random() * 6) * 1.5;\n      const spread = Math.random() * Math.PI * 2;\n\n      Object.assign(particle, {\n        x: startX,\n        y: startY,\n        color: config.colors[Math.floor(Math.random() * config.colors.length)],\n        velocity: {\n          x:\n            Math.cos(angle) *\n            Math.cos(spread) *\n            speed *\n            (Math.random() * 0.5 + 0.5),\n          y: Math.sin(angle) * speed - 15,\n        },\n        rotation: Math.random() * 360,\n        rotationX: Math.random() * 360 - 180,\n        rotationY: Math.random() * 360 - 180,\n        scale: 0.8 + Math.random() * 0.4,\n        shape:\n          availableShapes[Math.floor(Math.random() * availableShapes.length)],\n        rotationSpeed: {\n          x:\n            (Math.random() * config.rotation.randomSpeed +\n              config.rotation.baseSpeed) *\n            (Math.random() > 0.5 ? 1 : -1),\n          y:\n            (Math.random() * config.rotation.randomSpeed +\n              config.rotation.baseSpeed) *\n            (Math.random() > 0.5 ? 1 : -1),\n          z:\n            (Math.random() * config.rotation.randomSpeed +\n              config.rotation.baseSpeed) *\n            (Math.random() > 0.5 ? 1 : -1),\n        },\n        opacity: 1, // 初始化透明度为1\n      });\n\n      fireworks.value.push(particle);\n    }\n  }, 0);\n}\n\n// 更新烟花状态\nfunction updateFireworks() {\n  const velocityThreshold = 10; // 设置下落速度阈值，超过此值开始淡出\n  const opacityDecay = 0.02; // 设置透明度减少的速度（增大值加快淡出速度）\n\n  for (let i = fireworks.value.length - 1; i >= 0; i--) {\n    const firework = fireworks.value[i];\n    firework.x += firework.velocity.x;\n    firework.y += firework.velocity.y;\n    firework.velocity.y += 0.525;\n    firework.rotation += firework.rotationSpeed.z;\n    firework.rotationX += firework.rotationSpeed.x;\n    firework.rotationY += firework.rotationSpeed.y;\n\n    firework.rotationSpeed.x *= config.rotation.decay;\n    firework.rotationSpeed.y *= config.rotation.decay;\n    firework.rotationSpeed.z *= config.rotation.decay;\n\n    // 如果粒子的下落速度超过阈值，开始减少透明度\n    if (firework.velocity.y > velocityThreshold) {\n      firework.opacity -= opacityDecay; // 根据需要调整淡出的速度\n      if (firework.opacity <= 0) {\n        firework.active = false;\n        fireworks.value.splice(i, 1);\n        continue;\n      }\n    }\n\n    // 如果粒子超出屏幕范围，回收粒子\n    if (\n      firework.x < -100 ||\n      firework.x > window.innerWidth + 100 ||\n      firework.y < -100 ||\n      firework.y > window.innerHeight + 100\n    ) {\n      firework.active = false;\n      fireworks.value.splice(i, 1);\n    }\n  }\n}\n\n// 绘制单个粒子\nfunction drawFirework(firework: Firework) {\n  if (!ctx.value) return;\n\n  ctx.value.save();\n  ctx.value.globalAlpha = firework.opacity; // 设置当前粒子的透明度\n  ctx.value.translate(firework.x, firework.y);\n  ctx.value.rotate((firework.rotation * Math.PI) / 180);\n  ctx.value.scale(firework.scale, firework.scale);\n\n  switch (firework.shape) {\n    case \"rectangle\":\n      ctx.value.fillStyle = firework.color;\n      ctx.value.fillRect(\n        -config.sizes.rectangle.width / 2,\n        -config.sizes.rectangle.height / 2,\n        config.sizes.rectangle.width,\n        config.sizes.rectangle.height,\n      );\n      break;\n    case \"square\":\n      ctx.value.fillStyle = firework.color;\n      ctx.value.fillRect(\n        -config.sizes.square / 2,\n        -config.sizes.square / 2,\n        config.sizes.square,\n        config.sizes.square,\n      );\n      break;\n    case \"circle\":\n      ctx.value.fillStyle = firework.color;\n      ctx.value.beginPath();\n      ctx.value.arc(0, 0, config.sizes.circle / 2, 0, Math.PI * 2);\n      ctx.value.closePath();\n      ctx.value.fill();\n      break;\n    case \"triangle\":\n      ctx.value.fillStyle = firework.color;\n      ctx.value.beginPath();\n      ctx.value.moveTo(0, -config.sizes.triangle);\n      ctx.value.lineTo(config.sizes.triangle, config.sizes.triangle);\n      ctx.value.lineTo(-config.sizes.triangle, config.sizes.triangle);\n      ctx.value.closePath();\n      ctx.value.fill();\n      break;\n    case \"oval\":\n      ctx.value.fillStyle = firework.color;\n      ctx.value.beginPath();\n      ctx.value.ellipse(\n        0,\n        0,\n        config.sizes.oval.width / 2,\n        config.sizes.oval.height / 2,\n        0,\n        0,\n        Math.PI * 2,\n      );\n      ctx.value.closePath();\n      ctx.value.fill();\n      break;\n    default:\n      break;\n  }\n\n  ctx.value.restore();\n}\n\n// 绘制所有烟花\nfunction draw() {\n  if (!ctx.value || !canvas.value) return;\n\n  ctx.value.clearRect(0, 0, canvas.value.width, canvas.value.height);\n  ctx.value.globalCompositeOperation = \"lighter\";\n\n  fireworks.value.forEach((firework) => {\n    drawFirework(firework);\n  });\n}\n\n// 动画循环\nfunction animate() {\n  updateFireworks();\n  draw();\n  animationFrame = requestAnimationFrame(animate);\n}\n\nlet animationFrame: number;\n\n// 调整Canvas大小\nfunction resizeCanvas() {\n  if (canvas.value) {\n    canvas.value.width = window.innerWidth;\n    canvas.value.height = window.innerHeight;\n  }\n}\n\nonMounted(async () => {\n  if (canvas.value) {\n    ctx.value = canvas.value.getContext(\"2d\");\n    resizeCanvas();\n  }\n  initParticlePool();\n\n  animate();\n  useListener(window, \"resize\", resizeCanvas);\n});\n\nonUnmounted(() => {\n  cancelAnimationFrame(animationFrame);\n});\n\ndefineExpose(\n  reactive({\n    createFirework,\n  }),\n);\n</script>\n\n<template>\n  <canvas ref=\"canvas\" :class=\"className\"></canvas>\n</template>\n"
    },
    {
      "target": "components/fireworks/index.ts",
      "content": "import { type App, type ComponentPublicInstance, createApp, createVNode, render } from 'vue'\n\nimport { isClient, noop } from '@pocui/utils'\nimport Component from './fireworks.vue'\nimport { proxyExposed } from '@pocui/hooks'\n\nexport interface FireworksInstance extends ComponentPublicInstance {\n  createFirework: () => void\n}\n\nexport class FireworksManager {\n  open: () => void\n\n  private _mountedApp: App<unknown> | null\n\n  private _instance: FireworksInstance | null\n\n  private _innerApp: App<unknown> | null\n\n  private _container: HTMLElement | null\n\n  private _wrapper: HTMLElement | SVGElement | null\n\n  private _mountedEl: HTMLElement | null\n\n  constructor() {\n    this._mountedApp = null\n    this._instance = null\n    this._innerApp = null\n    this._container = null\n    this._wrapper = null\n    this._mountedEl = null\n\n    this.open = () => {\n      if (!isClient) {\n        return noop\n      }\n      const fireworks = this._getInstance()!\n      fireworks.createFirework()\n    }\n  }\n\n  private _getInstance() {\n    if (!this._instance && isClient) {\n      if (!this._mountedApp) {\n        console.warn('[pocui:Fireworks]: 应用程序丢失,插件可能未安装.')\n\n        this._container = document.createElement('div')\n        this._innerApp = createApp(Component)\n        this._instance = this._innerApp.mount(this._container) as FireworksInstance\n      } else {\n        const vnode = createVNode(Component, null, null)\n\n        this._container = document.createElement('div')\n        vnode.appContext = this._mountedApp._context\n\n        render(vnode, this._container)\n\n        this._instance = proxyExposed<FireworksInstance>(vnode)\n      }\n\n      this._mountedEl = this._container.firstElementChild as HTMLElement\n      ;(this._wrapper || document.body).appendChild(this._mountedEl)\n    }\n\n    return this._instance\n  }\n}\n\nexport const Fireworks = new FireworksManager()\n"
    },
    { "target": "components/fireworks/props.ts", "content": "" }
  ],
  "dependencies": ["vue", "@pocui/utils", "@pocui/hooks", "@pocui/config"],
  "registryDependencies": ["fireworks.scss"],
  "categories": ["other"],
  "meta": { "isReferenceOnly": false }
}
