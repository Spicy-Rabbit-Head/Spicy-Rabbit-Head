{
  "name": "pagination",
  "type": "registry:components",
  "description": "采用分页的形式分隔长列表，每次只加载一个页面。",
  "files": [
    {
      "target": "components/pagination/index.ts",
      "content": "export { default as Pagination } from './pagination'\nexport { paginationProps } from './props'\n\nexport type { PaginationProps, PaginationCProps } from './props'\nexport type { PaginationPlugin, PaginationExposed } from './symbol'\n"
    },
    {
      "target": "components/pagination/pagination.tsx",
      "content": "import { Icon } from '@/components/icon'\nimport { NumberInput } from '@/components/number-input'\nimport { Select } from '@/components/select'\n\nimport {\n  SlotsType,\n  Transition,\n  computed,\n  defineComponent,\n  nextTick,\n  onMounted,\n  onUpdated,\n  reactive,\n  ref,\n  renderSlot,\n  toRef,\n  watch\n} from 'vue'\n\nimport {\n  createSizeProp,\n  emitEvent,\n  getCountWord,\n  getCountWordOnly,\n  useIcons,\n  useLocale,\n  useNameHelper,\n  useProps\n} from '@pocui/config'\nimport { createSlotRender, useModifier } from '@pocui/hooks'\nimport { boundRange, decide, isClient, isNullish, range } from '@pocui/utils'\n\nimport { paginationProps } from './props'\n\nconst enum PaginationMode {\n  LEFT = 'left',\n  CENTER = 'center',\n  RIGHT = 'right'\n}\n\nexport default defineComponent({\n  name: 'Pagination',\n  description:'采用分页的形式分隔长列表，每次只加载一个页面。',\n  categories: ['navigation'],\n  props: paginationProps,\n  emits: ['update:active', 'update:page-size'],\n  slots: Object as SlotsType<{\n    prev?(props: { disabled: boolean }): any,\n    next?(props: { disabled: boolean }): any,\n    item?(props: { page: number, disabled: boolean, active: boolean }): any,\n    'prev-jump'(): any,\n    prevJump(): any,\n    'next-jump'(): any,\n    nextJump(): any\n  }>,\n  setup(_props, { slots, emit, expose }) {\n    const props = useProps('pagination', _props, {\n      size: createSizeProp(),\n      locale: null,\n      total: {\n        default: 0,\n        validator: value => value >= 0,\n        static: true\n      },\n      noBorder: false,\n      background: false,\n      pageSize: {\n        default: 10,\n        validator: value => value > 0\n      },\n      sizeOptions: () => [10, 20, 50, 100],\n      itemCount: {\n        default: 7,\n        validator: value => Number.isInteger(value) && value > 6\n      },\n      active: {\n        default: 1,\n        validator: value => value > 0,\n        static: true\n      },\n      disabled: false,\n      disableItem: {\n        default: () => false,\n        isFunc: true\n      },\n      turnPageCount: 5,\n      itemUnit: null,\n      plugins: {\n        default: () => [],\n        validator: value => Array.isArray(value)\n      },\n      noTitle: false,\n      itemTag: 'li',\n      listTag: null\n    })\n\n    const nh = useNameHelper('pagination')\n    const icons = useIcons()\n    const midPagers = ref<number[]>([])\n    const currentActive = ref(props.active)\n    const currentPageSize = ref(props.pageSize)\n    const mode = ref(PaginationMode.LEFT)\n    const inPrevEllipsis = ref(false)\n    const inNextEllipsis = ref(false)\n    const jumpValue = ref(props.active)\n    const itemElList = reactive<HTMLElement[]>([])\n\n    const locale = useLocale('pagination', toRef(props, 'locale'))\n\n    const { target: wrapper } = useModifier({\n      passive: false,\n      onKeyDown: (event, modifier) => {\n        if (props.disabled) return\n\n        decide(\n          [\n            [\n              () => modifier.up || modifier.down || modifier.left || modifier.right,\n              () => {\n                const sign = modifier.up || modifier.left ? -1 : 1\n\n                if (isClient && document.activeElement) {\n                  const index = itemElList.findIndex(el => el === document.activeElement)\n\n                  if (!~index) return\n\n                  const target = itemElList[boundRange(index + sign, 0, itemElList.length - 1)]\n\n                  target.focus()\n                }\n              }\n            ],\n            [\n              () => modifier.enter || modifier.space,\n              () => {\n                if (document && document.activeElement) {\n                  const index = itemElList.findIndex(el => el === document.activeElement)\n\n                  if (!~index) {\n                    const activeClass = nh.bem('item', 'active')\n                    const activeEl = itemElList.find(el => el.classList.contains(activeClass))\n\n                    activeEl?.focus()\n                  }\n                }\n              }\n            ]\n          ],\n          {\n            beforeMatchAny: () => event.preventDefault(),\n            afterMatchAny: modifier.resetAll\n          }\n        )\n      }\n    })\n\n    const className = computed(() => {\n      return {\n        [nh.b()]: true,\n        [nh.bs('vars')]: true,\n        [nh.in()]: props.inherit,\n        [nh.bm(props.size)]: props.size !== 'default',\n        [nh.bm('background')]: props.background,\n        [nh.bm('no-border')]: props.noBorder,\n        [nh.bm('disabled')]: props.disabled\n      }\n    })\n    const pagerCount = computed(() => {\n      return Math.ceil(props.total / (currentPageSize.value || 1)) || 1\n    })\n    const useEllipsis = computed(() => pagerCount.value > props.itemCount)\n    const disabledPrev = computed(() => {\n      const count = queryEnabledActive(1, 1)\n\n      return count >= pagerCount.value || currentActive.value === count\n    })\n    const disabledNext = computed(() => {\n      const count = queryEnabledActive(pagerCount.value, -1)\n\n      return count <= 1 || currentActive.value === count\n    })\n    const prevTurnPageTitle = computed(() => {\n      return `${locale.value.prev} ${getCountWord(locale.value.page, props.turnPageCount)}`\n    })\n    const nextTurnPageTitle = computed(() => {\n      return `${locale.value.next} ${getCountWord(locale.value.page, props.turnPageCount)}`\n    })\n    const prevEllipsisTarget = computed(() => {\n      if (!useEllipsis.value) return 0\n\n      let active = queryEnabledActive(currentActive.value - props.turnPageCount, -1)\n\n      if (active < 1) {\n        active = queryEnabledActive(1, 1)\n\n        if (active >= currentActive.value) return 0\n      }\n\n      return active\n    })\n    const nextEllipsisTarget = computed(() => {\n      if (!useEllipsis.value) return 0\n\n      let active = queryEnabledActive(currentActive.value + props.turnPageCount, 1)\n\n      if (active > pagerCount.value) {\n        active = queryEnabledActive(pagerCount.value, -1)\n\n        if (active <= currentActive.value) return 0\n      }\n\n      return active\n    })\n    const sizeObjectOptions = computed(() => {\n      return props.sizeOptions.map(size => {\n        return {\n          value: size,\n          label: `${size} ${locale.value.perPage}`\n        }\n      })\n    })\n    const pluginOrders = computed(() => {\n      const plugins = props.plugins\n      const pagerPosition = plugins.findIndex(isNullish)\n\n      return {\n        total: plugins.findIndex(p => p === 'total') - pagerPosition,\n        size: plugins.findIndex(p => p === 'size') - pagerPosition,\n        jump: plugins.findIndex(p => p === 'jump') - pagerPosition\n      }\n    })\n    const jumpInputWidth = computed(() => {\n      if (!props.plugins.includes('jump')) return 0\n\n      let pageCount: number\n\n      if (props.plugins.includes('size')) {\n        pageCount = Math.ceil(props.total / (Math.min(...props.sizeOptions) || 10))\n      } else {\n        pageCount = Math.ceil(props.total / (props.pageSize || 10))\n      }\n\n      return pageCount.toString().length * 10 + 30\n    })\n\n    watch(\n      () => props.active,\n      value => {\n        changeActive(value, false)\n      }\n    )\n    watch(() => props.itemCount, computePagers)\n    watch(pagerCount, computePagers)\n    watch(\n      () => props.pageSize,\n      value => {\n        currentPageSize.value = value\n      }\n    )\n    watch(currentPageSize, (value, prevValue) => {\n      emit('update:page-size', value)\n      emitEvent(props.onPageSizeChange, value)\n\n      // 按当前页的第一条数据计算新的页码\n      const anchor = Math.ceil((prevValue * (currentActive.value - 1) + 1) / value)\n\n      let active = queryEnabledActive(anchor, 1)\n\n      if (active > pagerCount.value) {\n        active = queryEnabledActive(anchor - 1, -1)\n\n        if (active < 1) active = 0\n      }\n\n      currentActive.value = active\n    })\n\n    expose({\n      changeActive,\n      handlePrev,\n      handleNext\n    })\n\n    onMounted(() => {\n      nextTick(computePagers)\n    })\n\n    onUpdated(() => {\n      if (!wrapper.value) return\n\n      itemElList.length = 0\n      itemElList.push(\n        ...Array.from(\n          wrapper.value.querySelectorAll<HTMLElement>(`${nh.cbe('item')}:not(${nh.cbem('item', 'disabled')})`)\n        )\n      )\n    })\n\n    function queryEnabledActive(active: number, step: number) {\n      step = step / Math.abs(step)\n\n      while (props.disableItem(active)) {\n        active += step\n\n        if (active < 1 || active > pagerCount.value) break\n      }\n\n      return active\n    }\n\n    function handleChange(value: number) {\n      if (currentActive.value === value) return\n\n      currentActive.value = value\n      jumpValue.value = value\n\n      computePagers()\n      emit('update:active', value)\n      emitEvent(props.onChange, value)\n    }\n\n    function changeActive(active: number, focus = true) {\n      active = parseInt(active.toString())\n\n      if (props.disabled || active < 1 || active > pagerCount.value || props.disableItem(active)) {\n        return\n      }\n\n      handleChange(active)\n\n      if (isClient && focus) {\n        const activeEl = itemElList.find(el => el === document.activeElement)\n\n        activeEl?.blur()\n        nextTick(() => {\n          itemElList.find(el => el.tabIndex >= 0)?.focus()\n        })\n      }\n    }\n\n    function handlePrev() {\n      if (!disabledPrev.value && !props.disabled) {\n        const active = queryEnabledActive(currentActive.value - 1, -1)\n\n        if (active >= 1) changeActive(active)\n      }\n    }\n\n    function handleNext() {\n      if (!disabledNext.value && !props.disabled) {\n        const active = queryEnabledActive(currentActive.value + 1, 1)\n\n        if (active <= pagerCount.value) changeActive(active)\n      }\n    }\n\n    function computePagers() {\n      let pagers: number[]\n\n      if (pagerCount.value <= props.itemCount) {\n        // 未超过最大值，显示所有页号\n        pagers = range(pagerCount.value)\n      } else {\n        const numberCount = props.itemCount - 2 // 显示为数字的页号\n        const criticalCount = Math.ceil(props.itemCount / 2) // 切换模式的关键计数\n\n        if (currentActive.value < criticalCount) {\n          // 出现后侧一个省略号，前侧连续\n          pagers = range(numberCount)\n          pagers.push(pagerCount.value)\n\n          mode.value = PaginationMode.LEFT\n        } else if (currentActive.value <= pagerCount.value - criticalCount) {\n          // 出现两个省略号，中间连续\n          let count = numberCount - 2\n\n          // 保持中间数字的页号数目为单数\n          if (count % 2 === 0) {\n            count -= 1\n          }\n\n          pagers = range(count, currentActive.value - (count - 1) / 2) // 同 Math.floor(count / 2)\n          pagers.unshift(1)\n          pagers.push(pagerCount.value)\n\n          mode.value = PaginationMode.CENTER\n        } else {\n          // 出现前侧一个省略号，后侧连续\n          pagers = range(numberCount, pagerCount.value - numberCount + 1)\n          pagers.unshift(1)\n\n          mode.value = PaginationMode.RIGHT\n        }\n      }\n\n      if (pagers.length === 1) {\n        midPagers.value = []\n      }\n\n      midPagers.value = pagers.slice(1, -1)\n    }\n\n    function enterPrevEllipsis() {\n      inPrevEllipsis.value = true\n    }\n\n    function leavePrevEllipsis() {\n      inPrevEllipsis.value = false\n    }\n\n    function clickPrevEllipsis() {\n      if (!props.disabled && prevEllipsisTarget.value) {\n        changeActive(prevEllipsisTarget.value)\n      }\n    }\n\n    function enterNextEllipsis() {\n      inNextEllipsis.value = true\n    }\n\n    function leaveNextEllipsis() {\n      inNextEllipsis.value = false\n    }\n\n    function clickNextEllipsis() {\n      if (!props.disabled && nextEllipsisTarget.value) {\n        changeActive(nextEllipsisTarget.value)\n      }\n    }\n\n    function handleJumpPage(active: number) {\n      active = Math.max(Math.min(parseInt(active.toString()), pagerCount.value), 1)\n\n      const originActive = active\n\n      if (active !== currentActive.value) {\n        const step = active > currentActive.value ? 1 : -1\n\n        active = queryEnabledActive(originActive, step)\n\n        if (step > 0 ? active > pagerCount.value : active < 1) {\n          active = queryEnabledActive(originActive, -step)\n\n          if (step > 0 ? active < 1 : active > pagerCount.value) {\n            active = 0\n          }\n        }\n\n        handleChange(active)\n      }\n\n      nextTick(() => {\n        jumpValue.value = currentActive.value\n      })\n    }\n\n    function renderPrev(Tag: any) {\n      const disabled = props.disabled || disabledPrev.value\n      const arrow = icons.value.angleLeft\n\n      return (\n        <Tag\n          ref={el => el && !disabledPrev.value && itemElList.push(el as any)}\n          class={[nh.be('item'), nh.bem('item', 'prev'), disabled ? nh.bem('item', 'disabled') : '']}\n          title={props.noTitle ? undefined : locale.value.prevPage}\n          role='menuitem'\n          tabindex='-1'\n          aria-label={locale.value.prevPage}\n          aria-hidden={disabled ? 'true' : undefined}\n          onClick={handlePrev}\n          onKeydownEnter={handlePrev}\n          onKeydownSpace={handlePrev}\n        >\n          {slots.prev ? renderSlot(slots, 'prev', { disabled }) : <Icon {...arrow} scale={+(arrow.scale || 1)}></Icon>}\n        </Tag>\n      )\n    }\n\n    function renderNext(Tag: any) {\n      const disabled = props.disabled || disabledNext.value\n      const arrow = icons.value.angleRight\n\n      return (\n        <Tag\n          ref={el => el && !disabledNext.value && itemElList.push(el as any)}\n          class={[nh.be('item'), nh.bem('item', 'next'), disabled ? nh.bem('item', 'disabled') : '']}\n          title={props.noTitle ? undefined : locale.value.nextPage}\n          role='menuitem'\n          tabindex='-1'\n          aria-label={locale.value.nextPage}\n          aria-hidden={disabled ? 'true' : undefined}\n          onClick={handleNext}\n          onKeydownEnter={handleNext}\n          onKeydownSpace={handleNext}\n        >\n          {slots.next ? renderSlot(slots, 'next', { disabled }) : <Icon {...arrow} scale={+(arrow.scale || 1)}></Icon>}\n        </Tag>\n      )\n    }\n\n    function renderPrevEllipsis(Tag: any) {\n      if (!useEllipsis.value || mode.value === PaginationMode.LEFT) return null\n\n      const disabled = props.disabled || !prevEllipsisTarget.value\n\n      return (\n        <Tag\n          ref={el => el && prevEllipsisTarget.value && itemElList.push(el as any)}\n          class={{\n            [nh.be('item')]: true,\n            [nh.bem('item', 'more')]: true,\n            [nh.bem('item', 'disabled')]: disabled\n          }}\n          title={props.noTitle ? undefined : prevTurnPageTitle.value}\n          role='menuitem'\n          tabindex='-1'\n          aria-label={prevTurnPageTitle.value}\n          onClick={clickPrevEllipsis}\n          onKeydownEnter={clickPrevEllipsis}\n          onKeydownSpace={clickPrevEllipsis}\n          onMouseenter={enterPrevEllipsis}\n          onMouseleave={leavePrevEllipsis}\n        >\n          {createSlotRender(slots, ['prev-jump', 'prevJump'], () => {\n            const arrow = icons.value.anglesLeft\n\n            return (\n              <Transition name={nh.ns('fade')}>\n                {!disabled && inPrevEllipsis.value\n                  ? (\n                    <Icon {...arrow} scale={+(arrow.scale || 1)}></Icon>\n                    )\n                  : (\n                    <Icon\n                      {...icons.value.ellipsis}\n                      scale={+(icons.value.ellipsis.scale || 1)}\n                      style='position: absolute'\n                    ></Icon>\n                    )}\n              </Transition>\n            )\n          })({\n            disabled,\n            entered: inPrevEllipsis.value\n          })}\n        </Tag>\n      )\n    }\n\n    function renderNextEllipsis(Tag: any) {\n      if (!useEllipsis.value || mode.value === PaginationMode.RIGHT) return null\n\n      const disabled = props.disabled || !nextEllipsisTarget.value\n\n      return (\n        <Tag\n          ref={el => el && nextEllipsisTarget.value && itemElList.push(el as any)}\n          class={{\n            [nh.be('item')]: true,\n            [nh.bem('item', 'more')]: true,\n            [nh.bem('item', 'disabled')]: disabled\n          }}\n          title={props.noTitle ? undefined : nextTurnPageTitle.value}\n          role='menuitem'\n          tabindex='-1'\n          aria-label={nextTurnPageTitle.value}\n          onClick={clickNextEllipsis}\n          onKeydownEnter={clickNextEllipsis}\n          onKeydownSpace={clickNextEllipsis}\n          onMouseenter={enterNextEllipsis}\n          onMouseleave={leaveNextEllipsis}\n        >\n          {createSlotRender(slots, ['next-jump', 'nextJump'], () => {\n            const arrow = icons.value.anglesRight\n\n            return (\n              <Transition name={nh.ns('fade')}>\n                {!disabled && inNextEllipsis.value\n                  ? (\n                    <Icon {...arrow} scale={+(arrow.scale || 1)}></Icon>\n                    )\n                  : (\n                    <Icon\n                      {...icons.value.ellipsis}\n                      scale={+(icons.value.ellipsis.scale || 1)}\n                      style='position: absolute'\n                    ></Icon>\n                    )}\n              </Transition>\n            )\n          })({\n            disabled: !nextEllipsisTarget.value,\n            entered: inNextEllipsis.value\n          })}\n        </Tag>\n      )\n    }\n\n    function renderItem(Tag: any, page: number) {\n      const disabled = props.disabled || props.disableItem(page)\n      const active = currentActive.value === page\n\n      return (\n        <Tag\n          ref={el => el && itemElList.push(el as any)}\n          class={{\n            [nh.be('item')]: true,\n            [nh.bem('item', 'disabled')]: disabled,\n            [nh.bem('item', 'active')]: active\n          }}\n          title={props.noTitle ? undefined : page}\n          role='menuitemradio'\n          tabindex={active ? '0' : '-1'}\n          aria-posinset={page}\n          aria-setsize={pagerCount.value}\n          aria-disabled={disabled ? 'true' : undefined}\n          onClick={() => changeActive(page)}\n          onKeydownEnter={() => changeActive(page)}\n          onKeydownSpace={() => changeActive(page)}\n        >\n          {slots.item\n            ? renderSlot(slots, 'item', {\n              page,\n              disabled,\n              active\n            })\n            : `${page}`}\n        </Tag>\n      )\n    }\n\n    function renderTotalPlugin() {\n      if (!props.plugins.includes('total')) return null\n\n      return (\n        <div\n          class={[nh.be('total'), pluginOrders.value.total < 0 && nh.bem('total', 'prefix')]}\n          style={{ order: pluginOrders.value.total }}\n        >\n          {`${locale.value.total} ${getCountWord(props.itemUnit ?? locale.value.itemUnit, props.total)}`}\n        </div>\n      )\n    }\n\n    function renderSizePlugin() {\n      if (!props.plugins.includes('size')) return null\n\n      return (\n        <div\n          class={[nh.be('size'), pluginOrders.value.size < 0 && nh.bem('size', 'prefix')]}\n          style={{ order: pluginOrders.value.size }}\n        >\n          <Select\n            v-model:value={currentPageSize.value}\n            inherit\n            class={nh.be('size-select')}\n            options={sizeObjectOptions.value}\n            filter={false}\n            multiple={false}\n            clearable={false}\n          ></Select>\n        </div>\n      )\n    }\n\n    function renderJumpPlugin() {\n      if (!props.plugins.includes('jump')) return null\n\n      return (\n        <div\n          class={[nh.be('jump'), pluginOrders.value.jump < 0 && nh.bem('jump', 'prefix')]}\n          style={{ order: pluginOrders.value.jump }}\n        >\n          {locale.value.jumpTo}\n          <NumberInput\n            v-model:value={jumpValue.value}\n            inherit\n            class={nh.be('jump-input')}\n            clearable={false}\n            sync={false}\n            style={{ width: `${jumpInputWidth.value}px` }}\n            onChange={handleJumpPage}\n          ></NumberInput>\n          {getCountWordOnly(locale.value.page, 1)}\n        </div>\n      )\n    }\n\n    return () => {\n      const ItemTag = props.itemTag || 'li'\n      const ListTag = (props.listTag as any) || (ItemTag === 'li' ? 'ul' : 'div')\n\n      return (\n        <div class={className.value}>\n          <ListTag\n            ref={wrapper}\n            class={nh.be('list')}\n            role='menubar'\n            aria-label='Pagination'\n            aria-disabled={props.disabled ? 'true' : undefined}\n          >\n            {renderPrev(ItemTag)}\n            {renderItem(ItemTag, 1)}\n            {renderPrevEllipsis(ItemTag)}\n            {midPagers.value.map(page => renderItem(ItemTag, page))}\n            {renderNextEllipsis(ItemTag)}\n            {pagerCount.value > 1 && renderItem(ItemTag, pagerCount.value)}\n            {renderNext(ItemTag)}\n          </ListTag>\n          {renderTotalPlugin()}\n          {renderSizePlugin()}\n          {renderJumpPlugin()}\n        </div>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/pagination/props.ts",
      "content": "import { booleanProp, buildProps, eventProp, localeProp, sizeProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { PaginationPlugin } from './symbol'\n\nexport const paginationProps = buildProps({\n  size: sizeProp,\n  locale: localeProp('pagination'),\n  total: Number,\n  noBorder: booleanProp,\n  background: booleanProp,\n  pageSize: Number,\n  sizeOptions: Array as PropType<number[]>,\n  itemCount: Number,\n  active: Number,\n  disabled: booleanProp,\n  disableItem: Function as PropType<(page: number) => boolean>,\n  turnPageCount: Number,\n  itemUnit: String,\n  plugins: Array as PropType<(PaginationPlugin | undefined | null)[]>,\n  noTitle: booleanProp,\n  itemTag: String,\n  listTag: String,\n  onChange: eventProp<(page: number) => void>(),\n  onPageSizeChange: eventProp<(size: number) => void>()\n})\n\nexport type PaginationProps = ExtractPropTypes<typeof paginationProps>\nexport type PaginationCProps = ConfigurableProps<PaginationProps, 'total'>\n"
    },
    {
      "target": "components/pagination/symbol.ts",
      "content": "import type { ComponentPublicInstance } from 'vue'\n\nexport type PaginationPlugin = 'total' | 'jump' | 'size'\n\nexport interface PaginationExposed extends ComponentPublicInstance {\n  changeActive: (active: number, focus?: boolean) => void,\n  handlePrev: () => void,\n  handleNext: () => void\n}\n"
    }
  ],
  "dependencies": ["@pocui/hooks", "@pocui/utils", "@pocui/config", "vue"],
  "registryDependencies": ["pagination.scss", "icon", "number-input", "select"],
  "categories": ["navigation"],
  "meta": { "isReferenceOnly": false }
}
