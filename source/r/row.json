{
  "name": "row",
  "type": "registry:component",
  "description": "一维栅格布局组件，基于列来定义区域块，用于快捷地创建稳健的布局。",
  "files": [
    {
      "target": "components/row/column.ts",
      "content": "import { computed, defineComponent, h, inject, provide } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { columnProps } from './props'\nimport { ROW_STATE, breakPoints } from './symbol'\n\nimport type { CSSProperties } from 'vue'\n\nimport type { ClassType } from '@pocui/config'\n\ntype LayerProp = 'span' | 'offset' | 'pull' | 'push' | 'order'\n\nconst colProps: LayerProp[] = ['span', 'offset', 'pull', 'push', 'order']\n\nexport default defineComponent({\n  name: 'Column',\n  description:'栅格列组件，用于在栅格系统中定义列布局',\n  categories: ['layout'],\n  props: columnProps,\n  setup(_props, { slots }) {\n    const props = useProps('column', _props, {\n      tag: 'div',\n      span: 24,\n      offset: null,\n      push: null,\n      pull: null,\n      order: null,\n      xs: null,\n      sm: null,\n      md: null,\n      lg: null,\n      xl: null,\n      xxl: null,\n      flex: null,\n      useFlex: null\n    })\n\n    const rowState = inject(ROW_STATE, null)\n    const nh = useNameHelper('column')\n\n    provide(ROW_STATE, null!)\n\n    const className = computed(() => {\n      const columnFlex = (props.useFlex || rowState?.columnFlex) && {\n        ...(rowState?.columnFlex || {}),\n        ...(props.useFlex\n          ? props.useFlex === true\n            ? {\n                justify: 'start',\n                align: 'top'\n              }\n            : props.useFlex\n          : {})\n      }\n      const className: ClassType = [\n        nh.b(),\n        nh.bs('vars'),\n        {\n          [nh.bm('flex')]: columnFlex,\n          [nh.inc()]: rowState || props.inherit\n        }\n      ]\n\n      if (columnFlex) {\n        columnFlex.justify && className.push(nh.bm(columnFlex.justify))\n        columnFlex.align && className.push(nh.bm(columnFlex.align))\n      }\n\n      colProps.forEach(prop => {\n        if (typeof props[prop] === 'number') {\n          className.push(prop === 'span' ? nh.bm(`${props[prop]}`) : nh.bm(`${prop}-${props[prop]}`))\n        }\n      })\n\n      breakPoints.forEach(size => {\n        const sizeProp = props[size]\n\n        if (!sizeProp && sizeProp !== 0) return\n\n        if (typeof sizeProp === 'number') {\n          className.push(nh.bm(`${size}-${sizeProp}`))\n        } else if (typeof sizeProp === 'object') {\n          colProps.forEach(prop => {\n            const value = sizeProp[prop]\n\n            if (!value && value !== 0) return\n\n            className.push(prop === 'span' ? nh.bm(`${value}`) : nh.bm(`${prop}-${value}`))\n          })\n        }\n      })\n\n      return className\n    })\n    const style = computed(() => {\n      const flex = props.flex\n      const style: CSSProperties = {}\n\n      if (rowState) {\n        if (typeof rowState.gap === 'number') {\n          style.paddingInlineStart = style.paddingInlineEnd = `${rowState.gap / 2}px`\n        } else if (Array.isArray(rowState.gap)) {\n          style.paddingInlineStart = style.paddingInlineEnd = `${rowState.gap[0] / 2}px`\n        }\n      }\n\n      if (flex) {\n        if (typeof flex === 'number') {\n          style.flex = `${flex} ${flex} auto`\n        } else if (typeof flex === 'string') {\n          if (/^\\d+\\s\\d+\\s\\d+(\\w+)?$/.test(flex)) {\n            style.flex = flex\n          } else {\n            style.flex = flex === 'auto' ? '1 1 auto' : `0 0 ${flex}`\n          }\n        }\n      }\n\n      return style\n    })\n\n    return () =>\n      h(\n        props.tag || 'div',\n        {\n          class: className.value,\n          style: style.value\n        },\n        {\n          default: () => slots.default && slots.default()\n        }\n      )\n  }\n})\n"
    },
    {
      "target": "components/row/index.ts",
      "content": "import Row from './row'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Row }\nexport { rowProps } from './props'\n\nexport type RowExposed = ComponentPublicInstance & InstanceType<typeof Row>\n\nexport type { RowProps, RowCProps } from './props'\nexport type { RowGridJustify, RowGridAlign, ColumnFlex } from './symbol'\n"
    },
    {
      "target": "components/row/props.ts",
      "content": "import { buildProps } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ColumnFlex, ColumnOptions, RowGridAlign, RowGridJustify } from './symbol'\n\nexport const rowProps = buildProps({\n  tag: String,\n  gap: [Number, Array] as PropType<number | number[]>,\n  justify: String as PropType<RowGridJustify>,\n  align: String as PropType<RowGridAlign>,\n  columnFlex: {\n    type: [Boolean, Object] as PropType<boolean | Partial<ColumnFlex>>,\n    default: null\n  }\n})\n\nexport type RowProps = ExtractPropTypes<typeof rowProps>\nexport type RowCProps = ConfigurableProps<RowProps>\n\nconst mediaProp = [Number, Object] as PropType<number | ColumnOptions>\n\nexport const columnProps = buildProps({\n  tag: String,\n  span: Number,\n  offset: Number,\n  push: Number,\n  pull: Number,\n  order: Number,\n  xs: mediaProp,\n  sm: mediaProp,\n  md: mediaProp,\n  lg: mediaProp,\n  xl: mediaProp,\n  xxl: mediaProp,\n  flex: [Number, String],\n  useFlex: {\n    type: [Boolean, Object] as PropType<boolean | Partial<ColumnFlex>>,\n    default: null\n  }\n})\n\nexport type ColumnProps = ExtractPropTypes<typeof columnProps>\nexport type ColumnCProps = ConfigurableProps<ColumnProps>\n"
    },
    {
      "target": "components/row/row.ts",
      "content": "import { computed, defineComponent, h, provide, reactive, toRef } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { isNumber } from '@pocui/utils'\n\nimport { rowProps } from './props'\n\nimport { ROW_STATE } from './symbol'\n\nimport type { ColumnFlex, RowGridAlign, RowGridJustify, RowState } from './symbol'\n\nconst justifyList = Object.freeze<RowGridJustify[]>([\n  'start',\n  'end',\n  'center',\n  'space-around',\n  'space-between',\n  'space-evenly'\n])\nconst alignList = Object.freeze<RowGridAlign[]>(['top', 'middle', 'bottom', 'stretch'])\n\nexport default defineComponent({\n  name: 'Row',\n  description:'一维栅格布局组件，基于列来定义区域块，用于快捷地创建稳健的布局。',\n  categories: ['layout'],\n  props: rowProps,\n  setup(_props, { slots }) {\n    const props = useProps('row', _props, {\n      tag: 'div',\n      gap: 0,\n      justify: {\n        default: 'start',\n        validator: value => justifyList.includes(value)\n      },\n      align: {\n        default: 'top',\n        validator: value => alignList.includes(value)\n      },\n      columnFlex: false\n    })\n\n    const nh = useNameHelper('row')\n\n    const className = computed(() => {\n      return [\n        nh.b(),\n        nh.bs('vars'),\n        nh.bm(props.justify),\n        nh.bm(props.align),\n        {\n          [nh.inc()]: props.inherit\n        }\n      ]\n    })\n    const style = computed(() => {\n      if (!props.gap) return null\n\n      if (isNumber(props.gap)) {\n        return {\n          [nh.cv('h-gap')]: `${props.gap}px`\n        }\n      }\n\n      if (Array.isArray(props.gap)) {\n        const [horizontal, vertical] = props.gap\n\n        return {\n          [nh.cv('h-gap')]: `${horizontal}px`,\n          [nh.cv('v-gap')]: `${vertical}px`\n        }\n      }\n\n      return null\n    })\n    const columnFlex = computed<false | ColumnFlex>(() => {\n      if (props.columnFlex === true) {\n        return {\n          justify: 'start',\n          align: 'top'\n        }\n      } else if (props.columnFlex) {\n        return {\n          justify: 'start',\n          align: 'top',\n          ...props.columnFlex\n        }\n      }\n\n      return false\n    })\n\n    provide<RowState>(\n      ROW_STATE,\n      reactive({\n        columnFlex,\n        gap: toRef(() => props.gap)\n      })\n    )\n\n    return () =>\n      h(\n        props.tag || 'div',\n        {\n          class: className.value,\n          style: style.value\n        },\n        {\n          default: () => slots.default && slots.default()\n        }\n      )\n  }\n})\n"
    },
    {
      "target": "components/row/symbol.ts",
      "content": "import type { InjectionKey } from 'vue'\n\nexport type BreakPoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport type RowGridJustify = 'start' | 'end' | 'center' | 'space-around' | 'space-between' | 'space-evenly'\nexport type RowGridAlign = 'top' | 'middle' | 'bottom' | 'stretch'\n\nexport interface ColumnFlex {\n  justify: RowGridJustify,\n\n  align: RowGridAlign\n}\n\nexport interface RowState {\n  columnFlex: false | ColumnFlex,\n\n  gap: number | number[]\n}\n\nexport interface ColumnOptions {\n  span?: number,\n\n  offset?: number,\n\n  pull?: number,\n\n  push?: number,\n\n  order?: number\n}\n\nexport const breakPoints = Object.freeze<BreakPoint[]>(['xs', 'sm', 'md', 'lg', 'xl', 'xxl'])\n\nexport const ROW_STATE: InjectionKey<RowState> = Symbol('ROW_STATE')\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["row.scss"],
  "categories": ["layout"],
  "meta": { "isReferenceOnly": false }
}
