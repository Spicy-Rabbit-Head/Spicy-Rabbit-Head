{
  "name": "form",
  "type": "registry:component",
  "description": "用于需要收集、验证一些信息的时候，快速创建表单域。",
  "files": [
    {
      "target": "components/form/form-item.vue",
      "content": "<script setup lang=\"ts\">\nimport { Column } from '@/components/column'\nimport { Icon } from '@/components/icon'\nimport { Tooltip } from '@/components/tooltip'\n\nimport { computed, inject, onBeforeUnmount, onMounted, provide, ref, toRef, watch } from 'vue'\n\nimport {\n  makeSentence,\n  useIcons,\n  useLocale,\n  useNameHelper,\n  useProps,\n  useWordSpace\n} from '@pocui/config'\nimport { useDisplay } from '@pocui/hooks'\nimport { createEventEmitter, getGlobalCount, isFunction, isNullish, isObject } from '@pocui/utils'\nimport { enforce } from '@pocui/validation'\n\nimport { getValueByPath, setValueByPath } from './helper'\nimport { formItemProps } from './props'\nimport { FIELD_OPTIONS, FORM_ACTIONS, FORM_FIELDS, FORM_PROPS } from './symbol'\n\nimport { validate as asyncValidate } from './validator'\n\nimport type { Rule } from './validator'\nimport type { ComponentState } from '@pocui/config'\n\ndefineOptions({ name: 'FormItem',\n  description:'单字段包装器，实现标签-控件-提示三件套及字段级验证。',\n  categories: ['form'] })\n\nconst nh = useNameHelper('form')\nconst _props = defineProps(formItemProps)\nconst props = useProps('formItem', _props, {\n  locale: null,\n  label: {\n    default: '',\n    static: true\n  },\n  prop: {\n    default: '',\n    static: true\n  },\n  name: {\n    default: '',\n    static: true\n  },\n  rules: () => [],\n  validator: null,\n  labelWidth: null,\n  required: false,\n  htmlFor: {\n    default: null,\n    static: true\n  },\n  errorTransition: () => nh.ns('fade'),\n  defaultValue: {\n    default: null,\n    static: true\n  },\n  hideErrorTip: false,\n  validateAll: null,\n  hideAsterisk: null,\n  hideLabel: null,\n  action: false,\n  help: '',\n  pure: false,\n  span: 24,\n  offset: null,\n  push: null,\n  pull: null,\n  order: null,\n  xs: null,\n  sm: null,\n  md: null,\n  lg: null,\n  xl: null,\n  xxl: null,\n  flex: null\n})\n\nconst slots = defineSlots<{\n  default(): any,\n  help(): any,\n  label(): any,\n  error(props: { tip: string }): any\n}>()\n\nconst formProps = inject(FORM_PROPS, {})\nconst formActions = inject(FORM_ACTIONS, null)\nconst formFields = inject(FORM_FIELDS, null)\nconst emitter = createEventEmitter()\n\nconst locale = useLocale('form', toRef(props, 'locale'))\nconst icons = useIcons()\nconst wordSpace = useWordSpace()\n\nconst idIndex = `${getGlobalCount()}`\n\nconst initValue = ref(props.defaultValue)\nconst isError = ref(false)\nconst errorTip = ref('')\nconst validating = ref(false)\nconst disabledValidate = ref(false)\nconst labelWidth = ref(0)\n\nconst placeholder = useDisplay(() => {\n  if (placeholder.value) {\n    labelWidth.value = placeholder.value.offsetWidth\n  }\n})\n\nconst labelId = computed(() => nh.bs(`${idIndex}__label`))\nconst isRequired = computed(() => formProps.allRequired || props.required)\nconst requiredTip = computed(() => {\n  return makeSentence(`${props.label || props.prop} ${locale.value.notNullable}`, wordSpace.value)\n})\nconst allRules = computed(() => {\n  if (!props.prop) return []\n\n  const requiredRules: Rule[] = isRequired.value\n    ? [\n        {\n          field: props.prop,\n          test: (value: unknown) => enforce(value).isNotBlank(),\n          message: requiredTip.value\n        } as Rule\n      ]\n    : []\n\n  let selfRules = (Array.isArray(props.rules) ? props.rules : [props.rules]) as Rule[]\n  selfRules = selfRules.map((rule: any) => {\n    return {\n      field: props.prop,\n      ...rule\n    }\n  })\n\n  let formRules: Rule[] = []\n\n  if (formProps.rules) {\n    formRules = (formProps.rules.filter((rule: Rule) => rule.field === props.prop) as Rule[]) ?? []\n  }\n\n  return requiredRules.concat(selfRules, formRules)\n})\nconst currentValue = computed(getValue)\nconst useAsterisk = computed(() => {\n  if (props.hideAsterisk === true || formProps.hideAsterisk) {\n    return false\n  }\n\n  // for (const rule of allRules.value) {\n  //   if (rule.required) return true\n  // }\n\n  return isRequired.value\n})\nconst hideLabel = computed(() => props.action || props.hideLabel === true || formProps.hideLabel)\nconst hasLabel = computed(() => !(hideLabel.value || !(props.label || slots.label)))\nconst labelAlign = computed(() => formProps.labelAlign)\nconst computedLabelWidth = computed(() => {\n  if (labelAlign.value) {\n    return getLabelWidth(\n      labelAlign.value === 'top' ? 0 : hideLabel.value ? 0 : props.labelWidth || formProps.labelWidth || 80\n    )\n  }\n\n  return getLabelWidth(hideLabel.value ? 0 : props.labelWidth || 80)\n})\n\nconst className = computed(() => {\n  return {\n    [nh.be('item')]: true,\n    [nh.bs('vars')]: true,\n    [nh.bem('item', 'inherit')]: formFields || props.inherit,\n    [nh.bem('item', 'required')]: !formProps.hideAsterisk && useAsterisk.value,\n    [nh.bem('item', 'error')]: isError.value,\n    [nh.bem('item', 'action')]: props.action,\n    [nh.bem('item', 'padding')]: formProps.inline && labelAlign.value === 'top' && !hasLabel.value\n  }\n})\nconst controlStyle = computed(() => {\n  return {\n    width: labelAlign.value === 'top' ? undefined : `calc(100% - ${computedLabelWidth.value}px)`,\n    marginLeft: hasLabel.value || labelAlign.value === 'top' ? undefined : `${computedLabelWidth.value}px`\n  }\n})\nconst inputValue = computed(() => {\n  const value = currentValue.value\n\n  if (Array.isArray(value) || isObject(value)) {\n    return JSON.stringify(value)\n  }\n\n  return value\n})\nconst columnFlex = computed(() => {\n  return {\n    justify: props.action ? 'center' : 'start',\n    align: 'middle'\n  } as const\n})\n\nconst instances = new Set<any>()\n\nconst fieldObject = Object.freeze({\n  prop: computed(() => props.prop),\n  idFor: computed(() => props.prop),\n  labelId,\n  state: computed<ComponentState>(() => (isError.value ? 'error' : 'default')),\n  disabled: computed(() => !!formProps.disabled),\n  loading: computed(() => !!formProps.loading),\n  size: computed(() => formProps.size || 'default'),\n  emitter,\n  labelWidth,\n  validate,\n  clearError,\n  reset,\n  getValue,\n  setValue,\n  sync: (instance: any) => {\n    if (instances.size) {\n      console.warn('[pocui:Form]: FormItem 下只能有一个控制组件.')\n    }\n\n    instances.add(instance)\n  },\n  unSync: (instance: any) => {\n    instances.delete(instance)\n  }\n})\n\nprovide(FIELD_OPTIONS, fieldObject)\n\nwatch(\n  () => props.defaultValue,\n  value => {\n    initValue.value = value\n  }\n)\n\nonMounted(() => {\n  const value = currentValue.value\n\n  if (isNullish(initValue.value)) {\n    initValue.value = Array.isArray(value) ? Array.from(value) : value\n  }\n\n  if (formFields) {\n    formFields.add(fieldObject)\n  }\n})\n\nonBeforeUnmount(() => {\n  if (formFields) {\n    formFields.delete(fieldObject)\n  }\n})\n\ndefineExpose({\n  isError,\n  inputValue,\n  computedLabelWidth\n})\n\nfunction getLabelWidth(width: number | 'auto') {\n  return width === 'auto' ? formActions?.getLabelWidth() || 80 : width\n}\n\nlet initialized = false\n\nfunction getValue(defaultValue: unknown = initValue.value) {\n  if (!formProps.model || !props.prop) return defaultValue\n\n  try {\n    const value = getValueByPath(formProps.model, props.prop, true)\n    initialized = true\n\n    return value\n  } catch (e) {\n    if (!initialized) {\n      setValueByPath(formProps.model, props.prop, defaultValue, false)\n      initialized = true\n    }\n\n    return defaultValue\n  }\n}\n\nfunction setValue(value: unknown, strict = false) {\n  if (!formProps.model || !props.prop) return\n\n  try {\n    return setValueByPath(formProps.model, props.prop, value, strict)\n  } catch (e) {}\n}\n\nfunction validate() {\n  return handleValidate()\n}\n\nfunction clearError() {\n  isError.value = false\n  errorTip.value = ''\n}\n\nfunction reset() {\n  clearError()\n\n  if (!formProps.model || !props.prop) return false\n\n  const value = currentValue.value\n\n  let resetValue: any\n\n  if (Array.isArray(value)) {\n    resetValue = Array.isArray(initValue.value) ? Array.from(initValue.value) : []\n  } else {\n    resetValue = isFunction(initValue.value) ? initValue.value() : initValue.value\n  }\n\n  return setValueByPath(formProps.model, props.prop, resetValue, true)\n}\n\nasync function handleValidate() {\n  if (disabledValidate.value) {\n    disabledValidate.value = false\n\n    return handleValidateEnd(void 0)\n  }\n\n  if (!props.prop || !formProps.model || validating.value) {\n    return handleValidateEnd(void 0)\n  }\n\n  validating.value = true\n\n  const value = currentValue.value\n  const useRules = allRules.value\n  const model = formProps.model\n\n  const errors = await asyncValidate(useRules, value, model, props.validator, locale.value.validateFail)\n\n  return handleValidateEnd(errors)\n}\n\nfunction handleValidateEnd(errors: string | undefined) {\n  validating.value = false\n\n  if (!errors) {\n    clearError()\n  } else {\n    isError.value = true\n    errorTip.value = errors\n  }\n\n  return errors\n}\n\nfunction handleLabelClick() {\n  emitter.emit('focus')\n}\n\nconst isNative = computed(() => !!(formProps.action && formProps.method))\n</script>\n\n<template>\n  <slot v-if=\"props.pure\"></slot>\n  <Column\n    v-else\n    v-bind=\"$attrs\"\n    :class=\"className\"\n    :inherit=\"props.inherit\"\n    role=\"group\"\n    tag=\"div\"\n    :span=\"props.span\"\n    :offset=\"props.offset\"\n    :push=\"props.push\"\n    :pull=\"props.pull\"\n    :order=\"props.order\"\n    :xs=\"props.xs\"\n    :sm=\"props.sm\"\n    :md=\"props.md\"\n    :lg=\"props.lg\"\n    :xl=\"props.xl\"\n    :xxl=\"props.xxl\"\n    :flex=\"props.flex\"\n    :use-flex=\"columnFlex\"\n  >\n    <input\n      v-if=\"isNative\"\n      type=\"hidden\"\n      :name=\"props.name || props.prop\"\n      :value=\"inputValue\"\n      style=\"display: none\"\n    />\n    <label\n      v-if=\"hasLabel\"\n      :id=\"labelId\"\n      :class=\"nh.be('label')\"\n      :style=\"{ width: labelAlign !== 'top' ? `${computedLabelWidth}px` : undefined }\"\n      :for=\"props.htmlFor || props.prop\"\n      @click=\"handleLabelClick\"\n    >\n      <Tooltip v-if=\"props.help || $slots.help\" transfer>\n        <template #trigger>\n          <Icon v-bind=\"icons.help\" :class=\"nh.be('help')\"></Icon>\n        </template>\n        <slot name=\"help\">\n          <div :class=\"nh.be('help-tip')\">\n            {{ props.help }}\n          </div>\n        </slot>\n      </Tooltip>\n      <slot name=\"label\">\n        {{ props.label + (formProps.labelSuffix || '') }}\n      </slot>\n    </label>\n    <div\n      :class=\"{\n        [nh.be('control')]: true,\n        [nh.bem('control', 'no-label')]: !hasLabel,\n        [nh.bem('control', 'action')]: props.action\n      }\"\n      role=\"alert\"\n      aria-relevant=\"all\"\n      :style=\"controlStyle\"\n    >\n      <slot></slot>\n      <Transition :name=\"props.errorTransition\">\n        <div v-if=\"!props.hideErrorTip && isError\" :class=\"nh.be('error-tip')\">\n          <slot name=\"error\" :tip=\"errorTip\">\n            {{ errorTip }}\n          </slot>\n        </div>\n      </Transition>\n    </div>\n  </Column>\n</template>\n"
    },
    {
      "target": "components/form/form-reset.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from '@/components/button'\n\nimport { computed, inject, toRef } from 'vue'\n\nimport { createIconProp, emitEvent, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { isPromise } from '@pocui/utils'\n\nimport { formResetProps } from './props'\nimport { FORM_ACTIONS } from './symbol'\n\ndefineOptions({ name: 'FormReset',description:'重置按钮，一键还原表单到初始值并清除所有校验错误。', categories: ['form'] })\n\nconst _props = defineProps(formResetProps)\nconst props = useProps('formReset', _props, {\n  size: null,\n  locale: null,\n  type: 'default',\n  label: null,\n  dashed: null,\n  text: null,\n  simple: null,\n  ghost: null,\n  disabled: null,\n  loading: null,\n  circle: null,\n  loadingIcon: createIconProp(),\n  loadingEffect: null,\n  icon: createIconProp(),\n  color: null,\n  buttonType: null,\n  block: null,\n  onBeforeReset: {\n    default: null,\n    isFunc: true\n  }\n})\n\ndefineSlots<{\n  default(): any,\n  icon(): any,\n  loading(): any\n}>()\n\nconst actions = inject(FORM_ACTIONS, null)\n\nconst nh = useNameHelper('form')\nconst locale = useLocale('form', toRef(props, 'locale'))\n\nconst isInherit = computed(() => !!actions || props.inherit)\n\nasync function handleReset() {\n  if (props.disabled) return\n\n  let result: unknown = true\n\n  if (typeof props.onBeforeReset === 'function') {\n    result = props.onBeforeReset()\n\n    if (isPromise(result)) {\n      result = await result\n    }\n  }\n\n  if (result !== false) {\n    actions?.reset()\n    emitEvent(props.onReset)\n  }\n}\n</script>\n\n<template>\n  <Button\n    v-bind=\"$attrs\"\n    :inherit=\"isInherit\"\n    :class=\"nh.be('reset')\"\n    :size=\"props.size\"\n    :type=\"props.type\"\n    :simple=\"props.simple\"\n    :ghost=\"props.ghost\"\n    :dashed=\"props.dashed\"\n    :text=\"props.text\"\n    :disabled=\"props.disabled\"\n    :loading=\"props.loading\"\n    :circle=\"props.circle\"\n    :loading-icon=\"props.loadingIcon\"\n    :loading-effect=\"props.loadingEffect\"\n    :icon=\"props.icon\"\n    :color=\"props.color\"\n    :button-type=\"props.buttonType\"\n    :block=\"props.block\"\n    :tag=\"props.tag\"\n    @click=\"handleReset\"\n  >\n    <slot>\n      {{ props.label || locale.reset }}\n    </slot>\n    <template v-if=\"$slots.icon\" #icon>\n      <slot name=\"icon\"></slot>\n    </template>\n    <template v-if=\"$slots.loading\" #loading>\n      <slot name=\"loading\"></slot>\n    </template>\n  </Button>\n</template>\n"
    },
    {
      "target": "components/form/form-submit.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from '@/components/button'\n\nimport { computed, inject, ref, toRef } from 'vue'\n\nimport { createIconProp, emitEvent, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { useSetTimeout } from '@pocui/hooks'\nimport { isPromise } from '@pocui/utils'\n\nimport { formSubmitProps } from './props'\nimport { FIELD_OPTIONS, FORM_ACTIONS, FORM_PROPS } from './symbol'\n\ndefineOptions({ name: 'FormSubmit',description:'提交按钮，内置校验触发与加载状态管理，通过 Form 上下文完成数据收集、校验及最终提交逻辑。', categories: ['form'] })\n\nconst _props = defineProps(formSubmitProps)\nconst props = useProps('form-submit', _props, {\n  size: null,\n  locale: null,\n  type: 'primary',\n  label: null,\n  dashed: null,\n  text: null,\n  simple: null,\n  ghost: null,\n  disabled: null,\n  circle: null,\n  loadingIcon: createIconProp(),\n  loadingEffect: null,\n  icon: createIconProp(),\n  color: null,\n  buttonType: null,\n  block: null,\n  onBeforeSubmit: {\n    default: null,\n    isFunc: true\n  }\n})\n\ndefineSlots<{\n  default(): any,\n  icon(): any,\n  loading(): any\n}>()\n\ndefineEmits<{\n  submit: [],\n  error: [errors: string[]]\n}>()\n\nconst fieldActions = inject(FIELD_OPTIONS, null)\n\nconst formProps = inject(FORM_PROPS, {})\nconst actions = inject(FORM_ACTIONS, null)\n\nconst nh = useNameHelper('form')\nconst locale = useLocale('form', toRef(props, 'locale'))\n\nconst { timer } = useSetTimeout()\n\nconst loading = ref(false)\n\nconst submit = ref<HTMLElement>()\n\nconst isNative = computed(() => formProps.method && formProps.action)\nconst isInherit = computed(() => !!actions || props.inherit)\nconst isLoading = computed(() => {\n  return loading.value || (fieldActions ? fieldActions.loading.value : false)\n})\n\ndefineExpose({\n  submit,\n  isNative,\n  isLoading\n})\n\nasync function handleSubmit() {\n  if (props.disabled || loading.value || !actions) return\n\n  loading.value = true\n\n  const errors = await actions.validate()\n\n  if (errors.length) {\n    emitEvent(props.onError, errors)\n  } else {\n    let result: unknown = true\n\n    if (typeof props.onBeforeSubmit === 'function') {\n      result = props.onBeforeSubmit()\n\n      if (isPromise(result)) {\n        result = await result\n      }\n    }\n\n    if (result !== false) {\n      emitEvent(props.onSubmit)\n\n      if (isNative.value) {\n        submit.value?.click()\n      }\n    }\n  }\n\n  timer.loading = setTimeout(() => {\n    loading.value = false\n  }, 300)\n}\n</script>\n\n<template>\n  <Button\n    v-bind=\"$attrs\"\n    :inherit=\"isInherit\"\n    :class=\"nh.be('submit')\"\n    :size=\"props.size\"\n    :type=\"props.type\"\n    :simple=\"props.simple\"\n    :ghost=\"props.ghost\"\n    :dashed=\"props.dashed\"\n    :text=\"props.text\"\n    :disabled=\"props.disabled\"\n    :loading=\"isLoading\"\n    :circle=\"props.circle\"\n    :loading-icon=\"props.loadingIcon\"\n    :loading-effect=\"props.loadingEffect\"\n    :icon=\"props.icon\"\n    :color=\"props.color\"\n    :button-type=\"props.buttonType\"\n    :block=\"props.block\"\n    :tag=\"props.tag\"\n    @click=\"handleSubmit\"\n  >\n    <slot>\n      {{ props.label || locale.submit }}\n    </slot>\n    <template v-if=\"$slots.icon\" #icon>\n      <slot name=\"icon\"></slot>\n    </template>\n    <template v-if=\"$slots.loading\" #loading>\n      <slot name=\"loading\"></slot>\n    </template>\n    <button\n      v-if=\"isNative\"\n      ref=\"submit\"\n      type=\"submit\"\n      style=\"display: none\"\n      @click.stop\n    ></button>\n  </Button>\n</template>\n"
    },
    {
      "target": "components/form/form.tsx",
      "content": "import { Drawer } from '@/components/drawer'\nimport { FormItem } from '@/components/form-item'\nimport { Modal } from '@/components/modal'\nimport { Row } from '@/components/row'\n\nimport { computed, defineComponent, h, inject, provide, reactive, resolveComponent } from 'vue'\n\nimport { PROVIDED_PROPS_PREFIX, createSizeProp, useNameHelper, useProps } from '@pocui/config'\n\nimport { formProps } from './props'\n\nimport { FORM_ACTIONS, FORM_FIELDS, FORM_PROPS, labelAligns, submitMethods } from './symbol'\n\nimport type { FieldOptions } from './symbol'\n\nexport default defineComponent({\n  name: 'Form',\n  description:'用于需要收集、验证一些信息的时候，快速创建表单域。',\n  categories: ['form'],\n  inheritAttrs: false,\n  props: formProps,\n  emits: ['update:active'],\n  setup(_props, { attrs, slots, emit, expose }) {\n    const props = useProps('form', _props, {\n      method: {\n        default: 'post',\n        validator: value => submitMethods.includes(value)\n      },\n      action: null,\n      columns: {\n        default: () => []\n      },\n      modal: false,\n      modalConfig: {\n        default: () => ({})\n      },\n      active: false,\n      model: {\n        default: () => ({}),\n        static: true\n      },\n      rules: () => [],\n      labelWidth: 'auto',\n      labelAlign: {\n        default: 'right',\n        validator: value => labelAligns.includes(value)\n      },\n      allRequired: false,\n      labelSuffix: '',\n      hideAsterisk: false,\n      validateAll: false,\n      hideLabel: false,\n      disabled: false,\n      loading: false,\n      size: createSizeProp(),\n      inline: false,\n      gap: [8, 0],\n      justify: 'start',\n      align: 'top'\n    })\n    const prefix = inject(PROVIDED_PROPS_PREFIX, '')\n    const nh = useNameHelper('form')\n    const fieldSet: Set<FieldOptions> = reactive(new Set<any>())\n    const className = computed(() => {\n      return [\n        nh.b(),\n        nh.bs('vars'),\n        nh.bm(`label-${props.labelAlign}`),\n        {\n          [nh.in()]: props.inherit,\n          [nh.bm('disabled')]: props.disabled,\n          [nh.bm('loading')]: props.loading,\n          [nh.bm(props.size)]: props.size !== 'default',\n          [nh.bm('inline')]: props.inline\n        }\n      ]\n    })\n\n    const labelWidth = computed(() => {\n      return Math.max(...Array.from(fieldSet).map(field => field.labelWidth.value))\n    })\n\n    provide(FORM_PROPS, props)\n    provide(FORM_FIELDS, fieldSet)\n    provide(FORM_ACTIONS, {\n      getLabelWidth,\n      validate,\n      validateFields,\n      reset,\n      resetFields,\n      clearError,\n      clearFieldsError\n    })\n\n    expose({\n      validate,\n      validateFields,\n      reset,\n      resetFields,\n      clearError,\n      clearFieldsError\n    })\n\n    function getLabelWidth() {\n      if (typeof props.labelWidth === 'number') {\n        return props.labelWidth\n      }\n\n      return labelWidth.value\n    }\n\n    function getPropMap() {\n      const propMap: Record<string, FieldOptions> = {}\n\n      for (const field of fieldSet) {\n        if (field.prop.value) {\n          propMap[field.prop.value] = field\n        }\n      }\n\n      return propMap\n    }\n\n    function validate() {\n      return validateItems(fieldSet)\n    }\n\n    function validateFields(props: string | string[]) {\n      if (!Array.isArray(props)) {\n        props = [props]\n      }\n\n      const propMap = getPropMap()\n      const fields = new Set<FieldOptions>()\n\n      props.forEach(prop => {\n        if (propMap[prop]) {\n          fields.add(propMap[prop])\n        }\n      })\n\n      return validateItems(fields)\n    }\n\n    function validateItems(items: Set<FieldOptions>) {\n      const validations: Promise<string | undefined>[] = []\n\n      items.forEach(item => {\n        validations.push(item.validate())\n      })\n\n      return new Promise<string[]>(resolve => {\n        Promise.all(validations).then(errors => {\n          resolve(errors.flat().filter(Boolean) as string[])\n        })\n      })\n    }\n\n    function reset() {\n      fieldSet.forEach(field => {\n        field.reset()\n      })\n    }\n\n    function resetFields(props: string | string[]) {\n      if (!Array.isArray(props)) {\n        props = [props]\n      }\n\n      const propMap = getPropMap()\n\n      props.forEach(prop => {\n        if (propMap[prop]) {\n          propMap[prop].reset()\n        }\n      })\n    }\n\n    function clearError() {\n      fieldSet.forEach(field => {\n        field.clearError()\n      })\n    }\n\n    /**\n     * 清除指定字段的验证错误。\n     *\n     * 此函数遍历提供的 `props`（字段名），并清除与它们相关联的任何验证错误。\n     * 如果 `props` 不是数组，则将其转换为包含单个元素的数组，以便统一处理。\n     * 函数依赖于 `propMap`，它将字段名映射到各自的字段选项对象。\n     * 对于提供的每个字段名，如果它存在于 `propMap` 中，则调用其 `clearError` 方法以清除任何验证错误。\n     *\n     * @param {string | string[]} props 要清除错误的字段名或字段名数组\n     */\n    function clearFieldsError(props: string | string[]) {\n      if (!Array.isArray(props)) {\n        props = [props]\n      }\n\n      const propMap = getPropMap()\n\n      props.forEach(prop => {\n        if (propMap[prop]) {\n          propMap[prop].clearError()\n        }\n      })\n    }\n\n    function renderColumns() {\n      return props.columns.map(item => {\n        const ColumnComponent = resolveComponent(item.component ? `${prefix}${item.component}` : `${prefix}input`)\n        return ColumnComponent\n          ? (\n            <FormItem\n              key={item.field || item.formItemProps?.prop}\n              label={item.label}\n              prop={item.field}\n              {...item.formItemProps}\n            >\n              {h(ColumnComponent, item.formComponentProps)}\n            </FormItem>\n            )\n          : null\n      })\n    }\n\n    function createForm() {\n      return (\n        <Row\n          {...attrs}\n          class={className.value}\n          inherit={props.inherit}\n          tag='form'\n          methed={props.action && props.method}\n          action={props.action}\n          gap={props.gap}\n          justify={props.justify}\n          align={props.align}\n          column-flex={undefined}\n        >\n          {props.columns.length ? renderColumns() : null}\n          {slots.default ? slots.default() : null}\n        </Row>\n      )\n    }\n\n    function handleUpdate(value: boolean) {\n      emit('update:active', value)\n    }\n\n    function crateModalForm() {\n      return (\n        <Modal {...props.modalConfig} onUpdate:active={handleUpdate} active={props.active}>\n          {createForm()}\n        </Modal>\n      )\n    }\n\n    function crateDrawerForm() {\n      return (\n        <Drawer {...props.drawerConfig} onUpdate:active={handleUpdate} active={props.active}>\n          {createForm()}\n        </Drawer>\n      )\n    }\n\n    return () => {\n      return props.modal ? crateModalForm() : props.drawer ? crateDrawerForm() : createForm()\n    }\n  }\n})\n"
    },
    {
      "target": "components/form/helper.ts",
      "content": "import { computed, getCurrentInstance, inject, onBeforeUnmount, provide } from 'vue'\n\nimport { isNullish, noop } from '@pocui/utils'\n\nimport { FIELD_OPTIONS } from './symbol'\n\nimport type { ComponentSize, ComponentState } from '@pocui/config'\n\nimport type { FieldOptions } from './symbol'\n\n/**\n * 根据路径读取对象中的值 (实现 ?. 的逻辑)\n *\n * @param obj 需要被读取的对象\n * @param path 读取的路径\n * @param strict 是否开启严格模式 (非法路径报错)\n */\nexport function getValueByPath<T = unknown>(\n  obj: Record<string, any>,\n  path: string | string[],\n  strict = false\n): T | null {\n  if (!obj || !path) return null\n\n  if (typeof path === 'string') {\n    if (path in obj) return obj[path]\n\n    path = path.split('.')\n  }\n\n  if (Array.isArray(path) && path.length) {\n    const lastKey = path.pop()\n\n    if (!lastKey) return null\n\n    for (let i = 0, len = path.length; i < len; ++i) {\n      const key = String(path[i])\n\n      if (!key) break\n\n      obj = obj[key]\n\n      if (isNullish(obj)) {\n        if (strict) {\n          throw new Error('[pocui:Form] 通过无效路径获取值')\n        }\n\n        return obj\n      }\n    }\n\n    if (strict && isNullish(obj[lastKey])) {\n      throw new Error('[pocui:Form] 通过无效路径获取值')\n    }\n\n    return obj[lastKey]\n  }\n\n  return null\n}\n\n/**\n * 根据路径设置对象中的值\n *\n * @param obj 需要被设置的对象\n * @param path 设置的路径\n * @param value 需要设置的值\n * @param strict 是否开启严格模式 (非法路径报错)\n */\nexport function setValueByPath(\n  obj: Record<string, any>,\n  path: string | string[],\n  value: unknown,\n  strict = false\n): boolean {\n  if (!obj || !path) return false\n\n  if (typeof path === 'string') {\n    if (path in obj) {\n      obj[path] = value\n\n      return true\n    }\n\n    path = path.split('.')\n  }\n\n  if (Array.isArray(path) && path.length) {\n    const lastKey = path.pop()\n\n    if (!lastKey) return false\n\n    for (let i = 0, len = path.length; i < len; ++i) {\n      const key = String(path[i])\n\n      if (!key) {\n        return false\n      }\n\n      if (typeof obj[key] !== 'object') {\n        if (strict) {\n          throw new Error('[pocui:Form] 通过无效路径设置值')\n        }\n\n        obj[key] = {}\n      }\n\n      obj = obj[key]\n    }\n\n    if (strict && typeof obj !== 'object') {\n      throw new Error('[pocui:Form] 通过无效路径设置值')\n    }\n\n    obj[lastKey] = value\n\n    return true\n  }\n\n  return false\n}\n\nconst defaultId = computed(() => undefined as string | undefined)\nconst defaultState = computed(() => 'default' as ComponentState)\nconst defaultFalse = computed(() => false)\nconst defaultSize = computed(() => 'default' as ComponentSize)\n\nfunction getEmptyActions<V = unknown>() {\n  return {\n    isField: false,\n    idFor: defaultId,\n    labelId: defaultId,\n    state: defaultState,\n    disabled: defaultFalse,\n    loading: defaultFalse,\n    size: defaultSize,\n    validateField: noop as FieldOptions['validate'],\n    clearField: noop as FieldOptions['clearError'],\n    resetField: noop as FieldOptions['reset'],\n    getFieldValue: (v => v) as (defaultValue?: V) => V,\n    setFieldValue: noop as (value: V, strict?: boolean) => void\n  }\n}\n\n/**\n 创建字段存储，提供字段状态和控制方法\n\n @param onFocus 一个聚焦方法，用于在点击标签时聚焦\n */\nexport function useFieldStore<V = unknown>(onFocus?: () => void) {\n  const instance = getCurrentInstance()\n\n  if (!instance) return getEmptyActions<V>()\n\n  const fieldOptions = inject(FIELD_OPTIONS, null)\n\n  if (!fieldOptions) {\n    return getEmptyActions<V>()\n  }\n\n  // 如果控件组件之间存在依赖关系,则阻止提供.\n  // 例如 AutoComplete -> Select & ColorPicker -> Input\n  provide(FIELD_OPTIONS, null!)\n  fieldOptions.sync(instance)\n  onFocus && fieldOptions.emitter.on('focus', onFocus)\n\n  onBeforeUnmount(() => {\n    fieldOptions.unSync(instance)\n    onFocus && fieldOptions.emitter.off('focus', onFocus)\n  })\n\n  function clearField(defaultValue?: V) {\n    if (!fieldOptions) return\n\n    fieldOptions.setValue(defaultValue)\n    fieldOptions.clearError()\n  }\n\n  return {\n    isField: true,\n    idFor: fieldOptions.idFor,\n    labelId: fieldOptions.labelId,\n    state: fieldOptions.state,\n    disabled: fieldOptions.disabled,\n    loading: fieldOptions.loading,\n    size: fieldOptions.size,\n    validateField: fieldOptions.validate,\n    clearField,\n    resetField: fieldOptions.reset,\n    getFieldValue: fieldOptions.getValue as (defaultValue?: V) => V,\n    setFieldValue: fieldOptions.setValue as (value: V, strict?: boolean) => void\n  }\n}\n"
    },
    {
      "target": "components/form/index.ts",
      "content": "import Form from './form'\n\nexport { Form }\nexport { formProps } from './props'\n\nexport * from './helper'\nexport * from './validator'\nexport type { FormProps, FormCProps, FormColumn } from './props'\nexport type { FormLabelAlign, SubmitMethod, FormExposed } from './symbol'\n"
    },
    {
      "target": "components/form/props.ts",
      "content": "import {\n  AutoCompleteProps,\n  CascaderProps,\n  CheckboxGroupProps,\n  CheckboxProps,\n  ColorPickerProps,\n  DatePickerProps,\n  DrawerProps,\n  InputProps,\n  ModalProps,\n  NumberInputProps,\n  RadioGroupProps,\n  RadioProps,\n  SelectProps,\n  SliderProps,\n  SwitchProps,\n  TextareaProps,\n  TimePickerProps,\n  TransferProps,\n  UploadProps,\n  WheelProps\n} from '@/components'\n\nimport { booleanProp, buildProps, eventProp, iconProp, localeProp, sizeProp } from '@pocui/config'\n\nimport type { ButtonAttrType, ButtonType } from '@/components/button'\nimport type { ColumnOptions } from '@/components/column'\nimport type { IconEffect } from '@/components/icon'\nimport type { RowGridAlign, RowGridJustify } from '@/components/row'\n\nimport type { CommonType, ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nimport type { FormComponentType, FormLabelAlign, SubmitMethod } from './symbol'\n\nimport type { Rule, SelfRules, Validator } from './validator'\n\nexport interface FormColumn extends CommonType {\n  /**\n   * 组件类型\n   * @default input\n   */\n  component?: FormComponentType,\n\n  /**\n   * 表单项的props\n   */\n  formItemProps?: FormItemProps,\n\n  /**\n   * 表单项组件的props\n   */\n  formComponentProps?:\n  | AutoCompleteProps\n  | CascaderProps\n  | CheckboxProps\n  | CheckboxGroupProps\n  | ColorPickerProps\n  | DatePickerProps\n  | InputProps\n  | NumberInputProps\n  | RadioProps\n  | RadioGroupProps\n  | SelectProps\n  | SliderProps\n  | SwitchProps\n  | TextareaProps\n  | TimePickerProps\n  | TransferProps\n  | UploadProps\n  | WheelProps\n}\n\nexport const formProps = buildProps({\n  method: String as PropType<SubmitMethod>,\n  action: String,\n  columns: Array as PropType<FormColumn[]>,\n  modal: booleanProp,\n  modalConfig: Object as PropType<ModalProps>,\n  drawer: booleanProp,\n  drawerConfig: Object as PropType<DrawerProps>,\n  active: booleanProp,\n  model: Object,\n  rules: Array as PropType<Rule[]>,\n  labelWidth: [Number, String] as PropType<number | 'auto'>,\n  labelAlign: String as PropType<FormLabelAlign>,\n  allRequired: booleanProp,\n  labelSuffix: String,\n  hideAsterisk: booleanProp,\n  validateAll: booleanProp,\n  hideLabel: booleanProp,\n  disabled: booleanProp,\n  loading: booleanProp,\n  size: sizeProp,\n  inline: booleanProp,\n  gap: [Number, Array] as PropType<number | number[]>,\n  justify: String as PropType<RowGridJustify>,\n  align: String as PropType<RowGridAlign>\n})\n\nexport type FormProps = ExtractPropTypes<typeof formProps>\nexport type FormCProps = ConfigurableProps<FormProps, 'model'>\n\nconst mediaProp = [Number, Object] as PropType<number | ColumnOptions>\n\nexport const formItemProps = buildProps({\n  locale: localeProp('form'),\n  label: String,\n  prop: String,\n  name: String,\n  rules: [Object, Array] as PropType<SelfRules | SelfRules[]>,\n  validator: Object as PropType<Validator>,\n  labelWidth: Number,\n  required: booleanProp,\n  htmlFor: String,\n  errorTransition: String,\n  defaultValue: {\n    type: [String, Number, Boolean, Object, Array, Function] as PropType<any>,\n    default: null\n  },\n  hideErrorTip: booleanProp,\n  validateAll: booleanProp,\n  hideAsterisk: booleanProp,\n  hideLabel: booleanProp,\n  action: booleanProp,\n  help: String,\n  pure: booleanProp,\n  span: Number,\n  offset: Number,\n  push: Number,\n  pull: Number,\n  order: Number,\n  xs: mediaProp,\n  sm: mediaProp,\n  md: mediaProp,\n  lg: mediaProp,\n  xl: mediaProp,\n  xxl: mediaProp,\n  flex: [Number, String]\n})\n\nexport type FormItemProps = ExtractPropTypes<typeof formItemProps>\nexport type FormItemCProps = ConfigurableProps<FormItemProps, 'prop' | 'htmlFor' | 'defaultValue'>\n\nexport const formSubmitProps = buildProps({\n  size: sizeProp,\n  locale: localeProp('form'),\n  type: String as PropType<ButtonType>,\n  label: String,\n  dashed: booleanProp,\n  text: booleanProp,\n  simple: booleanProp,\n  ghost: booleanProp,\n  disabled: booleanProp,\n  circle: booleanProp,\n  loadingIcon: iconProp,\n  loadingEffect: String as PropType<IconEffect>,\n  icon: iconProp,\n  color: String,\n  buttonType: String as PropType<ButtonAttrType>,\n  block: booleanProp,\n  tag: String,\n  onBeforeSubmit: Function as PropType<() => unknown>,\n  onSubmit: eventProp(),\n  onError: eventProp<(errors: string[]) => void>()\n})\n\nexport type FormSubmitProps = ExtractPropTypes<typeof formSubmitProps>\nexport type FormSubmitCProps = ConfigurableProps<FormSubmitProps, never, 'onBeforeReset'>\n\nexport const formResetProps = buildProps({\n  size: sizeProp,\n  locale: localeProp('form'),\n  type: String as PropType<ButtonType>,\n  label: String,\n  dashed: booleanProp,\n  text: booleanProp,\n  simple: booleanProp,\n  ghost: booleanProp,\n  disabled: booleanProp,\n  loading: booleanProp,\n  circle: booleanProp,\n  loadingIcon: iconProp,\n  loadingEffect: String as PropType<IconEffect>,\n  icon: iconProp,\n  color: String,\n  buttonType: String as PropType<ButtonAttrType>,\n  block: booleanProp,\n  tag: String,\n  onBeforeReset: Function as PropType<() => unknown>,\n  onReset: eventProp()\n})\n\nexport type FormResetProps = ExtractPropTypes<typeof formResetProps>\nexport type FormResetCProps = ConfigurableProps<FormResetProps, never, 'onBeforeReset'>\n"
    },
    {
      "target": "components/form/symbol.ts",
      "content": "import { Rule, type SelfRules } from './validator'\n\nimport type { ComponentSize, ComponentState } from '@pocui/config'\nimport type { EventEmitter } from '@pocui/utils'\nimport type { ComponentPublicInstance, ComputedRef, InjectionKey, Ref } from 'vue'\n\nexport type FormLabelAlign = 'right' | 'top' | 'left'\nexport type SubmitMethod = 'get' | 'post' | 'put' | 'delete'\n\nexport type FormComponentType =\n  | 'auto-complete'\n  | 'cascader'\n  | 'checkbox'\n  | 'checkbox-group'\n  | 'color-picker'\n  | 'date-picker'\n  | 'input'\n  | 'number-input'\n  | 'radio'\n  | 'radio-group'\n  | 'select'\n  | 'slider'\n  | 'switch'\n  | 'textarea'\n  | 'time-picker'\n  | 'transfer'\n  | 'upload'\n  | 'wheel'\n\nexport interface FormExposed extends ComponentPublicInstance {\n  validate: () => Promise<string[]>,\n\n  validateFields: (props: string | string[]) => Promise<string[]>,\n\n  reset: () => void,\n\n  resetFields: (props: string | string[]) => void,\n\n  clearError: () => void,\n\n  clearFieldsError: (props: string | string[]) => void\n}\n\nexport interface FormProps {\n  method: SubmitMethod,\n\n  action: string,\n\n  model: Record<string, any>,\n\n  rules: Rule[],\n\n  labelWidth: number | 'auto',\n\n  labelAlign: FormLabelAlign,\n\n  allRequired: boolean,\n\n  labelSuffix: string,\n\n  hideAsterisk: boolean,\n\n  validateAll: boolean,\n\n  hideLabel: boolean,\n\n  disabled: boolean,\n\n  loading: boolean,\n\n  size: ComponentSize,\n\n  inline: boolean\n}\n\nexport interface FormItemProps {\n  label: string,\n\n  prop: string,\n\n  rules: SelfRules | SelfRules[],\n\n  labelWidth: number | 'auto',\n\n  required: boolean,\n\n  htmlFor: string,\n\n  errorTransition: string,\n\n  defaultValue: unknown,\n\n  hideErrorTip: boolean,\n\n  validateAll: boolean,\n\n  hideAsterisk: boolean\n}\n\nexport interface FieldOptions {\n  prop: ComputedRef<string>,\n\n  idFor: ComputedRef<string>,\n\n  labelId: ComputedRef<string>,\n\n  state: ComputedRef<ComponentState>,\n\n  disabled: ComputedRef<boolean>,\n\n  loading: ComputedRef<boolean>,\n\n  size: ComputedRef<ComponentSize>,\n\n  emitter: EventEmitter,\n\n  labelWidth: Ref<number>,\n\n  validate: () => Promise<string | undefined>,\n\n  reset: () => boolean,\n\n  clearError: () => void,\n\n  getValue: (defaultValue?: unknown) => unknown,\n\n  setValue: (value: unknown, strict?: boolean) => void,\n\n  sync: (instance: any) => void,\n\n  unSync: (instance: any) => void\n}\n\nexport interface FormActions {\n  getLabelWidth: () => number,\n\n  validate: () => Promise<string[]>,\n\n  validateFields: (props: string | string[]) => Promise<string[]>,\n\n  reset: () => void,\n\n  resetFields: (props: string | string[]) => void,\n\n  clearError: () => void,\n\n  clearFieldsError: (props: string | string[]) => void\n}\n\n// form\nexport const FORM_PROPS: InjectionKey<Partial<FormProps>> = Symbol('FORM_PROPS')\nexport const FORM_FIELDS: InjectionKey<Set<FieldOptions>> = Symbol('FORM_FIELDS')\nexport const FORM_ACTIONS: InjectionKey<FormActions> = Symbol('FORM_ACTIONS')\n\n// form-item\nexport const FIELD_OPTIONS: InjectionKey<FieldOptions> = Symbol('FIELD_OPTIONS')\n\nexport const submitMethods = Object.freeze<SubmitMethod[]>(['get', 'post', 'put', 'delete'])\nexport const labelAligns = Object.freeze<FormLabelAlign[]>(['right', 'top', 'left'])\n"
    },
    {
      "target": "components/form/validator.ts",
      "content": "import { Modes, create, mode, test } from '@pocui/validation'\n\nexport interface Rule {\n  field: string,\n\n  message: string,\n\n  test: (value: unknown) => unknown\n}\n\nexport type SelfRules = Omit<Rule, 'field'>\n\nexport type Validator = Omit<Rule, 'field' | 'test'> & {\n  validator(value: unknown, model: Record<string, any>): boolean\n}\n\nconst DEFAULT_MESSAGE = '验证失败'\n\nexport async function validate(\n  rule: Rule[],\n  value: unknown,\n  model: Record<string, any>,\n  validator: Validator,\n  defaultMsg = DEFAULT_MESSAGE\n): Promise<string | undefined> {\n  if (validator) {\n    return validator.validator(value, model) ? void 0 : (validator.message ?? defaultMsg)\n  }\n\n  const suite = create((data = undefined) => {\n    mode(Modes.ONE)\n    rule.forEach((rule: Rule) => {\n      test(rule.field, rule.message ?? defaultMsg, () => {\n        rule.test(data)\n      })\n    })\n  })\n\n  const result = suite(value)\n\n  if (result.hasErrors()) {\n    return result.getError()?.message ?? defaultMsg\n  } else {\n    return void 0\n  }\n}\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils", "@pocui/hooks", "@pocui/validation"],
  "registryDependencies": [
    "button",
    "form.scss",
    "column",
    "icon",
    "tooltip",
    "drawer",
    "form-item",
    "modal",
    "row"
  ],
  "categories": ["form"],
  "meta": { "isReferenceOnly": false }
}
