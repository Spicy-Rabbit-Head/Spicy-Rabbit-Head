{
  "name": "loading",
  "type": "registry:components",
  "description": "通常用于反馈一些全局的加载状态，如页面路由切换、全局请求等。",
  "files": [
    {
      "target": "components/loading/index.ts",
      "content": "import { createApp, createVNode, render } from 'vue'\n\nimport { proxyExposed, unrefElement } from '@pocui/hooks'\n\nimport { destroyObject, isClient, isNullish } from '@pocui/utils'\n\nimport Component from './loading.vue'\n\nimport type { MaybeInstance } from '@pocui/hooks'\n\nimport type { App, MaybeRef } from 'vue'\n\nimport type { LoadingInstance, LoadingOptions, LoadingState } from './symbol'\n\nexport type { LoadingState, LoadingOptions }\n\ntype InitLoadingOptions = Omit<LoadingOptions, 'percent'>\n\nexport class LoadingManager {\n  name: string\n\n  defaults: InitLoadingOptions\n\n  private _mountedApp: App<unknown> | null\n\n  private _instance: LoadingInstance | null\n\n  private _innerApp: App<unknown> | null\n\n  private _container: HTMLElement | null\n\n  private _wrapper: HTMLElement | SVGElement | null\n\n  private _mountedEl: HTMLElement | null\n\n  constructor(options: InitLoadingOptions = {}) {\n    this._mountedApp = null\n    this._instance = null\n    this._innerApp = null\n    this._container = null\n    this._wrapper = null\n    this._mountedEl = null\n    this.name = 'Loading'\n    this.defaults = {}\n\n    this.config(options)\n  }\n\n  open(percent: number): void\n  open(options: LoadingOptions): void\n  open(options: number | LoadingOptions) {\n    if (!isClient) return\n\n    if (typeof options === 'number') {\n      options = { percent: options }\n    }\n\n    this._getInstance()!.startLoading({ ...this.defaults, ...options })\n  }\n\n  close() {\n    this.open(100)\n  }\n\n  config(options: InitLoadingOptions) {\n    this.defaults = { ...this.defaults, ...options }\n  }\n\n  clone() {\n    const manager = new LoadingManager(this.defaults)\n\n    manager._mountedApp = this._mountedApp\n\n    return manager\n  }\n\n  destroy() {\n    this._mountedEl && this._wrapper?.removeChild(this._mountedEl)\n    this._innerApp?.unmount()\n    this._container && render(null, this._container)\n    destroyObject(this)\n  }\n\n  isDestroyed() {\n    return false\n  }\n\n  install(app: App, options: InitLoadingOptions & { property?: string } = {}) {\n    const { property, ...others } = options\n\n    this.config(others)\n    this._mountedApp = app\n\n    if (property || !app.config.globalProperties.$loading) {\n      app.config.globalProperties[property || '$loading'] = this\n    }\n  }\n\n  transferTo(target: MaybeRef<string | MaybeInstance>) {\n    if (!isClient) return\n\n    const el = unrefElement(target)\n\n    if (el) {\n      this._wrapper = el as HTMLElement | SVGElement | null\n\n      if (this._instance) {\n        this._mountedEl && !isNullish(this._wrapper) && this._wrapper.appendChild(this._mountedEl)\n      } else {\n        this._getInstance()\n      }\n    }\n  }\n\n  private _getInstance() {\n    if (!this._instance && isClient) {\n      if (!this._mountedApp) {\n        console.warn('[pocui:Loading]: 应用程序缺失,插件可能未安装.')\n\n        this._container = document.createElement('div')\n        this._innerApp = createApp(Component)\n        this._instance = this._innerApp.mount(this._container) as LoadingInstance\n      } else {\n        const vnode = createVNode(Component, null, null)\n\n        this._container = document.createElement('div')\n        vnode.appContext = this._mountedApp._context\n\n        render(vnode, this._container)\n\n        this._instance = proxyExposed<LoadingInstance>(vnode)\n      }\n\n      this._mountedEl = this._container.firstElementChild as HTMLElement\n      ;(this._wrapper || document.body).appendChild(this._mountedEl)\n    }\n\n    return this._instance\n  }\n}\n\nexport const Loading = new LoadingManager()\n"
    },
    {
      "target": "components/loading/loading.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, onBeforeUnmount, ref } from 'vue'\n\nimport { useNameHelper } from '@pocui/config'\nimport { boundRange } from '@pocui/utils'\n\nimport type { LoadingOptions, LoadingPosition, LoadingState } from './symbol'\n\ndefineOptions({\n  name: 'Loading',\n  description: '通常用于反馈一些全局的加载状态，如页面路由切换、全局请求等。',\n  categories: ['feedback']\n})\n\nconst nh = useNameHelper('loading')\nconst visible = ref(false)\nconst strokeWidth = ref(2)\nconst state = ref<LoadingState>('default')\nconst position = ref<LoadingPosition>('top')\nconst percent = ref(0)\n\nlet maxPercent = 95\n\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.bs('vars')]: true,\n    [nh.bm(state.value)]: state.value !== 'default'\n  }\n})\n\nconst style = computed(() => {\n  return {\n    [position.value]: '0',\n    height: `${strokeWidth.value}px`\n  }\n})\n\nconst fillerStyle = computed(() => {\n  return {\n    transform: `translateX(${(percent.value - 100) / 2}%) scaleX(${percent.value / 100})`\n  }\n})\n\nlet timer: ReturnType<typeof setTimeout>\nlet interval: ReturnType<typeof setInterval>\nlet rafId: ReturnType<typeof requestAnimationFrame>\n\ndefineExpose({\n  visible,\n  percent,\n  startLoading\n})\n\nonBeforeUnmount(() => {\n  clearTimeout(timer)\n  clearInterval(interval)\n  cancelAnimationFrame(rafId)\n})\n\nfunction startLoading(options: LoadingOptions) {\n  if (percent.value === 100) {\n    clearTimeout(timer)\n\n    visible.value = false\n    percent.value = 0\n    state.value = 'default'\n    strokeWidth.value = 2\n    position.value = 'top'\n  }\n\n  clearInterval(interval)\n\n  const setLoading = () => {\n    percent.value = boundRange(options.percent, 0, 100)\n    state.value = options.state ?? 'default'\n    strokeWidth.value = boundRange(options.strokeWidth ?? 2, 1, 10)\n    position.value = options.position ?? 'top'\n    maxPercent = boundRange(options.maxPercent ?? 95, percent.value, 95)\n\n    if (percent.value === 100) {\n      timer = setTimeout(() => {\n        visible.value = false\n      }, 500)\n    } else {\n      interval = setInterval(() => {\n        percent.value += Math.floor(Math.random() * 3 + 1)\n\n        if (percent.value >= maxPercent) {\n          percent.value = maxPercent\n          clearInterval(interval)\n        }\n      }, 500)\n    }\n  }\n\n  maxPercent = 95\n\n  rafId = requestAnimationFrame(() => {\n    if (visible.value) {\n      setLoading()\n    } else {\n      visible.value = true\n      rafId = requestAnimationFrame(setLoading)\n    }\n  })\n}\n</script>\n\n<template>\n  <Transition :name=\"nh.ns('fade')\" appear>\n    <div\n      v-show=\"visible\"\n      :class=\"className\"\n      role=\"progressbar\"\n      :style=\"style\"\n      :aria-valuenow=\"percent\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n    >\n      <div :class=\"nh.be('filler')\" :style=\"fillerStyle\"></div>\n    </div>\n  </Transition>\n</template>\n"
    },
    {
      "target": "components/loading/symbol.ts",
      "content": "import type { ComponentPublicInstance } from 'vue'\n\nexport type LoadingState = 'default' | 'success' | 'error' | 'warning'\nexport type LoadingPosition = 'top' | 'bottom'\n\nexport interface LoadingOptions {\n  percent: number,\n  strokeWidth?: number,\n  state?: LoadingState,\n  position?: LoadingPosition,\n  maxPercent?: number\n}\n\nexport interface LoadingInstance extends ComponentPublicInstance {\n  startLoading: (options: LoadingOptions) => void\n}\n"
    }
  ],
  "dependencies": ["vue", "@pocui/hooks", "@pocui/utils", "@pocui/config"],
  "registryDependencies": ["loading.scss"],
  "categories": ["feedback"],
  "meta": { "isReferenceOnly": false }
}
