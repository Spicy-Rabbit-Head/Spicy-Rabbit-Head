{
  "name": "avatar",
  "type": "registry:component",
  "description": "用户的首要标志，可以使用图片、图标或文字进行展示。",
  "files": [
    {
      "target": "components/avatar/avatar-group.vue",
      "content": "<script setup lang=\"ts\">\nimport { Avatar } from '@/components/avatar'\nimport { Tooltip } from '@/components/tooltip'\n\nimport { computed, provide, ref, watchEffect } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\n\nimport { avatarGroupProps } from './props'\n\nimport { GROUP_STATE } from './symbol'\n\nimport type { AvatarOption } from './symbol'\n\ndefineOptions({\n  name: 'AvatarGroup',\n  description: '将多个 Avatar 组合在一起展示，支持头像数量限制和超出数量提示等功能。',\n  categories: [\"display\"]\n})\n\nconst _props = defineProps(avatarGroupProps)\nconst props = useProps('avatarGroup', _props, {\n  size: 'default',\n  options: {\n    default: () => [],\n    static: true\n  },\n  circle: false,\n  max: null,\n  showTip: false,\n  tipTrigger: 'hover',\n  vertical: false,\n  offset: null,\n  restColor: null,\n  restBackground: null\n})\n\ndefineSlots<{\n  default(props: { option: AvatarOption, index: number }): any,\n  rest(props: { options: AvatarOption[], count: number }): any,\n  tip(props: { options: AvatarOption[], count: number }): any\n}>()\n\nconst nh = useNameHelper('avatar-group')\n\nconst renderAvatars = ref<AvatarOption[]>([])\nconst restAvatars = ref<AvatarOption[]>([])\n\nwatchEffect(() => {\n  const size = props.options.length\n\n  if (props.max > 0 && size > props.max) {\n    renderAvatars.value = props.options.slice(0, props.max - 1)\n    restAvatars.value = props.options.slice(props.max - 1)\n  } else {\n    renderAvatars.value = Array.from(props.options)\n    restAvatars.value = []\n  }\n})\n\nprovide(GROUP_STATE, props)\n\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.ns('avatar-vars'),\n    {\n      [nh.bm('circle')]: props.circle,\n      [nh.in()]: props.inherit,\n      [nh.bm('vertical')]: props.vertical\n    }\n  ]\n})\n\nconst style = computed(() => {\n  const style: Record<string, string> = {}\n\n  if (typeof props.offset === 'number') {\n    style[nh.cv('offset')] = `${props.offset}px`\n  }\n\n  return style\n})\n</script>\n\n<template>\n  <div :class=\"className\" role=\"group\" :style=\"style\">\n    <div v-for=\"(option, index) in renderAvatars\" :key=\"index\" :class=\"nh.be('item')\">\n      <slot :option=\"option\" :index=\"index\">\n        <Avatar\n          :src=\"option.src\"\n          :icon=\"option.icon\"\n          :alt=\"option.alt\"\n          :fit=\"option.fit\"\n          :src-set=\"option.srcSet\"\n          :gap=\"option.gap\"\n          :icon-scale=\"option.iconScale\"\n          :fallback-src=\"option.fallbackSrc\"\n        >\n          {{ option.text }}\n        </Avatar>\n      </slot>\n    </div>\n    <div v-if=\"restAvatars.length\" :class=\"[nh.be('item'), nh.bem('item', 'rest')]\">\n      <Tooltip\n        v-if=\"props.showTip\"\n        inherit\n        :trigger=\"props.tipTrigger\"\n        :tip-class=\"nh.be('rest')\"\n      >\n        <template #trigger>\n          <slot name=\"rest\" :options=\"restAvatars\" :count=\"restAvatars.length\">\n            <Avatar\n              inherit\n              :color=\"props.restColor\"\n              :circle=\"props.circle\"\n              :background=\"props.restBackground\"\n            >\n              {{ `+${restAvatars.length}` }}\n            </Avatar>\n          </slot>\n        </template>\n        <slot name=\"tip\" :options=\"restAvatars\" :count=\"restAvatars.length\">\n          <Avatar\n            v-for=\"(option, index) in restAvatars\"\n            :key=\"index\"\n            inherit\n            :src=\"option.src\"\n            :icon=\"option.icon\"\n            :alt=\"option.alt\"\n            :fit=\"option.fit\"\n            :src-set=\"option.srcSet\"\n            :gap=\"option.gap\"\n            :icon-scale=\"option.iconScale\"\n            :fallback-src=\"option.fallbackSrc\"\n          >\n            {{ option.text }}\n          </Avatar>\n        </slot>\n      </Tooltip>\n      <slot\n        v-else\n        name=\"rest\"\n        :options=\"restAvatars\"\n        :count=\"restAvatars.length\"\n      >\n        <Avatar :color=\"props.restColor\" :background=\"props.restBackground\">\n          {{ `+${restAvatars.length}` }}\n        </Avatar>\n      </slot>\n    </div>\n  </div>\n</template>\n"
    },
    {
      "target": "components/avatar/avatar.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@/components/icon'\nimport { ResizeObserver } from '@/components/resize-observer'\n\nimport { computed, inject, ref, watch } from 'vue'\n\nimport { createIconProp, emitEvent, useNameHelper, useProps } from '@pocui/config'\n\nimport { avatarProps } from './props'\nimport { GROUP_STATE, objectFitValues } from './symbol'\n\nimport type { ComponentSize, StyleType } from '@pocui/config'\n\ndefineOptions({\n  name: 'Avatar',\n  description: '用户的首要标志，可以使用图片、图标或文字进行展示。',\n  categories: [\"display\"]\n})\n\nconst _props = defineProps(avatarProps)\nconst props = useProps('avatar', _props, {\n  size: 'default',\n  src: {\n    default: '',\n    static: true\n  },\n  icon: createIconProp(),\n  circle: false,\n  alt: '',\n  fit: {\n    default: 'cover',\n    validator: value => objectFitValues.includes(value)\n  },\n  srcSet: '',\n  gap: 4,\n  iconScale: 1.4,\n  fallbackSrc: '',\n  color: null,\n  background: null\n})\n\ndefineSlots<{\n  default(): any,\n  icon(): any\n}>()\n\nconst groupState = inject(GROUP_STATE, null)\n\nconst nh = useNameHelper('avatar')\n\nconst loadFail = ref(false)\nconst fallbackFail = ref(false)\n\nconst wrapper = ref<HTMLElement>()\nconst text = ref<HTMLElement>()\n\nconst size = computed(() => {\n  return groupState?.size ?? props.size\n})\nconst circle = computed(() => {\n  return groupState?.circle ?? props.circle\n})\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.bs('vars'),\n    {\n      [nh.in()]: props.inherit,\n      [nh.bm(size.value as ComponentSize)]: typeof size.value !== 'number' && size.value !== 'default',\n      [nh.bm('circle')]: circle.value\n    }\n  ]\n})\n\nconst style = computed(() => {\n  const style: StyleType = {\n    [nh.cv('color')]: props.color,\n    [nh.cv('bg-color')]: props.background,\n    [nh.cv('image-fit')]: props.fit\n  }\n\n  if (typeof size.value === 'number') {\n    style[nh.cv('size')] = `${size.value}px`\n  }\n\n  return style\n})\n\nwatch(\n  () => props.src,\n  () => {\n    loadFail.value = false\n    fallbackFail.value = false\n    scaleText()\n  }\n)\nwatch(\n  () => props.fallbackSrc,\n  () => {\n    fallbackFail.value = false\n    scaleText()\n  }\n)\nwatch(() => props.gap, scaleText)\n\ndefineExpose({\n  loadFail,\n  fallbackFail\n})\n\nfunction handleError(event: Event) {\n  loadFail.value = true\n  emitEvent(props.onError, event)\n}\n\nlet lastText: string | null = null\n\nfunction scaleText() {\n  const avatarEl = wrapper.value\n  const textEl = text.value\n\n  if (avatarEl && textEl && (lastText === null || lastText !== textEl.textContent)) {\n    lastText = textEl.textContent\n\n    const { offsetWidth: avatarWidth, offsetHeight: avatarHeight } = avatarEl\n    const { offsetWidth: textWidth, offsetHeight: textHeight } = textEl\n    const padding = props.gap * 2\n\n    const ratio = Math.min((avatarWidth - padding) / (textWidth || 1), (avatarHeight - padding) / (textHeight || 1), 1)\n\n    textEl.style.transform = `scale(${ratio})`\n  }\n}\n\nfunction handleClick(event: MouseEvent) {\n  emitEvent(props.onClick, event)\n}\n</script>\n\n<template>\n  <div\n    ref=\"wrapper\"\n    :class=\"className\"\n    :style=\"style\"\n    @click=\"handleClick\"\n  >\n    <img\n      v-if=\"(props.src || props.srcSet) && !loadFail\"\n      :class=\"nh.be('image')\"\n      :src=\"props.src\"\n      :alt=\"props.alt\"\n      :srcset=\"props.srcSet\"\n      @error=\"handleError\"\n    />\n    <img\n      v-else-if=\"loadFail && props.fallbackSrc && !fallbackFail\"\n      :class=\"nh.be('image')\"\n      :src=\"props.fallbackSrc\"\n      :alt=\"props.alt\"\n      @error=\"fallbackFail = true\"\n    />\n    <template v-else-if=\"props.icon || $slots.icon\">\n      <slot name=\"icon\">\n        <Icon :icon=\"props.icon\" :scale=\"props.iconScale\"></Icon>\n      </slot>\n    </template>\n    <ResizeObserver v-else :on-resize=\"scaleText\">\n      <span ref=\"text\" :class=\"nh.be('text')\">\n        <slot></slot>\n      </span>\n    </ResizeObserver>\n  </div>\n</template>\n"
    },
    {
      "target": "components/avatar/index.ts",
      "content": "import Avatar from './avatar.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Avatar }\nexport { avatarProps } from './props'\n\nexport type AvatarExposed = ComponentPublicInstance & InstanceType<typeof Avatar>\n\nexport type { AvatarProps, AvatarCProps } from './props'\nexport type { AvatarObjectFit, AvatarOption } from './symbol'\n"
    },
    {
      "target": "components/avatar/props.ts",
      "content": "import { booleanProp, buildProps, eventProp, iconProp } from '@pocui/config'\n\nimport type { ComponentSize, ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { AvatarObjectFit, AvatarOption } from './symbol'\n\nexport const avatarProps = buildProps({\n  size: [Number, String] as PropType<number | ComponentSize>,\n  src: String,\n  icon: iconProp,\n  circle: booleanProp,\n  alt: String,\n  fit: String as PropType<AvatarObjectFit>,\n  srcSet: String,\n  gap: Number,\n  iconScale: Number,\n  fallbackSrc: String,\n  color: String,\n  background: String,\n  onError: eventProp<(event: Event) => void>(),\n  onClick: eventProp<(event: MouseEvent) => void>()\n})\n\nexport type AvatarProps = ExtractPropTypes<typeof avatarProps>\nexport type AvatarCProps = ConfigurableProps<ExtractPropTypes<typeof avatarProps>, 'src'>\n\nexport const avatarGroupProps = buildProps({\n  size: [Number, String] as PropType<number | ComponentSize>,\n  options: Object as PropType<AvatarOption[]>,\n  circle: booleanProp,\n  max: Number,\n  showTip: booleanProp,\n  tipTrigger: String as PropType<'hover' | 'click'>,\n  vertical: booleanProp,\n  offset: Number,\n  restColor: String,\n  restBackground: String\n})\n\nexport type AvatarGroupProps = ExtractPropTypes<typeof avatarGroupProps>\nexport type AvatarGroupCProps = ConfigurableProps<ExtractPropTypes<typeof avatarGroupProps>>\n"
    },
    {
      "target": "components/avatar/symbol.ts",
      "content": "import { AnyFunction, ComponentSize } from '@pocui/config'\n\nimport type { InjectionKey } from 'vue'\n\nexport type AvatarObjectFit = 'fill' | 'contain' | 'cover' | 'none' | 'scale-down'\nexport type AvatarOption = ({ src: string } | { icon: string | AnyFunction } | { text: string }) & Record<string, any>\n\nexport interface AvatarGroupState {\n  size: number | ComponentSize,\n\n  circle: boolean\n}\n\nexport const GROUP_STATE: InjectionKey<AvatarGroupState> = Symbol('GROUP_STATE')\n\nexport const objectFitValues = Object.freeze<AvatarObjectFit[]>(['fill', 'contain', 'cover', 'none', 'scale-down'])\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config"],
  "registryDependencies": ["tooltip", "avatar.scss", "icon", "resize-observer"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
