{
  "name": "switch",
  "type": "registry:component",
  "description": "常用于需要形象地切换正反状态的场合。",
  "files": [
    {
      "target": "components/switch/index.ts",
      "content": "import Switch from './switch.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Switch }\nexport { switchProps } from './props'\n\nexport type SwitchExposed = ComponentPublicInstance & InstanceType<typeof Switch>\n\nexport type { SwitchProps, SwitchCProps } from './props'\n"
    },
    {
      "target": "components/switch/props.ts",
      "content": "import { booleanProp, buildProps, eventProp, iconProp, sizeProp, stateProp } from '@pocui/config'\n\nimport type { IconEffect } from '@/components/icon'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nexport const switchProps = buildProps({\n  size: sizeProp,\n  state: stateProp,\n  value: booleanProp,\n  disabled: booleanProp,\n  openColor: String,\n  closeColor: String,\n  loading: booleanProp,\n  loadingIcon: iconProp,\n  loadingEffect: String as PropType<IconEffect>,\n  openIcon: iconProp,\n  closeIcon: iconProp,\n  openText: String,\n  closeText: String,\n  onBeforeChange: Function as PropType<(checked: boolean) => unknown>,\n  rectangle: booleanProp,\n  name: String,\n  onChange: eventProp<(value: boolean) => void>()\n})\n\nexport type SwitchProps = ExtractPropTypes<typeof switchProps>\nexport type SwitchCProps = ConfigurableProps<SwitchProps, never, 'onBeforeChange'>\n"
    },
    {
      "target": "components/switch/switch.vue",
      "content": "<script lang=\"ts\">\nimport { useFieldStore } from '@/components/form'\nimport { Icon } from '@/components/icon'\n\nimport { computed, defineComponent, ref, watch } from 'vue'\n\nimport {\n  createIconProp,\n  createSizeProp,\n  createStateProp,\n  emitEvent,\n  useIcons,\n  useNameHelper,\n  useProps\n} from '@pocui/config'\nimport { isPromise } from '@pocui/utils'\n\nimport { switchProps } from './props'\n\nimport type { SlotsType } from 'vue'\n\nexport default defineComponent({\n  name: 'Switch',\n  description:'常用于需要形象地切换正反状态的场合。',\n  categories: ['form'],\n  components: {\n    Icon\n  },\n  props: switchProps,\n  emits: ['update:value'],\n  slots: Object as SlotsType<{\n    close(): any,\n    icon(props: { value: boolean }): any,\n    loading(): any,\n    open(): any\n  }>,\n  setup(_props, { emit }) {\n    const { idFor, state, disabled, loading, size, validateField, getFieldValue, setFieldValue } =\n      useFieldStore<boolean>(() => input.value?.focus())\n\n    const props = useProps('switch', _props, {\n      size: createSizeProp(size),\n      state: createStateProp(state),\n      value: {\n        default: () => getFieldValue() ?? false,\n        static: true\n      },\n      disabled: () => disabled.value,\n      openColor: '',\n      closeColor: '',\n      loading: () => loading.value,\n      loadingIcon: createIconProp(),\n      loadingEffect: null,\n      openIcon: createIconProp(),\n      closeIcon: createIconProp(),\n      openText: '',\n      closeText: '',\n      onBeforeChange: {\n        default: null,\n        isFunc: true\n      },\n      rectangle: false,\n      name: {\n        default: '',\n        static: true\n      }\n    })\n\n    const nh = useNameHelper('switch')\n    const icons = useIcons()\n    const currentValue = ref(props.value)\n\n    const input = ref<HTMLInputElement>()\n\n    const className = computed(() => {\n      return [\n        nh.b(),\n        nh.bs('vars'),\n        {\n          [nh.in()]: props.inherit,\n          [nh.bm('open')]: currentValue.value,\n          [nh.bm(props.size)]: props.size !== 'default',\n          [nh.bm(props.state)]: props.state !== 'default',\n          [nh.bm('disabled')]: props.disabled,\n          [nh.bm('loading')]: props.loading,\n          [nh.bm('rectangle')]: props.rectangle\n        }\n      ]\n    })\n    const style = computed(() => {\n      return {\n        backgroundColor: currentValue.value ? props.openColor : props.closeColor\n      }\n    })\n    const signalStyle = computed(() => {\n      return {\n        color: currentValue.value ? props.openColor : props.closeColor\n      }\n    })\n    const isDisabled = computed(() => {\n      return props.disabled || props.loading\n    })\n\n    watch(\n      () => props.value,\n      value => {\n        currentValue.value = value\n      }\n    )\n\n    async function handleChange(checked = !currentValue.value) {\n      if (checked === currentValue.value) return\n\n      let result: unknown = true\n\n      if (typeof props.onBeforeChange === 'function') {\n        result = props.onBeforeChange(checked)\n\n        if (isPromise(result)) {\n          result = await result\n        }\n      }\n\n      if (result !== false) {\n        currentValue.value = checked\n\n        emit('update:value', checked)\n        setFieldValue(checked)\n        emitEvent(props.onChange, checked)\n        validateField()\n      }\n    }\n\n    return {\n      props,\n      nh,\n      idFor,\n      currentValue,\n\n      className,\n      style,\n      signalStyle,\n      isDisabled,\n      icons,\n\n      input,\n\n      handleChange,\n\n      focus: (options?: FocusOptions) => input.value?.focus(options),\n      blur: () => input.value?.blur()\n    }\n  }\n})\n</script>\n\n<template>\n  <label\n    :id=\"idFor\"\n    :class=\"className\"\n    role=\"switch\"\n    :aria-checked=\"currentValue\"\n    :style=\"style\"\n  >\n    <input\n      ref=\"input\"\n      type=\"checkbox\"\n      :class=\"nh.be('input')\"\n      :checked=\"currentValue\"\n      :disabled=\"isDisabled\"\n      :name=\"props.name\"\n      @submit.prevent\n      @change=\"handleChange()\"\n      @click.stop\n    />\n    <span :class=\"nh.be('placeholder')\">\n      <span :class=\"nh.be('open-text')\">\n        <slot name=\"open\">{{ props.openText }}</slot>\n      </span>\n      <span :class=\"nh.be('close-text')\">\n        <slot name=\"close\">{{ props.closeText }}</slot>\n      </span>\n    </span>\n    <span :class=\"nh.be('signal')\" :style=\"signalStyle\">\n      <slot v-if=\"props.loading\" name=\"loading\">\n        <Icon\n          v-bind=\"icons.loading\"\n          :effect=\"props.loadingEffect || icons.loading.effect\"\n          :icon=\"props.loadingIcon || icons.loading.icon\"\n          label=\"loading\"\n        ></Icon>\n      </slot>\n      <slot v-else name=\"icon\" :value=\"currentValue\">\n        <Icon v-if=\"currentValue && props.openIcon\" :icon=\"props.openIcon\"></Icon>\n        <Icon v-else-if=\"!currentValue && props.closeIcon\" :icon=\"props.closeIcon\"></Icon>\n      </slot>\n    </span>\n    <span :class=\"nh.be('label')\">\n      <span v-if=\"currentValue\" :class=\"nh.be('open-text')\">\n        <slot name=\"open\">{{ props.openText }}</slot>\n      </span>\n      <span v-else :class=\"nh.be('close-text')\">\n        <slot name=\"close\">{{ props.closeText }}</slot>\n      </span>\n    </span>\n  </label>\n</template>\n"
    }
  ],
  "dependencies": ["@pocui/config", "vue", "@pocui/utils"],
  "registryDependencies": ["icon", "switch.scss", "form"],
  "categories": ["form"],
  "meta": { "isReferenceOnly": false }
}
