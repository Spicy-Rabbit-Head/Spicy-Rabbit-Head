{
  "name": "menu",
  "type": "registry:component",
  "description": "为页面和功能提供导航的菜单列表。",
  "files": [
    {
      "target": "components/menu/index.ts",
      "content": "export { default as Menu } from './menu'\nexport { menuProps } from './props'\n\nexport type { MenuProps, MenuCProps } from './props'\nexport type { MenuMarkerType, MenuGroupType, MenuOptions, MenuExposed } from './symbol'\n"
    },
    {
      "target": "components/menu/menu-group.tsx",
      "content": "import { MenuItem } from '@/components/menu-item'\n\nimport { SlotsType, computed, defineComponent, inject, provide, reactive, ref, renderSlot } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { callIfFunc } from '@pocui/utils'\n\nimport { MENU_GROUP_STATE, MENU_ITEM_STATE, MENU_STATE } from './symbol'\n\nimport type { PropType } from 'vue'\n\nimport type { MenuOptions } from './symbol'\n\nconst MenuGroup = defineComponent({\n  name: 'MenuGroup',\n  description:'可折叠分组，提供标题栏与内部菜单项的展开/收起控制，实现二级及以上层级收纳。',\n  categories: ['navigation'],\n  props: {\n    label: String,\n    children: Array as PropType<MenuOptions[]>\n  },\n  slots: Object as SlotsType<{\n    default(): any,\n    label(): any\n  }>,\n  setup(_props, { slots }) {\n    const props = useProps('menuGroup', _props, {\n      label: {\n        default: '',\n        static: true\n      },\n      children: {\n        default: () => [],\n        static: true\n      }\n    })\n\n    const menuState = inject(MENU_STATE, null)\n    const parentItemState = inject(MENU_ITEM_STATE, null)\n\n    const nh = useNameHelper('menu-group')\n    const menuNh = useNameHelper('menu')\n    const indent = ref(1)\n\n    if (parentItemState) {\n      indent.value = parentItemState.indent + 1\n    }\n\n    const titleStyle = computed(() => {\n      return {\n        paddingLeft: parentItemState?.isUsePopper ? undefined : `calc(${menuNh.gcv('indent-width')} * ${indent.value})`\n      }\n    })\n    const onlyShowSlot = computed(() => {\n      return menuState?.horizontal && !parentItemState\n    })\n\n    provide(MENU_GROUP_STATE, reactive({ indent }))\n\n    function renderChildren() {\n      return renderSlot(slots, 'default', {}, () => {\n        if (!props.children?.length) {\n          return []\n        }\n\n        const renderItem = (item: MenuOptions) => (\n          <MenuItem\n            label={item.label}\n            icon={item.icon}\n            icon-props={item.iconProps}\n            disabled={item.disabled}\n            children={item.children}\n            route={item.route}\n            meta={item.meta}\n          >\n            {item.name ? callIfFunc(item.name) : item.label}\n          </MenuItem>\n        )\n\n        return props.children.map(child => {\n          if (child.group) {\n            return (\n              <MenuGroup key={child.label} label={child.name ? callIfFunc(child.name) : child.label}>\n                {child.children?.map(renderItem)}\n              </MenuGroup>\n            )\n          }\n\n          return renderItem(child)\n        })\n      })\n    }\n\n    return () => {\n      if (onlyShowSlot.value) {\n        return slots.default?.()\n      }\n\n      return (\n        <li class={nh.b()}>\n          <div class={nh.be('label')}>\n            <span class={nh.be('title')} style={titleStyle.value}>\n              {slots.label ? slots.label() : props.label}\n            </span>\n          </div>\n          <ul class={nh.be('list')}>{renderChildren()}</ul>\n        </li>\n      )\n    }\n  }\n})\n\nexport default MenuGroup\n"
    },
    {
      "target": "components/menu/menu-item.tsx",
      "content": "import { CollapseTransition } from '@/components/collapse-transition'\nimport { Icon } from '@/components/icon'\n\nimport { Popper } from '@/components/popper'\nimport { Tooltip } from '@/components/tooltip'\n\nimport {\n  computed,\n  defineAsyncComponent,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  provide,\n  reactive,\n  ref,\n  renderSlot,\n  toRef,\n  watch\n} from 'vue'\n\nimport {\n  createIconProp,\n  emitEvent,\n  useHoverDelay,\n  useIcons,\n  useNameHelper,\n  useProps\n} from '@pocui/config'\n\nimport { useClickOutside, usePopper, useSetTimeout } from '@pocui/hooks'\n\nimport { callIfFunc } from '@pocui/utils'\n\nimport { menuItemProps } from './props'\n\nimport { MENU_GROUP_STATE, MENU_ITEM_STATE, MENU_STATE } from './symbol'\n\nimport type { SlotsType } from 'vue'\n\nimport type { MenuOptions } from './symbol'\n\nimport type { Placement } from '@pocui/hooks'\n\nimport type { PopperExposed } from '@/components/popper'\n\nconst MenuGroup = defineAsyncComponent(() => import('./menu-group'))\n\nconst MenuItem = defineComponent({\n  name: 'MenuItem',\n  description:'单条菜单节点，支持图标、选中、禁用、跳转与点击事件，是用户执行导航或操作的最小单元。',\n  categories: ['navigation'],\n  props: menuItemProps,\n  slots: Object as SlotsType<{\n    icon?(): any,\n    default?(): any,\n    group?(): any\n  }>,\n  emits: [],\n  setup(_props, { slots, expose }) {\n    const props = useProps('menuItem', _props, {\n      label: {\n        default: null,\n        static: true\n      },\n      icon: createIconProp(),\n      iconProps: null,\n      disabled: false,\n      transfer: null,\n      trigger: null,\n      transitionName: null,\n      meta: null,\n      children: {\n        default: () => [],\n        static: true\n      },\n      route: null\n    })\n\n    const menuState = inject(MENU_STATE, null)\n    const parentItemState = inject(MENU_ITEM_STATE, null)\n    const groupState = inject(MENU_GROUP_STATE, null)\n\n    const nh = useNameHelper('menu')\n    const icons = useIcons()\n    const hoverDelay = useHoverDelay()\n\n    const baseClass = nh.be('item')\n    const placement = ref<Placement>('right-start')\n    const groupExpanded = ref(false)\n    const selected = ref(false)\n    const sonSelected = ref(false)\n    const popperShow = ref(false)\n\n    const indent = computed(() => (parentItemState?.indent ?? 0) + 1)\n    const propTransfer = computed(() => props.transfer ?? menuState?.transfer ?? false)\n    const inTransfer = computed(() => (parentItemState ? parentItemState.transfer : false))\n    const transfer = computed(() => !inTransfer.value && propTransfer.value)\n    const markerType = computed(() => menuState?.markerType || 'right')\n\n    const wrapper = useClickOutside(handleClickOutside)\n    const popper = ref<PopperExposed>()\n    const { reference, transferTo, updatePopper } = usePopper({\n      placement,\n      transfer,\n      wrapper,\n      popper: computed(() => popper.value?.wrapper),\n      shift: { crossAxis: true }\n    })\n\n    const isGroup = computed(() => !!(slots.group || props.children?.length))\n    const showGroup = computed(() => isGroup.value && groupExpanded.value)\n    const className = computed(() => {\n      return {\n        [baseClass]: true,\n        [`${baseClass}--disabled`]: props.disabled,\n        [`${baseClass}--group-visible`]: showGroup.value,\n        [`${baseClass}--selected`]: selected.value,\n        [`${baseClass}--no-icon`]: !props.icon,\n        [`${baseClass}--son-selected`]: sonSelected.value\n      }\n    })\n    const labelStyle = computed(() => {\n      if (menuState?.horizontal || parentItemState?.isUsePopper) {\n        return {}\n      }\n\n      const indentWidth = nh.gcv('indent-width')\n      const multiplier = indent.value + (menuState?.isReduced ? 0 : (groupState?.indent ?? 0)) * 0.25\n\n      return {\n        paddingInlineStart:\n          parentItemState && parentItemState.isUsePopper ? undefined : `calc(${indentWidth} * ${multiplier})`\n      }\n    })\n    const isUsePopper = computed(() => {\n      return (\n        (menuState && (menuState.horizontal || menuState.groupType === 'dropdown')) ||\n        (isGroup.value && menuState?.isReduced && !parentItemState) ||\n        !!parentItemState?.isUsePopper\n      )\n    })\n    const tooltipDisabled = computed(() => {\n      return isGroup.value || !!(parentItemState?.isUsePopper || (menuState && !menuState.isReduced))\n    })\n    const tooltipReverse = computed(() => !!menuState?.tooltipReverse)\n    const isHorizontal = computed(() => menuState?.horizontal && !parentItemState)\n    const transition = computed(() => {\n      return (props.transitionName ?? isHorizontal.value) ? nh.ns('drop') : nh.ns('zoom')\n    })\n    const dropTrigger = computed(() => props.trigger || menuState?.trigger || 'hover')\n\n    const itemState = reactive({\n      el: wrapper,\n      label: toRef(props, 'label'),\n      indent,\n      groupExpanded,\n      showGroup,\n      isUsePopper,\n      parentState: parentItemState,\n      transfer: computed(() => inTransfer.value || propTransfer.value),\n      cachedExpanded: groupExpanded.value,\n      updateSonSelected,\n      toggleGroupExpanded,\n      handleMouseEnter,\n      handleMouseLeave\n    })\n\n    provide(MENU_ITEM_STATE, itemState)\n\n    watch(\n      showGroup,\n      value => {\n        if (value && isUsePopper.value) {\n          popperShow.value = true\n          updatePopper()\n        }\n      },\n      { immediate: true }\n    )\n    watch(selected, value => {\n      if (value) {\n        emitEvent(props.onSelect)\n      }\n\n      menuState?.doForEachItem(item => item.updateSonSelected(false, false))\n      value &&\n        nextTick(() => {\n          parentItemState?.updateSonSelected(value)\n        })\n    })\n    watch(groupExpanded, expanded => {\n      if (typeof menuState?.handleExpand === 'function') {\n        menuState.handleExpand(props.label, expanded, props.meta || {})\n      }\n    })\n    watch(\n      isHorizontal,\n      value => {\n        placement.value = value ? 'bottom' : 'right-start'\n      },\n      { immediate: true }\n    )\n\n    if (menuState) {\n      watch(\n        [() => props.label, () => menuState.currentActive],\n        () => {\n          selected.value = props.label === menuState.currentActive\n        },\n        { immediate: true }\n      )\n\n      if (typeof menuState.increaseItem === 'function') {\n        menuState.increaseItem(itemState)\n      }\n    }\n\n    onBeforeUnmount(() => {\n      if (typeof menuState?.decreaseItem === 'function') {\n        menuState.decreaseItem(itemState)\n      }\n    })\n\n    expose({\n      groupExpanded,\n      isGroup,\n      showGroup,\n      isUsePopper,\n      handleSelect,\n      handleMouseEnter,\n      handleMouseLeave\n    })\n\n    function updateSonSelected(selected: boolean, upstream = true) {\n      sonSelected.value = selected\n      upstream && parentItemState?.updateSonSelected(selected)\n    }\n\n    const { timer } = useSetTimeout()\n\n    function handleSelect() {\n      clearTimeout(timer.hover)\n\n      if (props.disabled) return\n\n      if (isGroup.value) {\n        if (isUsePopper.value && dropTrigger.value !== 'click') return\n\n        menuState?.doForEachItem(item => {\n          if (menuState.accordion) {\n            item.groupExpanded = false\n          }\n        })\n        groupExpanded.value = !groupExpanded.value\n      } else {\n        if (isUsePopper.value) {\n          toggleGroupExpanded(false, true)\n        }\n\n        if (menuState) {\n          menuState.handleSelect(props.label, props.meta || {}, props.route)\n        }\n\n        selected.value = true\n      }\n    }\n\n    function toggleGroupExpanded(expanded: boolean, upward = false) {\n      clearTimeout(timer.hover)\n\n      menuState?.doForEachItem(item => {\n        if (menuState.accordion) {\n          item.groupExpanded = false\n        }\n      })\n      groupExpanded.value = expanded\n\n      if (upward && typeof parentItemState?.toggleGroupExpanded === 'function') {\n        parentItemState.toggleGroupExpanded(expanded, upward)\n      }\n    }\n\n    let mouseInList = false\n    let reproduce = false\n\n    function handleMouseEnter() {\n      clearTimeout(timer.hover)\n\n      if (mouseInList || !isUsePopper.value || dropTrigger.value !== 'hover') return\n\n      if (!groupExpanded.value && popperShow.value) {\n        reproduce = true\n        return\n      }\n\n      if (typeof parentItemState?.handleMouseEnter === 'function') {\n        parentItemState.handleMouseEnter()\n      }\n\n      if (props.disabled || !isGroup.value) return\n\n      timer.hover = setTimeout(() => {\n        groupExpanded.value = true\n      }, hoverDelay.value)\n    }\n\n    function handleMouseLeave() {\n      clearTimeout(timer.hover)\n\n      if (mouseInList || !popperShow.value || !isUsePopper.value || dropTrigger.value !== 'hover') {\n        return\n      }\n\n      if (typeof parentItemState?.handleMouseLeave === 'function') {\n        parentItemState.handleMouseLeave()\n      }\n\n      if (props.disabled || !isGroup.value) return\n\n      timer.hover = setTimeout(() => {\n        groupExpanded.value = false\n      }, hoverDelay.value)\n    }\n\n    function handleClickOutside() {\n      if (isUsePopper.value && dropTrigger.value === 'click') {\n        nextTick(() => {\n          groupExpanded.value = false\n        })\n      }\n    }\n\n    function handlePopperHide() {\n      popperShow.value = false\n      groupExpanded.value = false\n\n      if (reproduce) {\n        reproduce = false\n\n        if (typeof parentItemState?.handleMouseEnter === 'function') {\n          parentItemState.handleMouseEnter()\n        }\n\n        if (props.disabled || !isGroup.value) return\n\n        groupExpanded.value = true\n      }\n    }\n\n    function handleKeySelect(event: KeyboardEvent) {\n      const key = event.code || event.key\n\n      if (key === 'Enter' || key === 'NumpadEnter') {\n        event.stopPropagation()\n        handleSelect()\n      } else if (key === 'Space') {\n        event.stopPropagation()\n        event.preventDefault()\n        handleSelect()\n      }\n    }\n\n    function renderChildren() {\n      if (!props.children?.length) {\n        return null\n      }\n\n      const renderItem = (item: MenuOptions) => (\n        <MenuItem\n          label={item.label}\n          icon={item.icon}\n          icon-props={item.iconProps}\n          disabled={item.disabled}\n          children={item.children}\n          route={item.route}\n          meta={item.meta}\n        >\n          {item.name ? callIfFunc(item.name) : item.label}\n        </MenuItem>\n      )\n\n      return props.children.map(child => {\n        if (child.group) {\n          return (\n            <MenuGroup key={child.label} label={child.name ? callIfFunc(child.name) : child.label}>\n              {child.children?.map(renderItem)}\n            </MenuGroup>\n          )\n        }\n\n        return renderItem(child)\n      })\n    }\n\n    function renderLabel() {\n      return (\n        <Tooltip placement='right' reverse={tooltipReverse.value} shift transfer disabled={tooltipDisabled.value}>\n          {{\n            trigger: () => (\n              <div\n                ref={reference}\n                class={{\n                  [nh.be('label')]: true,\n                  [nh.bem('label', `marker-${markerType.value}`)]: true,\n                  [nh.bem('label', 'in-popper')]: parentItemState?.isUsePopper\n                }}\n                role='menuitem'\n                tabindex={0}\n                aria-disabled={props.disabled ? 'true' : undefined}\n                style={[labelStyle.value]}\n                onClick={handleSelect}\n                onKeydown={handleKeySelect}\n                onMouseenter={handleMouseEnter}\n                onMouseleave={handleMouseLeave}\n              >\n                {(slots.icon || props.icon) && (\n                  <div class={nh.be('icon')}>\n                    {slots.icon ? renderSlot(slots, 'icon') : <Icon {...props.iconProps} icon={props.icon}></Icon>}\n                  </div>\n                )}\n                <span\n                  class={{\n                    [nh.be('title')]: true,\n                    [nh.bem('title', 'in-group')]: !isHorizontal.value && isGroup.value\n                  }}\n                >\n                  {slots.default ? renderSlot(slots, 'default') : props.label}\n                </span>\n                {isGroup.value && (\n                  <Icon\n                    {...icons.value.angleDown}\n                    class={{\n                      [nh.be('arrow')]: true,\n                      [nh.bem('arrow', 'visible')]: groupExpanded.value,\n                      [nh.bem('arrow', '')]: sonSelected.value\n                    }}\n                  ></Icon>\n                )}\n              </div>\n            ),\n            default: () => (\n              <span class={nh.be('tooltip-title')}>{slots.default ? renderSlot(slots, 'default') : props.label}</span>\n            )\n          }}\n        </Tooltip>\n      )\n    }\n\n    return () => {\n      return (\n        <li ref={wrapper} class={className.value} role='none'>\n          {renderLabel()}\n          <CollapseTransition appear>\n            {isGroup.value && !isUsePopper.value && (\n              <ul v-show={showGroup.value} class={nh.be('list')}>\n                {slots.group ? renderSlot(slots, 'group') : renderChildren()}\n              </ul>\n            )}\n          </CollapseTransition>\n          {isGroup.value && isUsePopper.value && (\n            <Popper\n              ref={popper}\n              class={[nh.be('popper'), nh.bs('vars'), isHorizontal.value && nh.bem('popper', 'drop')]}\n              visible={popperShow.value && showGroup.value}\n              alive={!transferTo.value || popperShow.value}\n              to={transferTo.value}\n              transition={transition.value}\n              onAfterLeave={handlePopperHide}\n              onMouseenter={() => ((mouseInList = true), handleMouseEnter())}\n              onMouseleave={() => ((mouseInList = false), handleMouseLeave())}\n            >\n              <ul class={nh.be('list')}>{slots.group ? renderSlot(slots, 'group') : renderChildren()}</ul>\n            </Popper>\n          )}\n        </li>\n      )\n    }\n  }\n})\n\nexport default MenuItem\n"
    },
    {
      "target": "components/menu/menu-rest.tsx",
      "content": "import { Icon } from '@/components/icon'\nimport { MenuItem } from '@/components/menu-item'\n\nimport { Popper } from '@/components/popper'\n\nimport { computed, defineComponent, inject, nextTick, provide, reactive, ref, watch } from 'vue'\n\nimport { useHoverDelay, useIcons, useNameHelper } from '@pocui/config'\n\nimport { useClickOutside, usePopper, useSetTimeout } from '@pocui/hooks'\n\nimport { callIfFunc } from '@pocui/utils'\n\nimport { MENU_ITEM_STATE, MENU_STATE } from './symbol'\n\nimport type { PopperExposed } from '@/components/popper'\n\nimport type { PropType } from 'vue'\n\nimport type { MenuOptions } from './symbol'\n\nexport default defineComponent({\n  name: 'MenuRest',\n  description:'折叠溢出按钮，保持顶部导航整洁与可用性。',\n  categories: ['navigation'],\n  props: {\n    menus: {\n      type: Array as PropType<MenuOptions[]>,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const menuState = inject(MENU_STATE, null)\n\n    const nh = useNameHelper('menu')\n    const icons = useIcons()\n    const hoverDelay = useHoverDelay()\n\n    const groupExpanded = ref(false)\n    const sonSelected = ref(false)\n    const popperShow = ref(false)\n\n    const transfer = computed(() => menuState?.transfer ?? false)\n    const dropTrigger = computed(() => menuState?.trigger || 'hover')\n    const wrapper = useClickOutside(handleClickOutside)\n    const popper = ref<PopperExposed>()\n    const { reference, transferTo, updatePopper } = usePopper({\n      placement: ref('bottom'),\n      transfer,\n      wrapper,\n      popper: computed(() => popper.value?.wrapper)\n    })\n\n    const itemState = reactive({\n      el: wrapper,\n      label: '',\n      indent: 1,\n      groupExpanded,\n      showGroup: groupExpanded,\n      isUsePopper: true,\n      parentState: null,\n      transfer,\n      cachedExpanded: false,\n      updateSonSelected,\n      toggleGroupExpanded,\n      handleMouseEnter,\n      handleMouseLeave\n    })\n\n    provide(MENU_ITEM_STATE, itemState)\n\n    watch(groupExpanded, value => {\n      if (value) {\n        popperShow.value = true\n        updatePopper()\n      }\n    })\n\n    function updateSonSelected(selected: boolean) {\n      sonSelected.value = selected\n    }\n\n    function toggleGroupExpanded(expanded: boolean) {\n      groupExpanded.value = expanded\n    }\n\n    const { timer } = useSetTimeout()\n\n    let mouseInList = false\n    let reproduce = false\n\n    function handleMouseEnter() {\n      clearTimeout(timer.hover)\n\n      if (mouseInList || dropTrigger.value !== 'hover') return\n\n      if (!groupExpanded.value && popperShow.value) {\n        reproduce = true\n        return\n      }\n\n      timer.hover = setTimeout(() => {\n        groupExpanded.value = true\n      }, hoverDelay.value)\n    }\n\n    function handleMouseLeave() {\n      clearTimeout(timer.hover)\n\n      if (mouseInList || !popperShow.value || dropTrigger.value !== 'hover') return\n\n      timer.hover = setTimeout(() => {\n        groupExpanded.value = false\n      }, hoverDelay.value)\n    }\n\n    function handleClick() {\n      if (dropTrigger.value === 'click') {\n        groupExpanded.value = true\n      }\n    }\n\n    function handleClickOutside() {\n      if (dropTrigger.value === 'click') {\n        nextTick(() => {\n          groupExpanded.value = false\n        })\n      }\n    }\n\n    function handlePopperHide() {\n      popperShow.value = false\n      groupExpanded.value = false\n\n      if (reproduce) {\n        reproduce = false\n        groupExpanded.value = true\n      }\n    }\n\n    function renderMenuItems() {\n      if (!props.menus?.length) {\n        return null\n      }\n\n      return props.menus.map(item => (\n        <MenuItem\n          key={item.label}\n          label={item.label}\n          icon={item.icon}\n          icon-props={item.iconProps}\n          disabled={item.disabled}\n          children={item.children}\n          route={item.route}\n          meta={item.meta}\n        >\n          {item.name ? callIfFunc(item.name) : item.label}\n        </MenuItem>\n      ))\n    }\n\n    return () => {\n      return (\n        <div ref={wrapper} class={nh.be('rest')} onMouseenter={handleMouseEnter} onMouseleave={handleMouseLeave}>\n          <div\n            ref={reference}\n            class={[nh.be('rest-handler'), sonSelected.value && nh.bem('rest-handler', 'selected')]}\n            onClick={handleClick}\n          >\n            <Icon {...icons.value.ellipsis}></Icon>\n          </div>\n          <Popper\n            ref={popper}\n            class={[nh.be('popper'), nh.bs('vars'), nh.bem('popper', 'drop')]}\n            visible={popperShow.value && groupExpanded.value}\n            alive={!transferTo.value || popperShow.value}\n            to={transferTo.value}\n            transition={nh.ns('drop')}\n            onAfterLeave={handlePopperHide}\n            onMouseenter={() => ((mouseInList = true), handleMouseEnter())}\n            onMouseleave={() => ((mouseInList = false), handleMouseLeave())}\n          >\n            <ul class={[nh.be('list'), nh.bem('list', 'theme')]}>{renderMenuItems()}</ul>\n          </Popper>\n        </div>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/menu/menu.tsx",
      "content": "import { MenuGroup } from '@/components/menu-group'\nimport { MenuItem } from '@/components/menu-item'\nimport { Overflow } from '@/components/overflow'\n\nimport { computed, defineComponent, nextTick, onMounted, provide, reactive, ref, renderSlot, toRef, watch } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { callIfFunc, isDefined } from '@pocui/utils'\n\nimport MenuRest from './menu-rest'\n\nimport { menuProps } from './props'\n\nimport { MENU_STATE } from './symbol'\n\nimport type { RouteLocationRaw, RouteRecordRaw } from 'vue-router'\n\nimport type { MenuItemState, MenuMarkerType, MenuOptions, MenuState } from './symbol'\n\nconst menuMarkerTypes = Object.freeze<MenuMarkerType[]>(['top', 'right', 'bottom', 'left', 'none'])\n\nexport default defineComponent({\n  name: 'Menu',\n  description:'为页面和功能提供导航的菜单列表。',\n  categories: ['navigation'],\n  components: {\n    MenuRest,\n    MenuItem,\n    MenuGroup,\n    Overflow\n  },\n  props: menuProps,\n  emits: ['update:active'],\n  setup(_props, { slots, emit, expose }) {\n    const props = useProps('menu', _props, {\n      active: {\n        default: null,\n        static: true\n      },\n      accordion: false,\n      markerType: {\n        default: 'right',\n        validator: value => menuMarkerTypes.includes(value)\n      },\n      reduced: false,\n      horizontal: false,\n      transfer: false,\n      trigger: 'hover',\n      groupType: {\n        default: 'collapse',\n        validator: value => ['collapse', 'dropdown'].includes(value)\n      },\n      tooltipReverse: null,\n      options: {\n        default: () => [],\n        static: true\n      },\n      router: null,\n      manualRoute: false,\n      indent: null\n    })\n\n    const nh = useNameHelper('menu')\n    const menuItemSet = new Set<MenuItemState>()\n    const currentActive = ref(props.active)\n    const isReduced = ref(false)\n\n    const wrapper = ref<HTMLElement>()\n    const rest = ref<InstanceType<typeof MenuRest>>()\n\n    const markerType = computed(() => {\n      if (props.horizontal && (props.markerType === 'left' || props.markerType === 'right')) {\n        return 'bottom'\n      } else if (!props.horizontal && (props.markerType === 'top' || props.markerType === 'bottom')) {\n        return 'right'\n      } else {\n        return props.markerType ?? (props.horizontal ? 'bottom' : 'right')\n      }\n    })\n    const className = computed(() => {\n      return [\n        nh.b(),\n        nh.bs('vars'),\n        nh.bm(`marker-${markerType.value}`),\n        {\n          [nh.in()]: props.inherit,\n          [nh.bm('reduced')]: isReduced.value,\n          [nh.bm('dropdown')]: props.groupType === 'dropdown',\n          [nh.bm('horizontal')]: props.horizontal\n        }\n      ]\n    })\n    const style = computed(() => {\n      const style: Record<string, string> = {}\n\n      if (isDefined(props.indent)) {\n        style[nh.cv('indent-width')] = typeof props.indent === 'number' ? `${props.indent}px` : props.indent\n      }\n\n      return style\n    })\n    const menus = computed(() => {\n      if (props.options?.length) {\n        return props.options\n      }\n\n      const routes = props.router?.options.routes\n\n      if (!routes?.length) {\n        return []\n      }\n\n      return parseRoutesToMenus(routes)\n    })\n    const currentRoute = computed(() => props.router?.currentRoute.value)\n\n    provide<MenuState>(\n      MENU_STATE,\n      reactive({\n        currentActive,\n        isReduced,\n        horizontal: toRef(props, 'horizontal'),\n        accordion: toRef(props, 'accordion'),\n        groupType: toRef(props, 'groupType'),\n        tooltipReverse: toRef(props, 'tooltipReverse'),\n        transfer: toRef(props, 'transfer'),\n        trigger: toRef(props, 'trigger'),\n        markerType,\n        handleSelect,\n        handleExpand,\n        increaseItem,\n        decreaseItem,\n        doForEachItem\n      })\n    )\n\n    watch(\n      () => props.active,\n      value => {\n        if (value !== currentActive.value) {\n          currentActive.value = value\n        }\n      }\n    )\n    watch(\n      () => props.reduced,\n      value => {\n        if (props.horizontal) return\n\n        if (value) {\n          handleMenuReduce()\n        } else {\n          handleMenuExpand()\n        }\n      }\n    )\n    watch(currentRoute, value => {\n      if (!props.manualRoute && value) {\n        currentActive.value = (value.meta?.label as string) ?? value.path\n      }\n    })\n\n    onMounted(() => {\n      nextTick(() => {\n        if (!props.horizontal && props.reduced) handleMenuReduce()\n      })\n\n      if (props.router && !props.manualRoute && !currentActive.value) {\n        const route = currentRoute.value\n\n        if (route) {\n          currentActive.value = (route.meta?.label as string) ?? currentRoute.value.path\n        }\n      }\n    })\n\n    expose({ expandItemByLabel })\n\n    function parseRoutesToMenus(routes: Readonly<RouteRecordRaw[]>) {\n      const root: MenuOptions = {\n        label: '',\n        children: []\n      }\n      const loop = Array.from(routes).map(route => ({\n        parent: root,\n        route\n      }))\n\n      while (loop.length) {\n        const { parent, route } = loop.shift()!\n        const routeMeta = (route.meta || {}) as any\n\n        if (routeMeta.menu === false) {\n          continue\n        }\n\n        const options = {\n          ...routeMeta,\n          route,\n          label: routeMeta.label || route.path,\n          name: routeMeta.name || route.name\n        } as MenuOptions\n\n        if (!parent.children) {\n          parent.children = []\n        }\n\n        parent.children.push(options)\n\n        if (route.children) {\n          loop.push(\n            ...route.children.map(route => ({\n              parent: options,\n              route\n            }))\n          )\n        }\n      }\n\n      return root.children!\n    }\n\n    function increaseItem(state: MenuItemState) {\n      menuItemSet.add(state)\n    }\n\n    function decreaseItem(state: MenuItemState) {\n      menuItemSet.delete(state)\n    }\n\n    function doForEachItem(cb: (item: MenuItemState) => void) {\n      for (const item of menuItemSet) {\n        cb(item)\n      }\n    }\n\n    function handleSelect(label: string, meta: Record<string, any>, route?: RouteLocationRaw) {\n      if (currentActive.value !== label) {\n        currentActive.value = label\n\n        emit('update:active', label)\n        emitEvent(props.onSelect, label, meta)\n\n        if (!props.manualRoute && props.router && route) {\n          props.router.push(route)\n        }\n      }\n    }\n\n    function handleExpand(label: string, expanded: boolean, meta: Record<string, any>) {\n      if (expanded) {\n        emitEvent(props.onExpand, label, meta)\n      } else {\n        emitEvent(props.onReduce, label, meta)\n      }\n    }\n\n    function handleMenuReduce() {\n      if (props.horizontal) return\n\n      let firstExpandedItem: MenuItemState | null = null\n\n      for (const item of menuItemSet) {\n        item.cachedExpanded = item.showGroup\n\n        if (!firstExpandedItem && item.showGroup) {\n          firstExpandedItem = item\n        }\n\n        item.toggleGroupExpanded(false)\n      }\n\n      isReduced.value = true\n    }\n\n    function handleMenuExpand() {\n      if (props.horizontal) return\n\n      isReduced.value = false\n\n      if (wrapper.value) {\n        const el = wrapper.value\n        const callback = () => {\n          requestAnimationFrame(() => {\n            el.removeEventListener('transitionend', callback)\n\n            const selectedItem = Array.from(menuItemSet).find(item => item.label === currentActive.value)\n\n            requestAnimationFrame(() => {\n              requestAnimationFrame(() => {\n                for (const item of menuItemSet) {\n                  item.groupExpanded = item.cachedExpanded\n                }\n\n                if (selectedItem) {\n                  let parent = selectedItem.parentState\n\n                  while (parent) {\n                    parent.groupExpanded = true\n                    parent = parent.parentState\n                  }\n                }\n              })\n            })\n          })\n        }\n\n        el.addEventListener('transitionend', callback)\n      }\n    }\n\n    function expandItemByLabel(label: string) {\n      for (const item of menuItemSet) {\n        if (item.label === label) {\n          item.toggleGroupExpanded(true, true)\n        }\n      }\n    }\n\n    function renderMenuItem(item: MenuOptions) {\n      return (\n        <MenuItem\n          label={item.label}\n          icon={item.icon}\n          icon-props={item.iconProps}\n          disabled={item.disabled}\n          children={item.children}\n          route={item.route}\n          meta={item.meta}\n        >\n          {item.name ? callIfFunc(item.name) : item.label}\n        </MenuItem>\n      )\n    }\n\n    function renderMenus() {\n      return menus.value.map(menu =>\n        menu.group\n          ? (\n            <MenuGroup key={menu.label} label={menu.name ? callIfFunc(menu.name) : menu.label}>\n              {menu.children?.length ? menu.children.map(renderMenuItem) : null}\n            </MenuGroup>\n            )\n          : (\n              renderMenuItem(menu)\n            )\n      )\n    }\n\n    return () => {\n      return (\n        <ul ref={wrapper} class={className.value} role='menu' tabindex={-1} style={style.value}>\n          {renderSlot(slots, 'default', {}, () => {\n            return props.horizontal\n              ? [\n                <Overflow class={nh.be('overflow')} inherit key={0}>\n                  {{\n                    default: renderMenus,\n                    counter: ({ count }: { count: number }) => (\n                      <MenuRest ref={rest} menus={menus.value.slice(-count)}></MenuRest>\n                    )\n                  }}\n                </Overflow>\n                ]\n              : renderMenus()\n          })}\n        </ul>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/menu/props.ts",
      "content": "import { booleanProp, booleanStringProp, buildProps, eventProp, iconProp } from '@pocui/config'\n\nimport type { IconMinorProps } from '@/components/icon'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { RouteLocationRaw, Router } from 'vue-router'\nimport type { MenuGroupType, MenuMarkerType, MenuOptions } from './symbol'\n\nexport const menuProps = buildProps({\n  active: String,\n  accordion: booleanProp,\n  markerType: String as PropType<MenuMarkerType>,\n  reduced: booleanProp,\n  horizontal: booleanProp,\n  transfer: booleanStringProp,\n  trigger: String as PropType<'hover' | 'click'>,\n  groupType: String as PropType<MenuGroupType>,\n  tooltipReverse: booleanProp,\n  options: Array as PropType<MenuOptions[]>,\n  router: Object as PropType<Router>,\n  manualRoute: booleanProp,\n  indent: [String, Number],\n  onSelect: eventProp<(label: string, meta: any) => void>(),\n  onExpand: eventProp<(label: string, meta: any) => void>(),\n  onReduce: eventProp<(label: string, meta: any) => void>()\n})\n\nexport type MenuProps = ExtractPropTypes<typeof menuProps>\nexport type MenuCProps = ConfigurableProps<MenuProps>\n\nexport const menuItemProps = buildProps({\n  label: String,\n  icon: iconProp,\n  iconProps: Object as PropType<IconMinorProps>,\n  disabled: booleanProp,\n  transfer: booleanStringProp,\n  trigger: String as PropType<'hover' | 'click'>,\n  transitionName: String,\n  meta: Object,\n  children: Array as PropType<MenuOptions[]>,\n  route: [String, Object] as PropType<RouteLocationRaw>,\n  onSelect: eventProp()\n})\n\nexport type MenuItemProps = ExtractPropTypes<typeof menuItemProps>\nexport type MenuItemCProps = ConfigurableProps<MenuItemProps, 'children'>\n\nexport const menuGroupProps = buildProps({\n  label: String,\n  children: Array as PropType<MenuOptions[]>\n})\n\nexport type MenuGroupProps = ExtractPropTypes<typeof menuGroupProps>\n"
    },
    {
      "target": "components/menu/symbol.ts",
      "content": "import type { ComponentPublicInstance, InjectionKey } from 'vue'\nimport type { RouteLocationRaw } from 'vue-router'\n\nexport type MenuMarkerType = 'top' | 'right' | 'bottom' | 'left' | 'none'\nexport type MenuGroupType = 'collapse' | 'dropdown'\n\nexport interface MenuOptions {\n  label: string,\n\n  icon?: Record<string, any> | (() => any) | string,\n\n  iconProps?: string,\n\n  name?: string | (() => string),\n\n  disabled?: boolean,\n\n  group?: boolean,\n\n  meta?: Record<string, any>,\n\n  route?: RouteLocationRaw,\n\n  children?: MenuOptions[]\n}\n\nexport interface MenuItemState {\n  el: Readonly<HTMLElement | null | undefined>,\n\n  label: Readonly<string>,\n\n  indent: Readonly<number>,\n\n  groupExpanded: boolean,\n\n  showGroup: Readonly<boolean>,\n\n  isUsePopper: Readonly<boolean>,\n\n  parentState: MenuItemState | null,\n\n  transfer: Readonly<boolean | string>,\n\n  cachedExpanded: boolean,\n\n  updateSonSelected(selected: boolean, upstream?: boolean): void,\n\n  toggleGroupExpanded(expanded: boolean, upward?: boolean): void,\n\n  handleMouseEnter(): void,\n\n  handleMouseLeave(): void\n}\n\nexport interface MenuGroupState {\n  indent: number\n}\n\nexport interface MenuState {\n  horizontal: boolean,\n\n  accordion: boolean,\n\n  groupType: MenuGroupType,\n\n  tooltipReverse: boolean,\n\n  currentActive: string,\n\n  isReduced: boolean,\n\n  transfer: boolean | string,\n\n  trigger: 'hover' | 'click',\n\n  markerType: MenuMarkerType,\n\n  handleSelect(label: string, meta: Record<string, any>, route?: RouteLocationRaw): void,\n\n  handleExpand(label: string, expanded: boolean, meta: Record<string, any>): void,\n\n  increaseItem(state: MenuItemState): void,\n\n  decreaseItem(state: MenuItemState): void,\n\n  doForEachItem(cb: (item: MenuItemState) => void): void\n}\n\nexport interface MenuExposed extends ComponentPublicInstance {\n  expandItemByLabel: (label: string) => void\n}\n\nexport interface MenuItemExposed extends ComponentPublicInstance {\n  groupExpanded: boolean,\n\n  isGroup: boolean,\n\n  showGroup: boolean,\n\n  isUsePopper: boolean,\n\n  handleSelect: () => void,\n\n  handleMouseEnter: () => void,\n\n  handleMouseLeave: () => void\n}\n\nexport const MENU_ITEM_STATE: InjectionKey<MenuItemState> = Symbol('MENU_ITEM_STATE')\nexport const MENU_GROUP_STATE: InjectionKey<MenuGroupState> = Symbol('MENU_GROUP_STATE')\nexport const MENU_STATE: InjectionKey<MenuState> = Symbol('MENU_STATE')\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils", "@pocui/hooks", "vue-router"],
  "registryDependencies": [
    "menu.scss",
    "menu-item",
    "collapse-transition",
    "icon",
    "popper",
    "tooltip",
    "menu-group",
    "overflow"
  ],
  "categories": ["navigation"],
  "meta": { "isReferenceOnly": false }
}
