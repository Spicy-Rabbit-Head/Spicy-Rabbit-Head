{
  "name": "ellipsis",
  "type": "registry:component",
  "description": "当有一段长到放不下的文本时，可以派上用场。",
  "files": [
    {
      "target": "components/ellipsis/ellipsis.vue",
      "content": "<script setup lang=\"ts\">\nimport { Tooltip } from '@/components/tooltip'\n\nimport { computed, ref } from 'vue'\n\nimport { useHoverDelay, useNameHelper, useProps } from '@pocui/config'\nimport { placementWhileList, useSetTimeout } from '@pocui/hooks'\nimport { getRangeWidth } from '@pocui/utils'\n\nimport { ellipsisProps } from './props'\n\ndefineOptions({ name: 'Ellipsis',\n  description: '当有一段长到放不下的文本时，可以派上用场。',\n  categories: ['display'] })\n\nconst nh = useNameHelper('ellipsis')\n\nconst _props = defineProps(ellipsisProps)\nconst props = useProps('ellipsis', _props, {\n  placement: {\n    default: 'top',\n    validator: value => placementWhileList.includes(value)\n  },\n  transfer: 'body',\n  noHover: false,\n  transitionName: () => nh.ns('fade'),\n  tooltipTheme: {\n    default: 'dark',\n    validator: value => ['light', 'dark'].includes(value)\n  },\n  tipClass: null,\n  maxLines: null,\n  tipMaxWidth: 500,\n  tipDisabled: false,\n  tipShift: false\n})\n\nconst hoverDelay = useHoverDelay()\nconst visible = ref(false)\nconst content = ref('')\n\nconst { timer } = useSetTimeout()\n\nconst wrapper = ref<HTMLElement>()\n\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.inc()]: props.inherit,\n    [nh.bm('multiple')]: props.maxLines\n  }\n})\nconst ellipsisStyle = computed(() => {\n  return props.maxLines > 0 ? { '-webkit-line-clamp': props.maxLines } : ''\n})\nconst tipStyle = computed(() => {\n  return {\n    maxWidth:\n      typeof props.tipMaxWidth === 'string'\n        ? parseFloat(props.tipMaxWidth) || props.tipMaxWidth\n        : `${props.tipMaxWidth}px`\n  }\n})\n\ndefineExpose({\n  visible,\n  wrapper\n})\n\nfunction handleTriggerEnter() {\n  clearTimeout(timer.hover)\n\n  if (props.tipDisabled) return\n\n  timer.hover = setTimeout(() => {\n    if (!wrapper.value || !wrapper.value.childNodes.length) {\n      visible.value = false\n      return\n    }\n\n    // 多行情况下，使用视觉高度和\n    // 真实内容高度来控制是否显示\n    if (props.maxLines > 0) {\n      const scrollHeight = wrapper.value.scrollHeight\n      const clientHeight = wrapper.value.clientHeight\n\n      visible.value = scrollHeight > clientHeight\n    } else {\n      visible.value = getRangeWidth(wrapper.value) > wrapper.value.getBoundingClientRect().width\n    }\n\n    content.value = visible.value ? (wrapper.value.textContent ?? '') : ''\n  }, hoverDelay.value)\n}\n\nfunction handleTriggerLeave() {\n  clearTimeout(timer.hover)\n\n  if (props.tipDisabled) return\n\n  timer.hover = setTimeout(() => {\n    visible.value = false\n  }, hoverDelay.value)\n}\n</script>\n\n<template>\n  <Tooltip\n    :visible=\"visible\"\n    trigger=\"custom\"\n    :disabled=\"props.tipDisabled\"\n    :transfer=\"props.transfer\"\n    :placement=\"props.placement\"\n    :no-hover=\"props.noHover\"\n    :transition-name=\"props.transitionName\"\n    :tip-class=\"props.tipClass\"\n    :tip-style=\"tipStyle\"\n    :reverse=\"props.tooltipTheme === 'dark'\"\n    :shift=\"props.tipShift\"\n    @tip-enter=\"handleTriggerEnter\"\n    @tip-leave=\"handleTriggerLeave\"\n  >\n    <template #trigger>\n      <div\n        ref=\"wrapper\"\n        v-bind=\"$attrs\"\n        :class=\"className\"\n        :style=\"ellipsisStyle\"\n        @mouseenter=\"handleTriggerEnter\"\n        @mouseleave=\"handleTriggerLeave\"\n      >\n        <slot></slot>\n      </div>\n    </template>\n    {{ content }}\n  </Tooltip>\n</template>\n"
    },
    {
      "target": "components/ellipsis/index.ts",
      "content": "import Ellipsis from './ellipsis.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Ellipsis }\nexport { ellipsisProps } from './props'\n\nexport type EllipsisExposed = ComponentPublicInstance & InstanceType<typeof Ellipsis>\n\nexport type { EllipsisProps, EllipsisCProps } from './props'\n"
    },
    {
      "target": "components/ellipsis/props.ts",
      "content": "import { booleanProp, booleanStringProp, buildProps, classProp } from '@pocui/config'\n\nimport type { TooltipShift, TooltipTheme } from '@/components/tooltip'\nimport type { ConfigurableProps } from '@pocui/config'\nimport type { Placement } from '@pocui/hooks'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nexport const ellipsisProps = buildProps({\n  placement: String as PropType<Placement>,\n  transfer: booleanStringProp,\n  noHover: booleanProp,\n  transitionName: String,\n  tooltipTheme: String as PropType<TooltipTheme>,\n  tipClass: classProp,\n  maxLines: Number,\n  tipMaxWidth: [Number, String],\n  tipDisabled: booleanProp,\n  tipShift: {\n    type: [Boolean, String] as PropType<boolean | TooltipShift>,\n    default: null\n  }\n})\n\nexport type EllipsisProps = ExtractPropTypes<typeof ellipsisProps>\nexport type EllipsisCProps = ConfigurableProps<EllipsisProps>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/hooks", "@pocui/utils"],
  "registryDependencies": ["ellipsis.scss", "tooltip"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
