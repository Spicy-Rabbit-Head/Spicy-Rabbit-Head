{
  "name": "progress",
  "type": "registry:component",
  "description": "进度条组件，用于展示任务的完成进度，支持多种样式和状态。",
  "files": [
    {
      "target": "components/progress/index.ts",
      "content": "import Progress from './progress.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Progress }\nexport { progressProps } from './props'\n\nexport type ProgressExposed = ComponentPublicInstance & InstanceType<typeof Progress>\n\nexport type { ProgressProps, ProgressCProps } from './props'\nexport type { ProgressInfoType } from './symbol'\n"
    },
    {
      "target": "components/progress/progress.vue",
      "content": "<script lang=\"ts\">\nimport { Bubble } from '@/components/bubble'\n\nimport { computed, defineComponent } from 'vue'\n\nimport { createStateProp, useNameHelper, useProps } from '@pocui/config'\nimport { callIfFunc, isString, toFixed } from '@pocui/utils'\n\nimport { progressProps } from './props'\n\nimport type { CSSProperties } from 'vue'\n\nimport type { ProgressInfoType } from './symbol'\n\nconst infoTypes = Object.freeze<ProgressInfoType[]>([\n  'outside',\n  'inside',\n  'bubble',\n  'bubble-top',\n  'bubble-bottom',\n  'none'\n])\n\nexport default defineComponent({\n  name: 'Progress',\n  description:'进度条组件，用于展示任务的完成进度，支持多种样式和状态。',\n  categories: ['display'],\n  components: {\n    Bubble\n  },\n  props: progressProps,\n  setup(_props) {\n    const props = useProps('progress', _props, {\n      percentage: {\n        default: 0,\n        validator: value => value >= 0 && value <= 100,\n        static: true\n      },\n      state: createStateProp(),\n      strokeWidth: 8,\n      infoType: {\n        default: 'outside',\n        validator: value => infoTypes.includes(value)\n      },\n      precision: 2,\n      activated: false,\n      strokeColor: {\n        default: null,\n        validator: value => !(Array.isArray(value) && (!value[0] || !value[1]))\n      }\n    })\n\n    const nh = useNameHelper('progress')\n\n    const className = computed(() => {\n      return [\n        nh.b(),\n        nh.bs('vars'),\n        nh.bm(`info-${props.infoType}`),\n        {\n          [nh.in()]: props.inherit,\n          [nh.bm(props.state)]: props.state !== 'default',\n          [nh.bm('activated')]: props.activated\n        }\n      ]\n    })\n    const style = computed(() => {\n      return { [nh.cv('percentage')]: props.percentage }\n    })\n    const trackStyle = computed(() => {\n      return {\n        height: `${props.strokeWidth}px`,\n        borderRadius: `${props.strokeWidth}px`\n      }\n    })\n    const fillerStyle = computed(() => {\n      const style: CSSProperties = {\n        borderRadius: `${props.strokeWidth}px`\n      }\n\n      const strokeColor = callIfFunc(props.strokeColor, props.percentage)\n\n      if (isString(strokeColor)) {\n        style.backgroundColor = strokeColor\n      } else if (Array.isArray(strokeColor)) {\n        style.backgroundImage = `linear-gradient(to right, ${strokeColor[0]} 0%, ${strokeColor[1]} 100%)`\n      }\n\n      return style\n    })\n    const useBubble = computed(() => {\n      return props.infoType.includes('bubble')\n    })\n    const bubbleType = computed(() => {\n      if (useBubble.value) {\n        return props.infoType.split('-').pop() === 'bottom' ? 'bottom' : 'top'\n      }\n\n      return 'top'\n    })\n    const bubbleStyle = computed(() => {\n      if (!useBubble.value) return {}\n\n      const type = bubbleType.value === 'top' ? 'bottom' : 'top'\n\n      return {\n        [type]: `${props.strokeWidth}px`\n      }\n    })\n    const percentValue = computed(() => toFixed(props.percentage, props.precision))\n\n    return {\n      props,\n      nh,\n\n      className,\n      style,\n      trackStyle,\n      fillerStyle,\n      useBubble,\n      bubbleType,\n      bubbleStyle,\n      percentValue\n    }\n  }\n})\n</script>\n\n<template>\n  <div\n    :class=\"className\"\n    :style=\"style\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentValue\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div :class=\"nh.be('track')\" :style=\"trackStyle\">\n      <div :class=\"nh.be('filler')\" :style=\"fillerStyle\"></div>\n      <div v-if=\"props.infoType === 'inside'\" :class=\"nh.be('info')\">\n        <slot>\n          <span :class=\"nh.be('percentage')\">\n            {{ `${percentValue}%` }}\n          </span>\n        </slot>\n      </div>\n    </div>\n    <div v-if=\"useBubble\" :class=\"nh.be('reference')\">\n      <Bubble\n        inherit\n        :class=\"nh.be('bubble')\"\n        :style=\"bubbleStyle\"\n        :placement=\"bubbleType\"\n        :content-class=\"nh.be('info')\"\n      >\n        <slot>\n          <span :class=\"nh.be('percentage')\">\n            {{ `${percentValue}%` }}\n          </span>\n        </slot>\n      </Bubble>\n    </div>\n    <div v-else-if=\"props.infoType === 'outside'\" :class=\"nh.be('info')\">\n      <slot>\n        <span :class=\"nh.be('percentage')\">\n          {{ `${percentValue}%` }}\n        </span>\n      </slot>\n    </div>\n  </div>\n</template>\n"
    },
    {
      "target": "components/progress/props.ts",
      "content": "import { booleanProp, buildProps, stateProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ProgressInfoType, ProgressStrokeColor } from './symbol'\n\nexport const progressProps = buildProps({\n  percentage: Number,\n  state: stateProp,\n  strokeWidth: Number,\n  infoType: String as PropType<ProgressInfoType>,\n  precision: Number,\n  activated: booleanProp,\n  strokeColor: [String, Array, Function] as PropType<ProgressStrokeColor>\n})\n\nexport type ProgressProps = ExtractPropTypes<typeof progressProps>\nexport type ProgressCProps = ConfigurableProps<ProgressProps, 'percentage'>\n"
    },
    {
      "target": "components/progress/symbol.ts",
      "content": "export type ProgressInfoType =\n  | 'outside'\n  | 'inside'\n  | 'bubble'\n  | 'bubble-top'\n  | 'bubble-bottom'\n  | 'none'\n\nexport type ProgressStrokeColor =\n  | string\n  | [string, string]\n  | ((percentage: number) => string | [string, string])\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["progress.scss", "bubble"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
