{
  "name": "tag",
  "type": "registry:component",
  "description": "用于对事物进行标记或分类。",
  "files": [
    {
      "target": "components/tag/index.ts",
      "content": "import Tag from './tag'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Tag }\nexport { tagProps } from './props'\n\nexport type TagExposed = ComponentPublicInstance & InstanceType<typeof Tag>\n\nexport type { TagProps, TagCProps } from './props'\nexport type { TagState, TagNamedColor, TagType } from './symbol'\n"
    },
    {
      "target": "components/tag/props.ts",
      "content": "import { booleanProp, buildProps, eventProp, sizeProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { TagType } from './symbol'\n\nexport const tagProps = buildProps({\n  size: sizeProp,\n  type: String as PropType<TagType>,\n  border: booleanProp,\n  closable: booleanProp,\n  color: String,\n  simple: booleanProp,\n  circle: booleanProp,\n  prefix: [String, Number],\n  prefixBg: String,\n  prefixColor: String,\n  suffix: [String, Number],\n  suffixBg: String,\n  suffixColor: String,\n  disabled: booleanProp,\n  onClose: eventProp()\n})\n\nexport type TagProps = ExtractPropTypes<typeof tagProps>\nexport type TagCProps = ConfigurableProps<TagProps>\n"
    },
    {
      "target": "components/tag/symbol.ts",
      "content": "export type TagState = 'default' | 'primary' | 'info' | 'success' | 'error' | 'warning'\n\nexport type TagNamedColor =\n  | 'lime'\n  | 'pink'\n  | 'magenta'\n  | 'tomato'\n  | 'orange'\n  | 'cyan'\n  | 'navy'\n  | 'gold'\n  | 'purple'\n\nexport type TagType = TagState | TagNamedColor\n"
    },
    {
      "target": "components/tag/tag.tsx",
      "content": "import { Icon } from '@/components/icon'\n\nimport { SlotsType, computed, defineComponent } from 'vue'\n\nimport { createSizeProp, emitEvent, useIcons, useNameHelper, useProps } from '@pocui/config'\nimport { adjustAlpha, isClient, mixColor, parseColorToRgba } from '@pocui/utils'\n\nimport { tagProps } from './props'\n\nimport type { TagType } from './symbol'\n\nconst tagTypes = Object.freeze<TagType[]>([\n  'default',\n  'primary',\n  'info',\n  'success',\n  'error',\n  'warning',\n  'lime',\n  'pink',\n  'magenta',\n  'tomato',\n  'orange',\n  'cyan',\n  'navy',\n  'gold',\n  'purple'\n])\n\nexport default defineComponent({\n  name: 'Tag',\n  description:'用于对事物进行标记或分类。',\n  categories: ['display'],\n  components: {\n    Icon\n  },\n  props: tagProps,\n  emits: [],\n  slots: Object as SlotsType<{\n    default(): any,\n    prefix(): any,\n    suffix(): any\n  }>,\n  setup(_props, { slots }) {\n    const props = useProps('tag', _props, {\n      size: createSizeProp(),\n      type: {\n        default: 'default',\n        validator: (value: TagType) => tagTypes.includes(value)\n      },\n      border: false,\n      closable: false,\n      color: null,\n      simple: false,\n      circle: false,\n      prefix: '',\n      prefixBg: '',\n      prefixColor: '',\n      suffix: '',\n      suffixBg: '',\n      suffixColor: '',\n      disabled: false\n    })\n\n    const nh = useNameHelper('tag')\n    const icons = useIcons()\n\n    const className = computed(() => {\n      return {\n        [nh.b()]: true,\n        [nh.bs('vars')]: true,\n        [nh.in()]: props.inherit,\n        [nh.bm(props.size)]: props.size !== 'default',\n        [nh.bm(props.type)]: props.type !== 'default',\n        [nh.bm('border')]: props.border,\n        [nh.bm('simple')]: props.simple,\n        [nh.bm('circle')]: props.circle,\n        [nh.bm('closable')]: props.closable,\n        [nh.bm('disabled')]: props.disabled\n      }\n    })\n    const style = computed(() => {\n      if (!props.color) return undefined\n\n      const rootStyle = isClient ? getComputedStyle(document.documentElement) : null\n      const white = parseColorToRgba(rootStyle?.getPropertyValue(nh.nv('color-white')) || '#fff')\n      const baseColor = parseColorToRgba(props.color)\n      const base = baseColor.toString()\n\n      return nh.cvm({\n        color: 'var(--poc-color-white)',\n        'bg-color': base,\n        'b-color': base,\n        'close-color': 'var(--poc-color-white)',\n        'd-color': mixColor(white, baseColor, 0.3).toString(),\n        ...(props.simple || props.border\n          ? {\n              color: base,\n              'close-color': base\n            }\n          : {}),\n        ...(props.simple\n          ? {\n              'bg-color': adjustAlpha(baseColor, 0.2).toString()\n            }\n          : {})\n      })\n    })\n\n    function handleClose(event: MouseEvent) {\n      if (!props.closable || props.disabled || event.button > 0) {\n        return false\n      }\n\n      event.stopPropagation()\n      emitEvent(props.onClose)\n    }\n\n    function renderClose() {\n      if (!props.closable) return null\n\n      return (\n        <button type='button' class={nh.be('close')} onClick={handleClose}>\n          <Icon {...icons.value.close} label='close'></Icon>\n        </button>\n      )\n    }\n\n    return () => {\n      const hasSuffix = props.suffix === 0 || props.suffix || slots.suffix\n\n      return (\n        <div class={className.value} style={style.value}>\n          {props.prefix === 0 || props.prefix || slots.prefix\n            ? (\n              <span\n                class={[nh.be('unit'), nh.be('prefix')]}\n                style={{\n                  color: props.prefixColor,\n                  backgroundColor: props.prefixBg,\n                  borderColor: props.prefixBg\n                }}\n              >\n                {slots.prefix ? slots.prefix() : props.prefix}\n              </span>\n              )\n            : null}\n          <span class={[nh.be('unit'), nh.be('content')]}>\n            {slots.default?.()}\n            {!hasSuffix && renderClose()}\n          </span>\n          {hasSuffix\n            ? (\n              <span\n                class={[nh.be('unit'), nh.be('suffix')]}\n                style={{\n                  color: props.suffixColor,\n                  backgroundColor: props.suffixBg,\n                  borderColor: props.suffixBg\n                }}\n              >\n                {slots.suffix ? slots.suffix() : props.suffix}\n                {renderClose()}\n              </span>\n              )\n            : null}\n        </div>\n      )\n    }\n  }\n})\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["tag.scss", "icon"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
