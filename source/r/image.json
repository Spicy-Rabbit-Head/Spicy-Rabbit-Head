{
  "name": "image",
  "type": "registry:component",
  "description": "用于为图片显示快速提供占位、懒加载等功能。",
  "files": [
    {
      "target": "components/image/image-group.vue",
      "content": "<script setup lang=\"ts\">\nimport { ImageViewer } from '@/components/image-viewer'\n\nimport { computed, provide, reactive, ref, toRef } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { debounceMinor } from '@pocui/utils'\n\nimport { imageGroupProps } from './props'\n\nimport { GROUP_STATE } from './symbol'\n\nimport type { ImageState } from './symbol'\n\ndefineOptions({ name: 'ImageGroup',\n  description:'图片组容器，简化图集排版。',\n  categories: ['display'] })\n\nconst _props = defineProps(imageGroupProps)\nconst props = useProps('imageGroup', _props, {\n  showAll: false,\n  preview: false,\n  viewerTransfer: null\n})\n\ndefineSlots<{\n  default(): any,\n  preview(props: { src: string }): any\n}>()\n\nconst nh = useNameHelper('image-group')\n\nconst currentActive = ref(false)\nconst currentIndex = ref(0)\nconst imageStates = reactive(new Set<ImageState>())\n\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.ns('image-vars'),\n    {\n      [nh.bm('preview')]: props.preview\n    }\n  ]\n})\nconst srcList = computed(() => Array.from(imageStates).map(state => state.src))\n\nconst refreshIndex = debounceMinor(() => {\n  const total = imageStates.size\n\n  Array.from(imageStates).forEach((item, index) => {\n    item.index = index\n    item.total = total\n  })\n})\n\nprovide(\n  GROUP_STATE,\n  reactive({\n    showAll: toRef(props, 'showAll'),\n    preview: toRef(props, 'preview'),\n    increaseItem,\n    decreaseItem,\n    handlePreview\n  })\n)\n\ndefineExpose({\n  currentActive,\n  currentIndex\n})\n\nfunction increaseItem(item: ImageState) {\n  imageStates.add(item)\n  refreshIndex()\n}\n\nfunction decreaseItem(item: ImageState) {\n  imageStates.delete(item)\n  refreshIndex()\n}\n\nfunction handlePreview(item: ImageState) {\n  currentIndex.value = item.index\n  currentActive.value = true\n\n  emitEvent(props.onPreview, item.src, Array.from(srcList.value))\n}\n</script>\n\n<template>\n  <div :class=\"className\">\n    <slot></slot>\n    <ImageViewer\n      v-if=\"props.preview\"\n      v-model:active=\"currentActive\"\n      v-model:index=\"currentIndex\"\n      :src-list=\"srcList\"\n      :transfer=\"props.viewerTransfer\"\n    >\n      <template #default=\"{ src }\">\n        <slot v-if=\"$slots.preview\" name=\"preview\" :src=\"src\"></slot>\n      </template>\n    </ImageViewer>\n  </div>\n</template>\n"
    },
    {
      "target": "components/image/image-viewer.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@/components/icon'\nimport { Masker } from '@/components/masker'\nimport { Viewer } from '@/components/viewer'\n\nimport { computed, ref, watch } from 'vue'\n\nimport { emitEvent, useIcons, useNameHelper, useProps } from '@pocui/config'\nimport { boundRange, ensureArray, isDefined } from '@pocui/utils'\n\nimport { imageViewerProps } from './props'\n\ndefineOptions({ name: 'ImageViewer',description:'全屏图片查看器，支持缩放、旋转、拖拽、键盘翻页及缩略图导航，实现沉浸式大图浏览体验。', categories: ['display'] })\n\nconst _props = defineProps(imageViewerProps)\nconst props = useProps('imageViewer', _props, {\n  active: false,\n  index: 0,\n  srcList: {\n    default: '',\n    static: true\n  },\n  transfer: false,\n  viewerProps: () => ({})\n})\n\nconst emit = defineEmits(['update:active', 'update:index'])\n\nconst nh = useNameHelper('image-viewer')\nconst icons = useIcons()\n\nconst currentActive = ref(props.active)\nconst currentIndex = ref(props.index)\n\nconst viewer = ref<InstanceType<typeof Viewer>>()\n\ndefineSlots<{\n  default(props: { src: string }): any,\n  prev(props: { disabled: boolean }): any,\n  next(props: { disabled: boolean }): any,\n  close(): any\n}>()\n\nconst className = computed(() => {\n  return [nh.b(), nh.ns('image-vars'), props.inherit && nh.in()]\n})\nconst srcArray = computed(() => ensureArray(isDefined(props.srcList) ? props.srcList : ''))\nconst prevDisabled = computed(() => currentIndex.value <= 0)\nconst nextDisabled = computed(() => currentIndex.value >= srcArray.value.length - 1)\n\nwatch(\n  () => props.active,\n  value => {\n    currentActive.value = value\n  }\n)\nwatch(\n  () => props.index,\n  value => {\n    currentIndex.value = value\n  }\n)\nwatch(() => srcArray.value.length, verifyIndex)\n\ndefineExpose({\n  currentActive,\n  currentIndex,\n  prevDisabled,\n  nextDisabled,\n  viewer\n})\n\nfunction setActive(active: boolean) {\n  if (currentActive.value === active) return\n\n  currentActive.value = active\n\n  emit('update:active', active)\n  emitEvent(props.onToggle, active)\n}\n\nfunction verifyIndex() {\n  currentIndex.value = boundRange(currentIndex.value, 0, srcArray.value.length - 1)\n}\n\nfunction handleChange() {\n  const value = currentIndex.value\n\n  viewer.value?.handleReset()\n  emit('update:index', value)\n  emitEvent(props.onChange, value, srcArray.value[value])\n}\n\nfunction handlePrev() {\n  if (prevDisabled.value) return\n\n  const prev = currentIndex.value\n\n  currentIndex.value--\n  verifyIndex()\n  currentIndex.value !== prev && handleChange()\n  emitEvent(props.onPrev, currentIndex.value, srcArray.value[currentIndex.value])\n}\n\nfunction handleNext() {\n  if (nextDisabled.value) return\n\n  const prev = currentIndex.value\n\n  currentIndex.value++\n  verifyIndex()\n  currentIndex.value !== prev && handleChange()\n  emitEvent(props.onNext, currentIndex.value, srcArray.value[currentIndex.value])\n}\n\nfunction handleClose() {\n  setActive(false)\n  emitEvent(props.onClose)\n}\n\nfunction handleShow() {\n  emitEvent(props.onShow)\n}\n\nfunction handleHide() {\n  emitEvent(props.onHide)\n}\n</script>\n\n<template>\n  <Masker\n    v-slot=\"{ show }\"\n    :active=\"currentActive\"\n    :inherit=\"props.inherit\"\n    :class=\"className\"\n    closable\n    auto-remove\n    :transfer=\"props.transfer\"\n    @show=\"handleShow\"\n    @hide=\"handleHide\"\n    @toggle=\"setActive\"\n  >\n    <div v-show=\"show\" :class=\"nh.be('wrapper')\">\n      <Viewer v-bind=\"props.viewerProps\" ref=\"viewer\">\n        <slot :src=\"srcArray[currentIndex]\">\n          <img :src=\"srcArray[currentIndex]\" alt=\"\" />\n        </slot>\n      </Viewer>\n      <template v-if=\"srcArray.length > 1\">\n        <button\n          type=\"button\"\n          :class=\"[nh.be('prev'), prevDisabled && nh.bem('prev', 'disabled')]\"\n          @click.stop=\"handlePrev\"\n        >\n          <slot name=\"prev\" :disabled=\"prevDisabled\">\n            <div :class=\"nh.be('prev-handler')\">\n              <Icon v-bind=\"icons.angleLeft\" :scale=\"+(icons.angleLeft.scale || 1) * 1.4\" label=\"prev\"></Icon>\n            </div>\n          </slot>\n        </button>\n        <button\n          type=\"button\"\n          :class=\"[nh.be('next'), nextDisabled && nh.bem('next', 'disabled')]\"\n          @click.stop=\"handleNext\"\n        >\n          <slot name=\"next\" :disabled=\"prevDisabled\">\n            <div :class=\"nh.be('next-handler')\">\n              <Icon v-bind=\"icons.angleRight\" :scale=\"+(icons.angleRight.scale || 1) * 1.4\" label=\"next\"></Icon>\n            </div>\n          </slot>\n        </button>\n      </template>\n      <button type=\"button\" :class=\"nh.be('close')\" @click.stop=\"handleClose\">\n        <slot name=\"close\">\n          <div :class=\"nh.be('close-handler')\">\n            <Icon v-bind=\"icons.close\" :scale=\"+(icons.close.scale || 1) * 1.4\" label=\"close\"></Icon>\n          </div>\n        </slot>\n      </button>\n    </div>\n  </Masker>\n</template>\n"
    },
    {
      "target": "components/image/image.vue",
      "content": "<script setup lang=\"ts\">\nimport { ImageViewer } from '@/components/image-viewer'\nimport { Skeleton } from '@/components/skeleton'\n\nimport { computed, inject, onBeforeUnmount, reactive, ref, watch, watchEffect } from 'vue'\n\nimport { emitEvent, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { useIntersection } from '@pocui/hooks'\nimport { isClient, supportImgLoading, toCssSize } from '@pocui/utils'\n\nimport { imageProps } from './props'\n\nimport { GROUP_STATE, objectFitValues } from './symbol'\n\nimport type { ImageState } from './symbol'\n\nconst useImageLoading = supportImgLoading()\n\ndefineOptions({ name: 'Image',\n  description: '用于为图片显示快速提供占位、懒加载等功能。',\n  categories: ['display'] })\n\nconst _props = defineProps(imageProps)\nconst props = useProps('image', _props, {\n  src: {\n    default: '',\n    static: true\n  },\n  fallbackSrc: '',\n  alt: '',\n  fit: {\n    default: 'cover',\n    validator: value => objectFitValues.includes(value)\n  },\n  width: '',\n  height: '',\n  imgAttrs: () => ({}),\n  lazy: false,\n  root: {\n    default: null,\n    static: true\n  },\n  rootMargin: '',\n  preview: false,\n  skeleton: false,\n  placeholder: '',\n  errorTip: '',\n  radius: 0,\n  border: false,\n  previewSrc: '',\n  viewerTransfer: null,\n  viewerProps: () => ({})\n})\n\nconst groupState = inject(GROUP_STATE, null)\n\nconst nh = useNameHelper('image')\nconst locale = useLocale('image')\n\nconst shouldLoad = ref(useImageLoading)\nconst loading = ref(shouldLoad.value)\nconst loadSrc = ref('')\nconst loadFail = ref(false)\nconst fallbackFail = ref(false)\nconst viewerActive = ref(false)\nconst hidden = ref(false)\n\nconst wrapper = ref<HTMLElement>()\n\ndefineSlots<{\n  placeholder(): any,\n  error(): any,\n  preview(props: { src: string }): any\n}>()\n\nconst showError = computed(() => {\n  return loadFail.value && (!props.fallbackSrc || fallbackFail.value)\n})\nconst hasPreview = computed(() => !groupState && props.preview)\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.bs('vars'),\n    {\n      [nh.inc()]: props.inherit,\n      [nh.bm('border')]: props.border,\n      [nh.bm('loading')]: loading.value,\n      [nh.bm('error')]: showError.value,\n      [nh.bm('preview')]: groupState?.preview || hasPreview.value\n    }\n  ]\n})\nconst style = computed(() => {\n  const style: Record<string, string> = {\n    width: toCssSize(props.width),\n    height: toCssSize(props.height),\n    [nh.cv('fit')]: props.fit,\n    [nh.cv('radius')]: props.radius ? `${props.radius}px` : ''\n  }\n\n  if (props.border && typeof props.border === 'string') {\n    style[nh.cv('b-color')] = props.border\n  }\n\n  return style\n})\nconst imageSrc = computed(() => props.src || (props.imgAttrs?.src as string))\nconst imageLoading = computed(() => {\n  return hidden.value || (useImageLoading && props.lazy) ? 'lazy' : undefined\n})\nconst skeletonProps = computed(() => {\n  return typeof props.skeleton === 'object' ? Object.assign({ activated: true }, props.skeleton) : { activated: true }\n})\n\nwatch(imageSrc, value => {\n  loading.value = shouldLoad.value\n  loadSrc.value = value\n  loadFail.value = false\n  fallbackFail.value = false\n})\nwatch(\n  () => props.fallbackSrc,\n  value => {\n    fallbackFail.value = false\n\n    if (loadFail.value) {\n      loading.value = shouldLoad.value\n      loadSrc.value = value\n    }\n  }\n)\n\nloadSrc.value = imageSrc.value\n\nconst state: ImageState = reactive({\n  src: computed(() => props.previewSrc || loadSrc.value),\n  index: 0,\n  total: 0\n})\n\nif (groupState) {\n  groupState.increaseItem(state)\n\n  const stopWatch = watchEffect(() => {\n    hidden.value = !groupState.showAll && state.index > 0\n  })\n\n  onBeforeUnmount(() => {\n    stopWatch()\n    groupState.decreaseItem(state)\n  })\n}\n\nif (!useImageLoading) {\n  let disconnect: (() => void) | undefined\n\n  const stopWatch = watchEffect(() => {\n    disconnect?.()\n    disconnect = undefined\n\n    if (!isClient) return\n\n    const root = typeof props.root === 'string' ? document.querySelector(props.root) : (props.root as Element)\n\n    if (props.lazy) {\n      disconnect = useIntersection({\n        root: typeof root === 'object' ? root : document.documentElement,\n        rootMargin: props.rootMargin,\n        target: wrapper,\n        handler: () => {\n          disconnect?.()\n          disconnect = undefined\n          shouldLoad.value = true\n          loading.value = true\n        }\n      }).disconnect\n    }\n  })\n\n  onBeforeUnmount(() => {\n    stopWatch()\n    disconnect?.()\n  })\n}\n\ndefineExpose({\n  loading,\n  fallbackFail,\n  viewerActive,\n  hidden,\n  wrapper\n})\n\nfunction handleLoad(event: Event) {\n  loading.value = false\n\n  if (!props.fallbackSrc || loadSrc.value !== props.fallbackSrc) {\n    emitEvent(props.onLoad, event)\n  }\n}\n\nfunction handleError(event: Event) {\n  if (props.fallbackSrc) {\n    if (loadSrc.value === props.fallbackSrc) {\n      loading.value = false\n      fallbackFail.value = true\n\n      return\n    }\n\n    loadSrc.value = props.fallbackSrc\n  } else {\n    loading.value = false\n  }\n\n  loadFail.value = true\n  emitEvent(props.onError, event)\n}\n\nfunction handlePreview() {\n  if (!groupState) {\n    if (props.preview) {\n      viewerActive.value = true\n    }\n\n    emitEvent(props.onPreview, props.previewSrc || loadSrc.value)\n    return\n  }\n\n  groupState.handlePreview(state)\n}\n</script>\n\n<template>\n  <div\n    v-show=\"!hidden\"\n    ref=\"wrapper\"\n    :class=\"className\"\n    role=\"none\"\n    :style=\"style\"\n  >\n    <slot v-if=\"loading\" name=\"placeholder\">\n      <Skeleton\n        v-if=\"props.skeleton\"\n        v-bind=\"skeletonProps\"\n        :class=\"nh.be('skeleton')\"\n        image\n      ></Skeleton>\n      <template v-else>\n        <span :class=\"nh.be('placeholder')\">\n          {{ props.placeholder || locale.placeholder }}\n        </span>\n      </template>\n    </slot>\n    <slot v-else-if=\"showError\" name=\"error\">\n      <span :class=\"nh.be('error')\">\n        {{ props.errorTip || props.alt || locale.error }}\n      </span>\n    </slot>\n    <img\n      v-if=\"shouldLoad && !showError\"\n      v-bind=\"props.imgAttrs\"\n      :class=\"nh.be('img')\"\n      :src=\"loadSrc\"\n      :alt=\"props.alt\"\n      :width=\"props.width || undefined\"\n      :height=\"props.height || undefined\"\n      :loading=\"imageLoading\"\n      :aria-label=\"props.alt\"\n      @load=\"handleLoad\"\n      @error=\"handleError\"\n      @click=\"handlePreview\"\n    />\n    <ImageViewer\n      v-if=\"hasPreview\"\n      v-bind=\"props.viewerProps\"\n      v-model:active=\"viewerActive\"\n      :src-list=\"props.previewSrc || loadSrc\"\n      :transfer=\"props.viewerTransfer\"\n    >\n      <template #default=\"{ src }\">\n        <slot v-if=\"$slots.preview\" name=\"preview\" :src=\"src\"></slot>\n      </template>\n    </ImageViewer>\n  </div>\n</template>\n"
    },
    {
      "target": "components/image/index.ts",
      "content": "import Image from './image.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Image }\nexport { imageProps } from './props'\n\nexport type ImageExposed = ComponentPublicInstance & InstanceType<typeof Image>\n\nexport type { ImageProps, ImageCProps } from './props'\nexport type { ImageObjectFit, ImageSkeletonProps } from './symbol'\n"
    },
    {
      "target": "components/image/props.ts",
      "content": "import { booleanProp, booleanStringProp, buildProps, eventProp } from '@pocui/config'\n\nimport type { ViewerProps } from '@/components/viewer'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ImageObjectFit, ImageSkeletonProps } from './symbol'\n\nexport const imageProps = buildProps({\n  src: String,\n  fallbackSrc: String,\n  alt: String,\n  fit: String as PropType<ImageObjectFit>,\n  width: [String, Number],\n  height: [String, Number],\n  imgAttrs: Object as PropType<Record<string, any>>,\n  lazy: booleanProp,\n  root: [String, Object, Function] as PropType<unknown>,\n  rootMargin: String,\n  preview: booleanProp,\n  skeleton: {\n    type: [Boolean, Object] as PropType<boolean | ImageSkeletonProps>,\n    default: null\n  },\n  placeholder: String,\n  errorTip: String,\n  radius: Number,\n  border: booleanStringProp,\n  previewSrc: String,\n  viewerTransfer: booleanStringProp,\n  viewerProps: Object as PropType<ViewerProps>,\n  onLoad: eventProp<(event: Event) => void>(),\n  onError: eventProp<(event: Event) => void>(),\n  onPreview: eventProp<(src: string) => void>()\n})\n\nexport type ImageProps = ExtractPropTypes<typeof imageProps>\nexport type ImageCProps = ConfigurableProps<ExtractPropTypes<typeof imageProps>, 'src'>\n\nexport const imageGroupProps = buildProps({\n  showAll: booleanProp,\n  preview: booleanProp,\n  viewerTransfer: booleanStringProp,\n  onPreview: eventProp<(src: string, srcList: string[]) => void>()\n})\n\nexport type ImageGroupProps = ExtractPropTypes<typeof imageGroupProps>\nexport type ImageGroupCProps = ConfigurableProps<ExtractPropTypes<typeof imageGroupProps>>\n\nexport const imageViewerProps = buildProps({\n  active: booleanProp,\n  index: Number,\n  srcList: [String, Array] as PropType<string | string[]>,\n  transfer: booleanStringProp,\n  viewerProps: Object as PropType<ViewerProps>,\n  onToggle: eventProp<(active: boolean) => void>(),\n  onChange: eventProp<(index: number, src: string) => void>(),\n  onPrev: eventProp<(index: number, src: string) => void>(),\n  onNext: eventProp<(index: number, src: string) => void>(),\n  onClose: eventProp(),\n  onShow: eventProp(),\n  onHide: eventProp()\n})\n\nexport type ImageViewerProps = ExtractPropTypes<typeof imageViewerProps>\nexport type ImageViewerCProps = ConfigurableProps<ExtractPropTypes<typeof imageViewerProps>, 'srcs'>\n"
    },
    {
      "target": "components/image/symbol.ts",
      "content": "import type { SkeletonProps } from '@/components/skeleton'\nimport type { ClassType, StyleType } from '@pocui/config'\nimport type { InjectionKey } from 'vue'\n\nexport type ImageObjectFit = 'fill' | 'contain' | 'cover' | 'none' | 'scale-down'\nexport type ImageSkeletonProps = Partial<Pick<SkeletonProps, 'tag' | 'activated' | 'iconScale' | 'imageIcon'>> & {\n  class?: ClassType,\n  StyleType?: StyleType\n}\n\nexport interface ImageState {\n  src: string,\n\n  index: number,\n\n  total: number\n}\n\nexport interface GroupState {\n  showAll: boolean,\n\n  preview: boolean,\n\n  increaseItem: (item: ImageState) => void,\n\n  decreaseItem: (item: ImageState) => void,\n\n  handlePreview: (item: ImageState) => void\n}\n\nexport const GROUP_STATE: InjectionKey<GroupState> = Symbol('IMAGE_GROUP_STATE')\n\nexport const objectFitValues = Object.freeze<ImageObjectFit[]>(['fill', 'contain', 'cover', 'none', 'scale-down'])\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils", "@pocui/hooks"],
  "registryDependencies": ["image-viewer", "image.scss", "icon", "masker", "viewer", "skeleton"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
