{
  "name": "space",
  "type": "registry:components",
  "description": "快速为一系列元素提供统一的间距。",
  "files": [
    {
      "target": "components/space/index.ts",
      "content": "import Space from './space'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Space }\nexport { spaceProps } from './props'\n\nexport type SpaceExposed = ComponentPublicInstance & InstanceType<typeof Space>\n\nexport type { SpaceProps, SpaceCProps } from './props'\nexport type { SpaceAlign, SpaceJustify } from './symbol'\n"
    },
    {
      "target": "components/space/props.ts",
      "content": "import { booleanProp, buildProps, styleProp } from '@pocui/config'\n\nimport type { ComponentSize, ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { SpaceAlign, SpaceJustify } from './symbol'\n\nexport const spaceProps = buildProps({\n  vertical: booleanProp,\n  inline: booleanProp,\n  tag: String,\n  align: String as PropType<SpaceAlign>,\n  justify: String as PropType<SpaceJustify>,\n  noWrap: booleanProp,\n  size: [String, Number, Array] as PropType<ComponentSize | number | [number, number]>,\n  itemStyle: styleProp,\n  gapDisabled: booleanProp\n})\n\nexport type SpaceProps = ExtractPropTypes<typeof spaceProps>\nexport type SpaceCProps = ConfigurableProps<SpaceProps>\n"
    },
    {
      "target": "components/space/space.tsx",
      "content": "import { computed, defineComponent, renderSlot } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { flatVNodes } from '@pocui/hooks'\nimport { supportFlexGap } from '@pocui/utils'\nimport { spaceProps } from './props'\n\nimport type { ClassType } from '@pocui/config'\nimport type { SpaceAlign, SpaceJustify } from './symbol'\n\nconst justifyList = Object.freeze<SpaceJustify[]>([\n  'start',\n  'end',\n  'center',\n  'space-around',\n  'space-between',\n  'space-evenly'\n])\nconst alignList = Object.freeze<SpaceAlign[]>(['start', 'end', 'center', 'baseline', 'stretch'])\n\nconst useFlexGap = supportFlexGap()\n\nfunction parseFlexStyle(value: string) {\n  return value === 'start' || value === 'end' ? `flex-${value}` : value\n}\n\nexport default defineComponent({\n  name: 'Space',\n  description:'快速为一系列元素提供统一的间距。',\n  categories: ['layout'],\n  props: spaceProps,\n  setup(_props, { slots }) {\n    const props = useProps('space', _props, {\n      vertical: false,\n      inline: false,\n      tag: 'div',\n      align: {\n        default: 'stretch',\n        validator: value => alignList.includes(value)\n      },\n      justify: {\n        default: 'start',\n        validator: value => justifyList.includes(value)\n      },\n      noWrap: false,\n      size: 'default',\n      itemStyle: null,\n      gapDisabled: !useFlexGap\n    })\n\n    const nh = useNameHelper('space')\n    const varMap: Record<string, any> = {\n      h: `var(${nh.cv('h-gap')})`,\n      hh: `calc(var(${nh.cv('h-gap')}) * 0.5)`,\n      mhh: `calc(var(${nh.cv('h-gap')}) * -0.5)`,\n      v: `var(${nh.cv('v-gap')})`,\n      hv: `calc(var(${nh.cv('v-gap')}) * 0.5)`,\n      mhv: `calc(var(${nh.cv('v-gap')}) * -0.5)`\n    }\n\n    const className = computed(() => {\n      const className: ClassType = [\n        nh.b(),\n        nh.bs('vars'),\n        {\n          [nh.in()]: props.inherit,\n          [nh.bm('inline')]: props.inline,\n          [nh.bm('vertical')]: props.vertical,\n          [nh.bm('no-wrap')]: props.vertical || props.noWrap,\n          [nh.bm('no-gap')]: props.gapDisabled\n        }\n      ]\n\n      if (typeof props.size === 'string' && props.size !== 'default') {\n        className.push(nh.bm(props.size))\n      }\n\n      return className\n    })\n\n    const style = computed(() => {\n      const { justify, align, size } = props\n\n      const style: Record<string, string> = {\n        alignItems: parseFlexStyle(align),\n        justifyContent: parseFlexStyle(justify)\n      }\n\n      if (typeof size !== 'string') {\n        const normalizedSize = Array.isArray(size) ? size : [size, size]\n        style[nh.cv('h-gap')] = `${normalizedSize[0]}px`\n        style[nh.cv('v-gap')] = `${normalizedSize[1]}px`\n      }\n\n      if (props.gapDisabled && !props.vertical) {\n        style.marginTop = varMap.mhv\n        style.marginBottom = varMap.mhv\n      }\n\n      return style\n    })\n\n    return () => {\n      const CustomTag = props.tag || ('div' as any)\n      const children = renderSlot(slots, 'default').children\n\n      if (!children?.length) {\n        return <CustomTag class={className.value} style={style.value}></CustomTag>\n      }\n\n      const vnodes = flatVNodes(children)\n      const lastIndex = vnodes.length - 1\n      const justify = props.justify\n      const justifySpace = justify.startsWith('space')\n      const notBetween = justify !== 'space-between'\n\n      return (\n        <CustomTag class={className.value} style={style.value}>\n          {vnodes.map((vnode, index) => (\n            <div\n              key={index}\n              class={nh.be('item')}\n              role='none'\n              style={[\n                props.itemStyle,\n                !props.gapDisabled\n                  ? ''\n                  : props.vertical\n                    ? {\n                        marginBottom: index !== lastIndex ? varMap.v : undefined\n                      }\n                    : {\n                        paddingTop: varMap.hv,\n                        paddingBottom: varMap.hv,\n                        marginRight: justifySpace\n                          ? notBetween || index !== lastIndex\n                            ? varMap.hh\n                            : undefined\n                          : index !== lastIndex\n                            ? varMap.h\n                            : undefined,\n                        marginLeft: justifySpace ? (notBetween || index !== 0 ? varMap.hh : undefined) : undefined\n                      }\n              ]}\n            >\n              {vnode}\n            </div>\n          ))}\n        </CustomTag>\n      )\n    }\n  }\n})\n"
    },
    {
      "target": "components/space/symbol.ts",
      "content": "export type SpaceAlign = 'start' | 'end' | 'center' | 'baseline' | 'stretch'\nexport type SpaceJustify =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-around'\n  | 'space-between'\n  | 'space-evenly'\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/hooks", "@pocui/utils"],
  "registryDependencies": ["space.scss"],
  "categories": ["layout"],
  "meta": { "isReferenceOnly": false }
}
