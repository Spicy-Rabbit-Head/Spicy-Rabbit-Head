{
  "name": "dropdown",
  "type": "registry:component",
  "description": "展示一组折叠的下拉菜单。",
  "files": [
    {
      "target": "components/dropdown/dropdown-drop.ts",
      "content": "import { defineComponent, inject, provide, renderSlot } from 'vue'\n\nimport { DROPDOWN_STATE, SELECT_HANDLER } from './symbol'\n\nexport default defineComponent({\n  setup(_, { slots }) {\n    const dropdownState = inject(DROPDOWN_STATE, null)\n\n    dropdownState && provide(SELECT_HANDLER, dropdownState.handleSelect)\n\n    return () => renderSlot(slots, 'default')\n  }\n})\n"
    },
    {
      "target": "components/dropdown/dropdown-item.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, inject, ref, toRef } from 'vue'\n\nimport { emitEvent, useNameHelper } from '@pocui/config'\nimport { useLabel } from './hooks'\nimport { dropdownItemProps } from './props'\nimport { SELECT_HANDLER } from './symbol'\n\ndefineOptions({\n  name: 'DropdownItem',\n  description: '单条菜单项组件，是用户在下拉列表中执行命令的最小交互单元。',\n  categories: ['navigation']\n})\n\nconst props = defineProps(dropdownItemProps)\n\nconst parentSelectHandler = inject(SELECT_HANDLER, null)\n\nconst nh = useNameHelper('dropdown')\nconst wrapper = ref(null)\nconst label = toRef(props, 'label')\nconst isReference = ref(props.reference)\n\nconst currentLabel = useLabel(label, wrapper)\n\nconst className = computed(() => {\n  const baseClass = nh.be('item')\n\n  return {\n    [baseClass]: true,\n    [`${baseClass}--disabled`]: props.disabled,\n    [`${baseClass}--selected`]: !props.disabled && props.selected,\n    [`${baseClass}--divided`]: props.divided\n  }\n})\n\ndefineExpose({\n  wrapper,\n  handleSelect\n})\n\nfunction handleSelect() {\n  if (props.disabled || isReference.value) {\n    return\n  }\n\n  if (typeof parentSelectHandler === 'function') {\n    parentSelectHandler([currentLabel.value!], [props.meta || {}])\n  }\n\n  emitEvent(props.onSelect!, currentLabel.value!)\n}\n</script>\n\n<template>\n  <li\n    ref=\"wrapper\"\n    :class=\"className\"\n    role=\"menuitem\"\n    tabindex=\"0\"\n    @click=\"handleSelect\"\n  >\n    <slot></slot>\n  </li>\n</template>\n"
    },
    {
      "target": "components/dropdown/dropdown-list.vue",
      "content": "<script setup lang=\"ts\">\nimport { useNameHelper } from \"@pocui/config\";\n\ndefineOptions({\n  name: \"DropdownList\",\n  description:\n    \"下拉面板容器。\",\n  categories: [\"navigation\"],\n});\n\nconst nh = useNameHelper(\"dropdown\");\n</script>\n\n<template>\n  <ul :class=\"nh.be('list')\" role=\"menu\">\n    <slot></slot>\n  </ul>\n</template>\n"
    },
    {
      "target": "components/dropdown/dropdown.vue",
      "content": "<script setup lang=\"ts\">\nimport { Popper } from '@/components/popper'\n\nimport { computed, inject, nextTick, onMounted, provide, reactive, ref, toRef, unref, watch } from 'vue'\n\nimport { placementWhileList, useClickOutside, usePopper, useSetTimeout } from '@pocui/hooks'\n\nimport { emitEvent, useHoverDelay, useNameHelper, useProps } from '@pocui/config'\nimport DropdownDrop from './dropdown-drop'\nimport { useLabel } from './hooks'\nimport { dropdownProps } from './props'\nimport { DROPDOWN_STATE, SELECT_HANDLER } from './symbol'\n\nimport type { Placement } from '@pocui/hooks'\n\nimport type { PopperExposed } from '@/components/popper'\n\ndefineOptions({\n  name: 'Dropdown',\n  description: '展示一组折叠的下拉菜单。',\n  categories: ['navigation']\n})\n\nconst nh = useNameHelper('dropdown')\n\nconst _props = defineProps(dropdownProps)\nconst props = useProps('dropdown', _props, {\n  visible: {\n    default: false,\n    static: true\n  },\n  placement: {\n    default: 'bottom',\n    validator: value => placementWhileList.includes(value)\n  },\n  outsideClose: true,\n  trigger: {\n    default: 'hover',\n    validator: value => ['hover', 'click', 'custom'].includes(value)\n  },\n  label: {\n    default: null,\n    static: true\n  },\n  transitionName: () => nh.ns('drop'),\n  transfer: false,\n  dropClass: null,\n  appear: false,\n  meta: null,\n  alive: false,\n  custom: false\n})\n\nconst emit = defineEmits(['update:visible'])\ndefineSlots<{\n  default(): any,\n  drop(): any\n}>()\n\nconst parentState = inject(DROPDOWN_STATE, null)\nconst hoverDelay = useHoverDelay()\n\nconst isNested = !!parentState\nconst label = toRef(props, 'label')\nconst placement = ref(props.placement)\nconst currentVisible = ref(props.visible)\nconst popperAlive = ref(false)\n\nconst transfer = isNested ? ref(false) : toRef(props, 'transfer')\n\nconst wrapper = useClickOutside(handleClickOutside)\nconst popper = ref<PopperExposed>()\nconst { reference, transferTo, updatePopper } = usePopper({\n  placement,\n  transfer,\n  wrapper,\n  popper: computed(() => popper.value?.wrapper),\n  isDrop: true,\n  offset: isNested ? [-5, 0] : undefined\n})\nconst currentLabel = useLabel(label, reference)\n\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.bs('vars'),\n    {\n      [nh.inc()]: props.inherit,\n      [nh.bm('visible')]: currentVisible.value\n    }\n  ]\n})\nconst isAlive = computed(() => {\n  return unref(parentState?.alive) || props.alive\n})\n\nprovide(SELECT_HANDLER, null!)\n!props.custom &&\n  provide(\n    DROPDOWN_STATE,\n    reactive({\n      alive: isAlive,\n      handleSelect,\n      handleTriggerEnter,\n      handleTriggerLeave\n    })\n  )\n\nwatch(\n  () => props.visible,\n  value => {\n    currentVisible.value = value\n  }\n)\n\nwatch(\n  () => props.placement,\n  value => {\n    setPlacement(value)\n  }\n)\n\nwatch(currentVisible, value => {\n  if (value) {\n    updatePopper()\n  }\n})\n\nonMounted(() => {\n  nextTick(() => {\n    setPlacement(props.placement)\n  })\n})\n\ndefineExpose({\n  isNested,\n  currentVisible,\n  isAlive,\n  wrapper,\n  reference,\n  popper,\n  handleTriggerEnter,\n  handleTriggerLeave,\n  handleTriggerClick\n})\n\nfunction setVisible(visible: boolean) {\n  if (currentVisible.value === visible) return\n\n  currentVisible.value = visible\n\n  emit('update:visible', visible)\n  emitEvent(props.onToggle, visible)\n}\n\nfunction handleClickOutside() {\n  emitEvent(props.onClickOutside)\n\n  if (props.outsideClose && props.trigger !== 'custom' && currentVisible.value) {\n    setVisible(false)\n    emitEvent(props.onOutsideClose)\n  }\n}\n\nfunction handleSelect(labels: (string | number)[], metaList: Array<Record<string, any>>) {\n  if (props.trigger !== 'custom') {\n    setVisible(false)\n    emitEvent(props.onSelect, labels, metaList)\n  }\n\n  if (typeof parentState?.handleSelect === 'function') {\n    parentState.handleSelect([currentLabel.value!, ...labels], [props.meta || {}, ...metaList])\n  }\n}\n\nfunction setPlacement(value: Placement) {\n  const [xPlacement] = value.split('-')\n\n  if (isNested && xPlacement !== 'right' && xPlacement !== 'left') {\n    placement.value = 'right-start'\n  } else {\n    placement.value = value\n  }\n}\n\nconst { timer } = useSetTimeout()\n\nfunction handleTriggerEnter() {\n  if (props.trigger === 'hover') {\n    clearTimeout(timer.hover)\n\n    if (typeof parentState?.handleTriggerEnter === 'function') {\n      parentState.handleTriggerEnter()\n    }\n\n    timer.hover = setTimeout(() => {\n      setVisible(true)\n    }, hoverDelay.value)\n  }\n}\n\nfunction handleTriggerLeave() {\n  if (props.trigger === 'hover') {\n    clearTimeout(timer.hover)\n\n    if (typeof parentState?.handleTriggerLeave === 'function') {\n      parentState.handleTriggerLeave()\n    }\n\n    timer.hover = setTimeout(() => {\n      setVisible(false)\n    }, hoverDelay.value)\n  }\n}\n\nfunction handleTriggerClick() {\n  if (props.trigger === 'click') {\n    setVisible(!currentVisible.value)\n  }\n}\n</script>\n\n<template>\n  <div\n    ref=\"wrapper\"\n    :class=\"className\"\n    @mouseenter=\"handleTriggerEnter\"\n    @mouseleave=\"handleTriggerLeave\"\n  >\n    <div\n      ref=\"reference\"\n      :class=\"[nh.be('trigger'), currentVisible ? nh.bem('trigger', 'active') : '']\"\n      @click=\"handleTriggerClick\"\n      @keydown.enter.prevent=\"handleTriggerClick\"\n      @keydown.space.prevent=\"handleTriggerClick\"\n    >\n      <slot></slot>\n    </div>\n    <DropdownDrop>\n      <Popper\n        ref=\"popper\"\n        :class=\"[nh.be('popper'), nh.bs('vars'), isNested ? nh.bem('popper', 'nested') : null, props.dropClass]\"\n        :visible=\"currentVisible\"\n        :alive=\"isAlive || popperAlive\"\n        :to=\"transferTo\"\n        :transition=\"props.transitionName\"\n        :appear=\"props.appear\"\n        @mouseenter=\"handleTriggerEnter\"\n        @mouseleave=\"handleTriggerLeave\"\n        @after-enter=\"popperAlive = true\"\n        @after-leave=\"popperAlive = false\"\n      >\n        <slot name=\"drop\"></slot>\n      </Popper>\n    </DropdownDrop>\n  </div>\n</template>\n"
    },
    {
      "target": "components/dropdown/hooks.ts",
      "content": "import { nextTick, onMounted, ref, watch } from 'vue'\n\nimport type { Ref } from 'vue'\n\nexport function useLabel(\n  rawLabel: Ref<string | number | null>,\n  element: Ref<HTMLElement | null | undefined>\n) {\n  const label = ref(rawLabel.value)\n\n  function setLabel(value: string | number | null) {\n    if (element.value) {\n      label.value = value ?? element.value.textContent?.trim() ?? null\n    } else {\n      label.value = value\n    }\n  }\n\n  watch(rawLabel, value => {\n    setLabel(value)\n  })\n\n  onMounted(() => {\n    nextTick(() => {\n      setLabel(rawLabel.value)\n    })\n  })\n\n  return label\n}\n"
    },
    {
      "target": "components/dropdown/index.ts",
      "content": "import Dropdown from './dropdown.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Dropdown }\nexport { dropdownProps } from './props'\n\nexport type DropdownExposed = ComponentPublicInstance & InstanceType<typeof Dropdown>\n\nexport type { DropdownProps, DropdownCProps } from './props'\nexport type { DropdownTrigger } from './symbol'\n"
    },
    {
      "target": "components/dropdown/props.ts",
      "content": "import {\n  booleanProp,\n  booleanStringProp,\n  buildProps,\n  classProp,\n  eventProp,\n  wrapProps\n} from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\nimport type { Placement } from '@pocui/hooks'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { DropdownTrigger } from './symbol'\n\nexport const dropdownProps = buildProps({\n  visible: booleanProp,\n  placement: String as PropType<Placement>,\n  outsideClose: booleanProp,\n  trigger: String as PropType<DropdownTrigger>,\n  label: [String, Number],\n  transitionName: String,\n  transfer: booleanStringProp,\n  dropClass: classProp,\n  appear: booleanProp,\n  meta: Object as PropType<Record<string, any>>,\n  alive: booleanProp,\n  custom: booleanProp,\n  onToggle: eventProp<(visible: boolean) => void>(),\n  onSelect: eventProp<(labels: (string | number)[], metas: Array<Record<string, any>>) => void>(),\n  onClickOutside: eventProp(),\n  onOutsideClose: eventProp()\n})\n\nexport type DropdownProps = ExtractPropTypes<typeof dropdownProps>\nexport type DropdownCProps = ConfigurableProps<DropdownProps>\n\nexport const dropdownItemProps = wrapProps({\n  label: {\n    type: [String, Number],\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  selected: {\n    type: Boolean,\n    default: false\n  },\n  divided: {\n    type: Boolean,\n    default: false\n  },\n  reference: {\n    type: Boolean,\n    default: false\n  },\n  meta: {\n    type: Object,\n    default: () => ({})\n  },\n  onSelect: eventProp<(label: string | number) => void>()\n})\n\nexport type DropdownItemProps = ExtractPropTypes<typeof dropdownItemProps>\n"
    },
    {
      "target": "components/dropdown/symbol.ts",
      "content": "import type { InjectionKey } from 'vue'\n\nexport type DropdownTrigger = 'hover' | 'click' | 'custom'\n\ntype SelectHandler = (labels: (string | number)[], metas: Array<Record<string, any>>) => void\n\nexport interface DropdownState {\n  alive: boolean,\n  handleSelect: SelectHandler,\n  handleTriggerEnter: () => void,\n  handleTriggerLeave: () => void\n}\n\nexport const SELECT_HANDLER: InjectionKey<SelectHandler> = Symbol('SELECT_HANDLER')\nexport const DROPDOWN_STATE: InjectionKey<DropdownState> = Symbol('DROPDOWN_STATE')\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/hooks"],
  "registryDependencies": ["dropdown.scss", "popper"],
  "categories": ["navigation"],
  "meta": { "isReferenceOnly": false }
}
