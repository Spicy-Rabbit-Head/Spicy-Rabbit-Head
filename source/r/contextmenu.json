{
  "name": "contextmenu",
  "type": "registry:component",
  "description": "对于一些交互逻辑较多的页面，可以将一些操作置于右键菜单中，以方便用户快速选择。",
  "files": [
    {
      "target": "components/contextmenu/contextmenu.vue",
      "content": "<script setup lang=\"ts\">\nimport { Dropdown } from '@/components/dropdown'\nimport { DropdownList } from '@/components/dropdown-list'\nimport { Renderer } from '@/components/renderer'\n\nimport { reactive, ref } from 'vue'\n\nimport { useNameHelper } from '@pocui/config'\nimport { isFunction } from '@pocui/utils'\n\nimport { renderItem } from './render'\n\nimport type { ContextMenuConfig, ContextMenuOptions, Key } from './symbol'\n\ndefineOptions({ name: 'ContextMenu',\n  description: '对于一些交互逻辑较多的页面，可以将一些操作置于右键菜单中，以方便用户快速选择。',\n  categories: ['other'] })\n\nconst nh = useNameHelper('contextmenu')\nconst visible = ref(false)\nconst configs = ref<ContextMenuConfig[]>([])\nconst appear = ref(false)\n\nconst position = reactive({\n  x: 0,\n  y: 0\n})\n\nconst onSelect = ref<((keys: Key[]) => void) | null>(null)\nconst onCancel = ref<(() => void) | null>(null)\n\nfunction openContextMenu(options: ContextMenuOptions) {\n  position.x = options.clientX || 0\n  position.y = options.clientY || 0\n  configs.value = options.configs\n  appear.value = options.appear ?? false\n\n  visible.value = true\n\n  return new Promise<Key[] | null>(resolve => {\n    onSelect.value = (keys: Key[]) => {\n      resolve(keys)\n    }\n    onCancel.value = () => {\n      resolve(null)\n    }\n  })\n}\n\nfunction afterContextMenu() {\n  onSelect.value = null\n  onCancel.value = null\n}\n\nfunction handleSelect(keys: Key[]) {\n  visible.value = false\n\n  if (isFunction(onSelect.value)) {\n    onSelect.value(keys)\n    afterContextMenu()\n  }\n}\n\nfunction handleCancel() {\n  visible.value = false\n\n  if (isFunction(onCancel.value)) {\n    onCancel.value()\n    afterContextMenu()\n  }\n}\n\ndefineExpose({\n  visible,\n  position,\n  openContextMenu,\n  handleSelect,\n  handleCancel\n})\n</script>\n\n<template>\n  <Dropdown\n    v-model:visible=\"visible\"\n    :class=\"[nh.b(), nh.bs('vars')]\"\n    trigger=\"click\"\n    placement=\"right-start\"\n    :appear=\"appear\"\n    :transfer=\"false\"\n    :style=\"{\n      top: `${position.y}px`,\n      left: `${position.x}px`\n    }\"\n    @contextmenu.prevent.stop\n    @select=\"handleSelect\"\n    @outside-close=\"handleCancel\"\n  >\n    <template #drop>\n      <DropdownList\n        :class=\"[\n          nh.be('list'),\n          configs.some(c => c.icon) ? nh.bem('list', 'icons') : nh.bem('list', 'no-icon'),\n          configs.some(c => c.children && c.children.length) ? nh.bem('list', 'arrows') : nh.bem('list', 'no-arrow')\n        ]\"\n      >\n        <Renderer\n          v-for=\"item in configs\"\n          :key=\"item.key\"\n          :data=\"{ config: item, nh }\"\n          :renderer=\"renderItem\"\n        ></Renderer>\n      </DropdownList>\n    </template>\n  </Dropdown>\n</template>\n"
    },
    {
      "target": "components/contextmenu/index.ts",
      "content": "import { createApp, createVNode, render } from 'vue'\n\nimport { proxyExposed, unrefElement } from '@pocui/hooks'\n\nimport { destroyObject, isClient } from '@pocui/utils'\n\nimport Component from './contextmenu.vue'\n\nimport type { MaybeInstance } from '@pocui/hooks'\n\nimport type { App, MaybeRef } from 'vue'\n\nimport type { ContextMenuConfig, ContextMenuInstance, ContextMenuOptions, Key } from './symbol'\n\nexport type { ContextMenuConfig, ContextMenuOptions }\n\nexport class ContextMenuManager {\n  name: string\n\n  private _mountedApp: App<unknown> | null\n\n  private _instance: ContextMenuInstance | null\n\n  private _innerApp: App<unknown> | null\n\n  private _container: HTMLElement | null\n\n  private _pending: Promise<Key[] | null> | null\n\n  private _wrapper: HTMLElement | SVGElement | null\n\n  private _mountedEl: HTMLElement | null\n\n  constructor() {\n    this._mountedApp = null\n    this._instance = null\n    this._innerApp = null\n    this._container = null\n    this._pending = null\n    this._wrapper = null\n    this._mountedEl = null\n    this.name = 'ContextMenu'\n  }\n\n  open(options: ContextMenuOptions) {\n    if (!isClient) {\n      return\n    }\n\n    const { target = document.body, ...others } = options\n    this._pending = this._getInstance(target)!.openContextMenu(others)\n\n    return this._pending\n  }\n\n  destroy() {\n    this._mountedEl && this._wrapper?.removeChild(this._mountedEl)\n    this._innerApp?.unmount()\n    this._container && render(null, this._container)\n    destroyObject(this)\n  }\n\n  isDestroyed() {\n    return false\n  }\n\n  install(app: App, options: { property?: string } = {}) {\n    const { property } = options\n\n    this._mountedApp = app\n\n    if (property || !app.config.globalProperties.$contextmenu) {\n      app.config.globalProperties[property || '$contextmenu'] = this\n    }\n  }\n\n  private _getInstance(target: MaybeRef<string | MaybeInstance | EventTarget>) {\n    if (!isClient) return\n\n    if (this._pending) {\n      let innerApp = this._innerApp\n      let container = this._container\n\n      const unmount = () => {\n        innerApp?.unmount()\n        container && render(null, container)\n\n        innerApp = null\n        container = null\n      }\n\n      this._pending.finally(unmount)\n      this._instance?.handleCancel()\n    } else {\n      this._innerApp?.unmount()\n      this._container && render(null, this._container)\n    }\n\n    this._pending = null\n\n    if (!this._mountedApp) {\n      console.warn('[pocui:ContextMenu]:应用程序丢失,插件可能未安装.')\n\n      this._container = document.createElement('div')\n      this._innerApp = createApp(Component)\n      this._instance = this._innerApp.mount(this._container) as ContextMenuInstance\n    } else {\n      const vnode = createVNode(Component, null, null)\n\n      this._container = document.createElement('div')\n      vnode.appContext = this._mountedApp._context\n\n      render(vnode, this._container)\n\n      this._instance = proxyExposed<ContextMenuInstance>(vnode)\n    }\n\n    this._mountedEl = this._container.firstElementChild as HTMLElement\n    this._wrapper = (unrefElement(target) as HTMLElement | SVGElement) || document.body\n\n    this._wrapper.appendChild(this._mountedEl)\n\n    return this._instance\n  }\n}\n\nexport const Contextmenu = new ContextMenuManager()\n"
    },
    {
      "target": "components/contextmenu/render.tsx",
      "content": "import { Dropdown } from '@/components/dropdown'\nimport { DropdownItem } from '@/components/dropdown-item'\nimport { DropdownList } from '@/components/dropdown-list'\nimport { Icon } from '@/components/icon'\n\nimport { useIcons } from '@pocui/config'\n\nimport type { NameHelper } from '@pocui/config'\nimport type { ContextMenuConfig } from './symbol'\n\nfunction renderItemIcon(item: ContextMenuConfig, nh: NameHelper) {\n  if (!item.icon) return null\n\n  return (\n    <div class={nh.be('icon')}>\n      <Icon icon={item.icon} style={[{ color: item.iconColor || item.color }, (item.icon as any).style]}></Icon>\n    </div>\n  )\n}\n\nfunction renderItemShortcut(item: ContextMenuConfig, nh: NameHelper) {\n  if (!item.shortcut) return null\n\n  return <div class={nh.be('shortcut')}>{item.shortcut}</div>\n}\n\nfunction renderGroupItem(item: ContextMenuConfig, nh: NameHelper) {\n  const icons = useIcons()\n\n  return (\n    <Dropdown\n      inherit\n      transfer={false}\n      {...{\n        onContextMenu: (event: MouseEvent) => {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n      }}\n    >\n      {{\n        default: () => (\n          <DropdownItem class={nh.be('item')} label={item.key} divided={item.divided} disabled={item.disabled}>\n            {renderItemIcon(item, nh)}\n            {typeof item.renderer === 'function'\n              ? (\n                  item.renderer()\n                )\n              : (\n                <span class={nh.be('label')} style={{ color: item.color }}>\n                  {item.label || item.key}\n                </span>\n                )}\n            {renderItemShortcut(item, nh)}\n            <div class={[nh.be('icon'), nh.be('arrow')]}>\n              <Icon {...icons.value.angleRight} style={{ color: item.iconColor || item.color }}></Icon>\n            </div>\n          </DropdownItem>\n        ),\n        drop: () => (\n          <DropdownList\n            class={[\n              nh.be('list'),\n              item.children!.some(c => c.icon) ? nh.bem('list', 'icons') : nh.bem('list', 'no-icon'),\n              item.children!.some(c => c.children?.length) ? nh.bem('list', 'arrows') : nh.bem('list', 'no-arrow')\n            ]}\n          >\n            {item.children!.map(i =>\n              renderItem({\n                nh,\n                config: i\n              })\n            )}\n          </DropdownList>\n        )\n      }}\n    </Dropdown>\n  )\n}\n\nexport function renderItem({ config, nh }: { config: ContextMenuConfig, nh: NameHelper }) {\n  if (config.children?.length) {\n    return renderGroupItem(config, nh)\n  } else {\n    return (\n      <DropdownItem class={nh.be('item')} label={config.key} divided={config.divided} disabled={config.disabled}>\n        {renderItemIcon(config, nh)}\n        {typeof config.renderer === 'function'\n          ? (\n              config.renderer()\n            )\n          : (\n            <span class={nh.be('label')} style={{ color: config.color }}>\n              {config.label || config.key}\n            </span>\n            )}\n        {renderItemShortcut(config, nh)}\n      </DropdownItem>\n    )\n  }\n}\n"
    },
    {
      "target": "components/contextmenu/symbol.ts",
      "content": "import type { AnyFn, MaybeInstance } from '@pocui/hooks'\nimport type { ComponentPublicInstance, MaybeRef } from 'vue'\n\nexport type Key = string | number\n\nexport interface ContextMenuConfig {\n  key: Key,\n\n  label?: string,\n\n  icon?: string | AnyFn,\n\n  color?: string,\n\n  iconColor?: string,\n\n  shortcut?: string,\n\n  divided?: boolean,\n\n  disabled?: boolean,\n\n  children?: ContextMenuConfig[],\n\n  renderer?: () => any\n}\n\nexport interface ContextMenuOptions {\n  clientX: number,\n\n  clientY: number,\n\n  configs: ContextMenuConfig[],\n\n  target?: MaybeRef<string | MaybeInstance | EventTarget>,\n\n  appear?: boolean\n}\n\nexport interface ContextMenuInstance extends ComponentPublicInstance {\n  openContextMenu: (options: ContextMenuOptions) => Promise<Key[] | null>,\n\n  handleCancel: () => void\n}\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils", "@pocui/hooks"],
  "registryDependencies": [
    "dropdown",
    "dropdown-list",
    "renderer",
    "contextmenu.scss",
    "dropdown-item",
    "icon"
  ],
  "categories": ["other"],
  "meta": { "isReferenceOnly": false }
}
