{
  "name": "radio",
  "type": "registry:components",
  "description": "需要在一组选项中进行单项选择时使用，或是结合单选框组用于需要表示两种状态之间的切换的场合。",
  "files": [
    {
      "target": "components/radio/index.ts",
      "content": "import Radio from './radio.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Radio }\nexport { radioProps } from './props'\n\nexport type RadioExposed = ComponentPublicInstance & InstanceType<typeof Radio>\n\nexport type { RadioProps, RadioCProps } from './props'\nexport type { RadioGroupShape, RadioRawOption, RadioShape } from './symbol'\n"
    },
    {
      "target": "components/radio/props.ts",
      "content": "import {\n  booleanProp,\n  buildProps,\n  classProp,\n  eventProp,\n  iconProp,\n  sizeProp,\n  stateProp,\n  valueProp\n} from '@pocui/config'\n\nimport type { IconEffect } from '@/components/icon'\nimport type { ConfigurableProps, EventListener } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ChangeEvent, RadioGroupShape, RadioRawOption, RadioShape } from './symbol'\n\nexport const radioProps = buildProps({\n  size: sizeProp,\n  state: stateProp,\n  value: valueProp,\n  label: valueProp,\n  labelClass: classProp,\n  disabled: booleanProp,\n  tabIndex: [String, Number],\n  loading: booleanProp,\n  loadingLock: booleanProp,\n  name: String,\n  shape: String as PropType<RadioShape>,\n  onChange: eventProp<EventListener<ChangeEvent>>()\n})\n\nexport type RadioProps = ExtractPropTypes<typeof radioProps>\nexport type RadioCProps = ConfigurableProps<RadioProps>\n\nexport const radioGroupProps = buildProps({\n  size: sizeProp,\n  state: stateProp,\n  value: valueProp,\n  vertical: booleanProp,\n  disabled: booleanProp,\n  options: Array as PropType<RadioRawOption[]>,\n  loading: booleanProp,\n  loadingIcon: iconProp,\n  loadingLock: booleanProp,\n  loadingEffect: String as PropType<IconEffect>,\n  shape: String as PropType<RadioGroupShape>,\n  onChange: eventProp<EventListener<ChangeEvent>>()\n})\n\nexport type RadioGroupProps = ExtractPropTypes<typeof radioGroupProps>\nexport type RadioGroupCProps = ConfigurableProps<RadioGroupProps>\n"
    },
    {
      "target": "components/radio/radio-group.vue",
      "content": "<script setup lang=\"ts\">\nimport { useFieldStore } from '@/components/form'\nimport { Radio } from '@/components/radio'\n\nimport { computed, provide, reactive, ref, toRef, watch } from 'vue'\n\nimport {\n  createIconProp,\n  createSizeProp,\n  createStateProp,\n  emitEvent,\n  useNameHelper,\n  useProps\n} from '@pocui/config'\nimport { debounceMinor, isClient, isObject } from '@pocui/utils'\n\nimport { radioGroupProps } from './props'\n\nimport { GROUP_STATE, radioGroupShapes } from './symbol'\n\nimport type { Ref } from 'vue'\n\nimport type { ChangeEvent } from './symbol'\n\ndefineOptions({\n  name: 'RadioGroup',\n  description:'单选框组组件，用于管理一组单选框的选择状态',\n  categories: ['form']\n})\n\nconst { idFor, state, disabled, loading, size, validateField, getFieldValue, setFieldValue } = useFieldStore<\n  string | number | boolean\n>(focus)\n\nconst _props = defineProps(radioGroupProps)\nconst props = useProps('radioGroup', _props, {\n  size: createSizeProp(size),\n  state: createStateProp(state),\n  value: {\n    default: () => getFieldValue(),\n    static: true\n  },\n  vertical: false,\n  disabled: () => disabled.value,\n  options: {\n    default: () => [],\n    static: true\n  },\n  loading: () => loading.value,\n  loadingIcon: createIconProp(),\n  loadingLock: false,\n  loadingEffect: null,\n  shape: {\n    default: 'default',\n    validator: value => radioGroupShapes.includes(value)\n  }\n})\n\nconst emit = defineEmits(['update:value'])\n\nconst nh = useNameHelper('radio-group')\nconst currentValue = ref(props.value)\nconst inputSet = new Set<Ref<HTMLElement | null | undefined>>()\n\nconst readonly = computed(() => props.loading && props.loadingLock)\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.ns('radio-vars'),\n    {\n      [nh.in()]: props.inherit,\n      [nh.bm('vertical')]: props.vertical,\n      [nh.bm('disabled')]: props.disabled,\n      [nh.bm('readonly')]: readonly.value,\n      [nh.bm('loading')]: props.loading,\n      [nh.bm(props.size)]: props.size !== 'default',\n      [nh.bm(props.state)]: props.state !== 'default',\n      [nh.bm(props.shape)]: props.shape !== 'default'\n    }\n  ]\n})\n\nconst groupState = reactive({\n  currentValue,\n  size: toRef(props, 'size'),\n  state: toRef(props, 'state'),\n  disabled: toRef(props, 'disabled'),\n  loading: toRef(props, 'loading'),\n  loadingIcon: toRef(props, 'loadingIcon'),\n  loadingLock: toRef(props, 'loadingLock'),\n  loadingEffect: toRef(props, 'loadingEffect'),\n  shape: toRef(props, 'shape'),\n  updateValue: debounceMinor(updateValue),\n  registerInput,\n  unregisterInput\n})\n\n// TODO 此处直接定义 reactive 会出现类型推断错误? 待查\nprovide(GROUP_STATE, groupState)\n\nwatch(\n  () => props.value,\n  value => {\n    currentValue.value = value\n  }\n)\n\ndefineExpose({\n  idFor,\n  focus,\n  blur: () => {\n    for (const input of inputSet) {\n      input.value?.blur()\n    }\n  }\n})\n\nfunction updateValue(value: string | number | boolean) {\n  if (currentValue.value !== value) {\n    currentValue.value = value\n\n    emit('update:value', value)\n    setFieldValue(value)\n    emitEvent(props.onChange as ChangeEvent, value)\n    validateField()\n  }\n}\n\nfunction registerInput(input: Ref<HTMLElement | null | undefined>) {\n  inputSet.add(input)\n}\n\nfunction unregisterInput(input: Ref<HTMLElement | null | undefined>) {\n  inputSet.delete(input)\n}\n\nfunction focus(options?: FocusOptions) {\n  const input = Array.from(inputSet)[0]?.value\n\n  if (isClient && input && document.activeElement !== input) {\n    input.focus(options)\n  }\n}\n</script>\n\n<template>\n  <div :id=\"idFor\" :class=\"className\" role=\"radiogroup\">\n    <slot>\n      <template v-for=\"item in props.options\" :key=\"item\">\n        <Radio\n          v-if=\"isObject(item)\"\n          inherit\n          :label=\"item.label\"\n          :disabled=\"item.disabled\"\n        >\n          {{ item.content || item.label }}\n        </Radio>\n        <Radio v-else inherit :label=\"item\">\n          {{ item }}\n        </Radio>\n      </template>\n    </slot>\n  </div>\n</template>\n"
    },
    {
      "target": "components/radio/radio.vue",
      "content": "<script setup lang=\"ts\">\nimport { CollapseTransition } from '@/components/collapse-transition'\nimport { Icon } from '@/components/icon'\n\nimport { computed, inject, onBeforeUnmount, onMounted, ref, watch } from 'vue'\n\nimport {\n  createSizeProp,\n  createStateProp,\n  emitEvent,\n  useIcons,\n  useNameHelper,\n  useProps\n} from '@pocui/config'\n\nimport { radioProps } from './props'\n\nimport { GROUP_STATE, radioShapes } from './symbol'\n\nimport type { ChangeEvent } from './symbol'\n\ndefineOptions({\n  name: 'Radio',\n  description:'需要在一组选项中进行单项选择时使用，或是结合单选框组用于需要表示两种状态之间的切换的场合。',\n  categories: ['form']\n})\n\nconst _props = defineProps(radioProps)\nconst props = useProps('radio', _props, {\n  size: createSizeProp(),\n  state: createStateProp(),\n  value: {\n    default: null,\n    static: true\n  },\n  label: {\n    default: null,\n    static: true,\n    required: true\n  },\n  labelClass: null,\n  disabled: false,\n  tabIndex: 0,\n  loading: false,\n  loadingLock: false,\n  name: {\n    default: '',\n    static: true\n  },\n  shape: {\n    default: 'default',\n    validator: value => radioShapes.includes(value)\n  }\n})\n\nconst emit = defineEmits(['update:value'])\n\ndefineSlots<{\n  default(): any,\n  extra(): any\n}>()\n\nconst groupState = inject(GROUP_STATE, null)\n\nconst nh = useNameHelper('radio')\nconst icons = useIcons()\nconst currentValue = ref(props.value)\n\nconst input = ref<HTMLInputElement>()\n\nconst size = computed(() => groupState?.size || props.size)\nconst state = computed(() => groupState?.state || props.state)\nconst isDisabled = computed(() => groupState?.disabled || props.disabled)\nconst isLoading = computed(() => groupState?.loading || props.loading)\nconst loadingIcon = computed(() => groupState?.loadingIcon)\nconst isLoadingLock = computed(() => groupState?.loadingLock || false)\nconst loadingEffect = computed(() => groupState?.loadingEffect || '')\nconst shape = computed(() => groupState?.shape || props.shape)\nconst readonly = computed(() => isLoading.value && isLoadingLock.value)\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.bs('vars'),\n    {\n      [nh.in()]: props.inherit,\n      [nh.bm('checked')]: currentValue.value === props.label,\n      [nh.bm('disabled')]: isDisabled.value,\n      [nh.bm('readonly')]: readonly.value,\n      [nh.bm('loading')]: isLoading.value,\n      [nh.bm(size.value)]: size.value !== 'default',\n      [nh.bm(state.value)]: state.value !== 'default',\n      [nh.bm(shape.value)]: shape.value !== 'default' && shape.value !== 'button-group'\n    }\n  ]\n})\nconst isButton = computed(() => shape.value === 'button' || shape.value === 'button-group')\n\nwatch(\n  () => props.value,\n  value => {\n    currentValue.value = value\n  }\n)\n\nif (groupState) {\n  currentValue.value = groupState.currentValue\n\n  watch(() => groupState.currentValue, emitChange)\n\n  onMounted(() => {\n    groupState.registerInput(input)\n  })\n\n  onBeforeUnmount(() => {\n    groupState.unregisterInput(input)\n  })\n}\n\ndefineExpose({\n  currentValue,\n  input\n})\n\nfunction emitChange(value: string | number | boolean) {\n  if (currentValue.value === value) return\n\n  currentValue.value = value\n\n  emit('update:value', value)\n  emitEvent(props.onChange as ChangeEvent, value)\n}\n\nfunction handleChange() {\n  if (isDisabled.value || readonly.value) {\n    return\n  }\n\n  emitChange(props.label)\n\n  if (groupState && currentValue.value === props.label) {\n    groupState.updateValue(currentValue.value)\n  }\n}\n</script>\n\n<template>\n  <label :class=\"className\">\n    <input\n      ref=\"input\"\n      type=\"radio\"\n      :class=\"nh.be('input')\"\n      :checked=\"currentValue === props.label\"\n      :disabled=\"isDisabled || readonly\"\n      :tabindex=\"props.tabIndex\"\n      :name=\"props.name\"\n      @submit.prevent\n      @change=\"handleChange\"\n      @click.stop\n    />\n    <span :class=\"[nh.be('signal'), isLoading && nh.bem('signal', 'active')]\"></span>\n    <span :class=\"[nh.be('label'), props.labelClass]\">\n      <CollapseTransition\n        v-if=\"isButton\"\n        appear\n        horizontal\n        fade-effect\n      >\n        <div v-if=\"isLoading\" :class=\"nh.be('loading')\">\n          <Icon\n            v-bind=\"icons.loading\"\n            :effect=\"loadingEffect || icons.loading.effect\"\n            :icon=\"loadingIcon || icons.loading.icon\"\n            label=\"loading\"\n          ></Icon>\n        </div>\n      </CollapseTransition>\n      <slot>{{ props.label }}</slot>\n      <span :class=\"nh.be('extra')\" @click.capture.prevent>\n        <slot name=\"extra\"></slot>\n      </span>\n    </span>\n  </label>\n</template>\n"
    },
    {
      "target": "components/radio/symbol.ts",
      "content": "import type { IconEffect } from '@/components/icon'\nimport type { ComponentSize, ComponentState } from '@pocui/config'\nimport type { InjectionKey, Ref } from 'vue'\n\nexport type RadioShape = 'default' | 'border' | 'button'\nexport type RadioGroupShape = RadioShape | 'button-group'\n\nexport type RadioRawOption =\n  | string\n  | {\n    label: string | number | boolean,\n    content?: string,\n    disabled?: boolean\n  }\n\nexport interface GroupState {\n  currentValue: string | number | boolean,\n\n  size: ComponentSize,\n\n  state: ComponentState,\n\n  disabled: boolean,\n\n  loading: boolean,\n\n  loadingIcon: Record<string, any>,\n\n  loadingLock: boolean,\n\n  loadingEffect: IconEffect,\n\n  shape: RadioGroupShape,\n\n  updateValue(value: string | number | boolean): void,\n\n  registerInput(input: Ref<HTMLElement | null | undefined>): void,\n\n  unregisterInput(input: Ref<HTMLElement | null | undefined>): void\n}\n\nexport type ChangeEvent = (value: string | number | boolean) => void\n\nexport const GROUP_STATE: InjectionKey<GroupState> = Symbol('RADIO_GROUP_STATE')\n\nexport const radioShapes = Object.freeze<RadioShape[]>(['default', 'border', 'button'])\nexport const radioGroupShapes = Object.freeze<RadioGroupShape[]>([...radioShapes, 'button-group'])\n"
    }
  ],
  "dependencies": ["@pocui/config", "vue", "@pocui/utils"],
  "registryDependencies": ["icon", "radio.scss", "form", "collapse-transition"],
  "categories": ["form"],
  "meta": { "isReferenceOnly": false }
}
