{
  "name": "confirm",
  "type": "registry:component",
  "description": "通常用于一些重要操作的二次确认，以降低用户误操作的概率。",
  "files": [
    {
      "target": "components/confirm/confirm.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from '@/components/button'\nimport { Icon } from '@/components/icon'\nimport { Modal } from '@/components/modal'\nimport { Renderer } from '@/components/renderer'\n\nimport { nextTick, onMounted, reactive, ref, toRef } from 'vue'\n\nimport { useIcons, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { isFunction, isPromise } from '@pocui/utils'\n\nimport { confirmProps } from './props'\n\nimport type { ConfirmButtonType, ConfirmOptions, ConfirmRenderFn, ConfirmState } from './symbol'\n\nconst positionValidator = (value: string | number) => {\n  return value === 'auto' || !Number.isNaN(parseFloat(value as string))\n}\nconst positionProp = {\n  default: 'auto',\n  validator: positionValidator\n}\n\nconst confirmButtonTypes = Object.freeze<ConfirmButtonType[]>([\n  'default',\n  'primary',\n  'info',\n  'success',\n  'warning',\n  'error'\n])\n\ndefineOptions({ name: 'Confirm',\n  description: '通常用于一些重要操作的二次确认，以降低用户误操作的概率。',\n  categories: ['feedback'] })\n\nconst _props = defineProps(confirmProps)\nconst props = useProps('confirm', _props, {\n  locale: null,\n  width: {\n    default: 420,\n    validator: positionValidator\n  },\n  height: positionProp,\n  top: positionProp,\n  left: positionProp,\n  right: positionProp,\n  bottom: positionProp,\n  maskClose: false,\n  confirmType: {\n    default: 'primary',\n    validator: value => confirmButtonTypes.includes(value)\n  },\n  cancelType: {\n    default: 'default',\n    validator: value => confirmButtonTypes.includes(value)\n  },\n  confirmText: null,\n  cancelText: null,\n  icon: {\n    isFunc: true,\n    default: false\n  },\n  className: null,\n  style: null,\n  renderer: {\n    default: null,\n    isFunc: true,\n    static: true\n  },\n  iconProps: () => ({}),\n  closable: false,\n  parseHtml: false,\n  contentAlign: 'left',\n  actionsAlign: 'right',\n  cancelable: true,\n  xOffset: 0,\n  yOffset: 0\n})\n\nconst nh = useNameHelper('confirm')\nconst icons = useIcons()\nconst locale = useLocale('confirm', toRef(props, 'locale'))\ndefineSlots<{\n  close(): any\n}>()\nconst commonProps = [\n  'className',\n  'style',\n  'icon',\n  'iconProps',\n  'maskClose',\n  'confirmType',\n  'cancelType',\n  'confirmText',\n  'cancelText',\n  'parseHtml',\n  'closable',\n  'contentAlign',\n  'actionsAlign',\n  'cancelable',\n  'width',\n  'height',\n  'top',\n  'right',\n  'bottom',\n  'left',\n  'xOffset',\n  'yOffset'\n] as const\n\nconst state = reactive<ConfirmState>({\n  ...commonProps.reduce((prev, current) => ((prev[current] = props[current]), prev), {} as any),\n  visible: false,\n  loading: false,\n  title: '',\n  content: '',\n  raw: {}\n})\n\nconst rendererR = ref<ConfirmRenderFn | null>(props.renderer)\n\nlet beforeConfirmR: (() => unknown) | null = null\n\nlet onConfirm: (() => void) | null = null\nlet onCancel: (() => void) | null = null\n\nconst mountedPromise = new Promise<void>(resolve => {\n  onMounted(() => {\n    nextTick(resolve)\n  })\n})\n\ndefineExpose({\n  state,\n  openConfirm,\n  handleReset\n})\n\nasync function openConfirm(options: ConfirmOptions) {\n  await mountedPromise\n\n  return await new Promise<boolean>(resolve => {\n    for (const prop of commonProps) {\n      ;(state as any)[prop] = options[prop] ?? props[prop]\n    }\n\n    state.title = options.title ?? ''\n    state.content = options.content ?? ''\n\n    state.raw = options\n\n    rendererR.value = isFunction(options.renderer) ? options.renderer : props.renderer\n    beforeConfirmR = isFunction(options.onBeforeConfirm) ? options.onBeforeConfirm : null\n\n    if (isFunction(rendererR.value)) {\n      const render = rendererR.value\n\n      rendererR.value = () => render(state, handleConfirm, handleCancel)\n    }\n\n    state.visible = true\n    onConfirm = () => {\n      resolve(true)\n      beforeConfirmR = null\n    }\n    onCancel = () => {\n      resolve(false)\n      beforeConfirmR = null\n    }\n  })\n}\n\nasync function handleConfirm() {\n  state.loading = true\n\n  if (isFunction(beforeConfirmR)) {\n    let result = beforeConfirmR()\n\n    if (isPromise(result)) {\n      result = await result\n    }\n\n    if (result === false) {\n      state.loading = false\n\n      return\n    }\n  }\n\n  state.visible = false\n  state.loading = false\n\n  if (isFunction(onConfirm)) {\n    onConfirm()\n    onConfirm = null\n  }\n}\n\nfunction handleCancel() {\n  state.visible = false\n\n  if (isFunction(onCancel)) {\n    onCancel()\n    onCancel = null\n  }\n}\n\nfunction handleReset() {\n  for (const prop of commonProps) {\n    ;(state as any)[prop] = props[prop]\n  }\n\n  state.visible = false\n  state.loading = false\n  state.title = ''\n  state.content = ''\n\n  state.raw = {}\n\n  rendererR.value = props.renderer\n}\n</script>\n\n<template>\n  <!-- eslint-disable vue/no-v-html -->\n  <div :class=\"[nh.b(), nh.bs('vars')]\">\n    <Modal\n      no-footer\n      :auto-remove=\"false\"\n      :transfer=\"false\"\n      :closable=\"false\"\n      :active=\"state.visible\"\n      :modal-class=\"state.className\"\n      :modal-style=\"state.style\"\n      :width=\"state.width\"\n      :height=\"state.height\"\n      :top=\"state.top\"\n      :left=\"state.left\"\n      :right=\"state.right\"\n      :bottom=\"state.bottom\"\n      :x-offset=\"state.xOffset\"\n      :y-offset=\"state.yOffset\"\n      :mask-close=\"state.maskClose\"\n      @hide=\"handleReset\"\n    >\n      <Renderer v-if=\"isFunction(rendererR)\" :renderer=\"rendererR\"></Renderer>\n      <template v-else>\n        <div v-if=\"state.title\" :class=\"nh.be('header')\">\n          <div :class=\"nh.be('title')\">\n            {{ state.title }}\n          </div>\n          <button\n            v-if=\"state.closable\"\n            type=\"button\"\n            :class=\"nh.be('close')\"\n            @mousedown.stop\n            @click=\"handleCancel\"\n          >\n            <slot name=\"close\">\n              <Icon v-bind=\"icons.close\" :scale=\"+(icons.close.scale || 1) * 1.2\" label=\"close\"></Icon>\n            </slot>\n          </button>\n        </div>\n        <div :class=\"[nh.be('body'), nh.bem('body', state.contentAlign), !state.title && nh.bem('body', 'no-title')]\">\n          <div v-if=\"state.icon !== false\" :class=\"nh.be('icon')\">\n            <Icon v-if=\"typeof state.icon !== 'boolean'\" v-bind=\"state.iconProps\" :icon=\"state.icon\"></Icon>\n            <Icon\n              v-else\n              :scale=\"2.2\"\n              v-bind=\"{\n                ...(state.cancelable ? icons.question : icons.warning),\n                ...state.iconProps\n              }\"\n              :icon=\"(state.cancelable ? icons.question : icons.warning).icon\"\n            ></Icon>\n          </div>\n          <div v-if=\"state.parseHtml\" :class=\"nh.be('content')\" v-html=\"state.content\"></div>\n          <div v-else :class=\"nh.be('content')\">\n            {{ state.content }}\n          </div>\n        </div>\n        <div :class=\"[nh.be('footer'), nh.bem('footer', state.actionsAlign)]\">\n          <Button\n            v-if=\"state.cancelable\"\n            :class=\"[nh.be('button'), nh.bem('button', 'cancel')]\"\n            inherit\n            no-pulse\n            :type=\"state.cancelType\"\n            @click=\"handleCancel\"\n          >\n            {{ state.cancelText || locale.cancel }}\n          </Button>\n          <Button\n            :class=\"[nh.be('button'), nh.bem('button', 'confirm')]\"\n            inherit\n            no-pulse\n            :type=\"state.confirmType\"\n            :loading=\"state.loading\"\n            @click=\"handleConfirm\"\n          >\n            {{ state.confirmText || locale.confirm }}\n          </Button>\n        </div>\n      </template>\n    </Modal>\n  </div>\n</template>\n"
    },
    {
      "target": "components/confirm/index.ts",
      "content": "import { createApp, createVNode, markRaw, render } from 'vue'\n\nimport { proxyExposed, unrefElement } from '@pocui/hooks'\n\nimport { destroyObject, isClient, isNullish } from '@pocui/utils'\n\nimport Component from './confirm.vue'\n\nimport type { MaybeInstance } from '@pocui/hooks'\n\nimport type { App, MaybeRef } from 'vue'\n\nimport type { ConfirmButtonType, ConfirmInstance, ConfirmOptions, ConfirmState } from './symbol'\n\nexport { confirmProps } from './props'\n\nexport type { ConfirmProps, ConfirmCProps } from './props'\nexport type { ConfirmButtonType, ConfirmOptions, ConfirmState }\n\ntype FuzzyOptions = string | ConfirmOptions\n\nComponent.name = 'Confirm'\n\nexport class ConfirmManager {\n  name: string\n\n  defaults: Record<string, unknown>\n\n  private _mountedApp: App<unknown> | null\n\n  private _instance: ConfirmInstance | null\n\n  private _innerApp: App<unknown> | null\n\n  private _container: HTMLElement | null\n\n  private _wrapper: HTMLElement | SVGElement | null\n\n  private _mountedEl: HTMLElement | null\n\n  constructor(options: Partial<ConfirmOptions> = {}) {\n    this._mountedApp = null\n    this._instance = null\n    this._innerApp = null\n    this._container = null\n    this._wrapper = null\n    this._mountedEl = null\n    this.name = 'Confirm'\n    this.defaults = {}\n\n    this.config(options)\n  }\n\n  open(content: string, type?: ConfirmButtonType): Promise<boolean>\n  open(options: ConfirmOptions): Promise<boolean>\n  open(content: string, title: string, type?: ConfirmButtonType): Promise<boolean>\n\n  open(options: FuzzyOptions, title?: string, type?: ConfirmButtonType) {\n    if (!isClient) {\n      return\n    }\n\n    if (typeof options === 'string') {\n      if (type) {\n        options = {\n          title,\n          content: options,\n          confirmType: type\n        }\n      } else {\n        options = {\n          content: options,\n          confirmType: title as ConfirmButtonType\n        }\n      }\n    }\n\n    const item: ConfirmOptions = { ...this.defaults, ...options }\n\n    if (item.icon && typeof item.icon === 'object') {\n      item.icon = markRaw(item.icon)\n    }\n\n    return this._getInstance()?.openConfirm(item)\n  }\n\n  config(options: Record<string, unknown>) {\n    this.defaults = { ...this.defaults, ...options }\n  }\n\n  clone() {\n    const manager = new ConfirmManager(this.defaults)\n\n    manager._mountedApp = this._mountedApp\n\n    return manager\n  }\n\n  destroy() {\n    this._mountedEl && this._wrapper?.removeChild(this._mountedEl)\n    this._innerApp?.unmount()\n    this._container && render(null, this._container)\n    destroyObject(this)\n  }\n\n  isDestroyed() {\n    return false\n  }\n\n  install(app: App, options: Partial<ConfirmOptions> & { property?: string } = {}) {\n    const { property, ...others } = options\n\n    this.config(others)\n    this._mountedApp = app\n\n    if (property || !app.config.globalProperties.$confirm) {\n      app.config.globalProperties[property || '$confirm'] = this\n    }\n  }\n\n  transferTo(target: MaybeRef<string | MaybeInstance>) {\n    if (!isClient) return\n\n    const el = unrefElement(target)\n\n    if (el) {\n      this._wrapper = el as HTMLElement | SVGElement | null\n\n      if (this._instance) {\n        this._mountedEl && !isNullish(this._wrapper) && this._wrapper.appendChild(this._mountedEl)\n      } else {\n        this._getInstance()\n      }\n    }\n  }\n\n  private _getInstance() {\n    if (!this._instance && isClient) {\n      if (!this._mountedApp) {\n        console.warn('[pocui:Confirm]: 应用程序缺失,插件可能未安装.')\n\n        this._container = document.createElement('div')\n        this._innerApp = createApp(Component)\n        this._instance = this._innerApp.mount(this._container) as ConfirmInstance\n      } else {\n        const vnode = createVNode(Component, null, null)\n\n        this._container = document.createElement('div')\n        vnode.appContext = this._mountedApp._context\n\n        render(vnode, this._container)\n\n        this._instance = proxyExposed<ConfirmInstance>(vnode)\n      }\n\n      this._mountedEl = this._container.firstElementChild as HTMLElement\n      ;(this._wrapper || document.body).appendChild(this._mountedEl)\n    }\n\n    return this._instance\n  }\n}\n\nexport const Confirm = new ConfirmManager()\n"
    },
    {
      "target": "components/confirm/props.ts",
      "content": "import { booleanProp, buildProps, classProp, localeProp, styleProp } from '@pocui/config'\n\nimport type { IconMinorProps } from '@/components/icon'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ConfirmAlign, ConfirmButtonType, ConfirmRenderFn } from './symbol'\n\nconst positionType = [Number, String]\n\nexport const confirmProps = buildProps({\n  locale: localeProp('confirm'),\n  width: positionType,\n  height: positionType,\n  top: positionType,\n  left: positionType,\n  right: positionType,\n  bottom: positionType,\n  maskClose: booleanProp,\n  confirmType: String as PropType<ConfirmButtonType>,\n  cancelType: String as PropType<ConfirmButtonType>,\n  confirmText: String,\n  cancelText: String,\n  icon: {\n    type: [Boolean, Object, Function],\n    default: null\n  },\n  className: classProp,\n  style: styleProp,\n  renderer: Function as PropType<ConfirmRenderFn>,\n  iconProps: Object as PropType<IconMinorProps>,\n  closable: booleanProp,\n  contentAlign: String as PropType<ConfirmAlign>,\n  actionsAlign: String as PropType<ConfirmAlign>,\n  parseHtml: booleanProp,\n  cancelable: booleanProp,\n  xOffset: positionType,\n  yOffset: positionType\n})\n\nexport type ConfirmProps = ExtractPropTypes<typeof confirmProps>\nexport type ConfirmCProps = ConfigurableProps<ConfirmProps>\n"
    },
    {
      "target": "components/confirm/symbol.ts",
      "content": "import type { ButtonType } from '@/components/button'\nimport type { IconMinorProps } from '@/components/icon'\nimport type { ComponentPublicInstance } from 'vue'\n\nexport type ConfirmButtonType = ButtonType\nexport type ConfirmAlign = 'left' | 'center' | 'right'\n\nexport interface ConfirmState {\n  visible: boolean,\n\n  loading: boolean,\n\n  title: string,\n\n  content: string,\n\n  icon: Record<string, any> | (() => any) | null | boolean | string,\n\n  iconProps: IconMinorProps,\n\n  className: string | Record<string, any>,\n\n  style: string | Record<string, any>,\n\n  confirmType: ConfirmButtonType,\n\n  cancelType: ConfirmButtonType,\n\n  confirmText: string,\n\n  cancelText: string,\n\n  maskClose: boolean,\n\n  parseHtml: boolean,\n\n  closable: boolean,\n\n  contentAlign: ConfirmAlign,\n\n  actionsAlign: ConfirmAlign,\n\n  cancelable: boolean,\n\n  width: number | string,\n\n  height: number | string,\n\n  top: number | string,\n\n  right: number | string,\n\n  bottom: number | string,\n\n  left: number | string,\n\n  xOffset: number | string,\n\n  yOffset: number | string,\n\n  raw: Record<any, any>\n}\n\nexport type ConfirmRenderFn = (\n  options: ConfirmState,\n  handleConfirm: () => Promise<void>,\n  handleCancel: () => void\n) => any\n\nexport interface ConfirmOptions extends Partial<Omit<ConfirmState, 'visible' | 'loading' | 'raw'>>, Record<any, any> {\n  renderer?: ConfirmRenderFn,\n\n  onBeforeConfirm?: () => unknown\n}\n\nexport interface ConfirmInstance extends ComponentPublicInstance {\n  openConfirm: (options: ConfirmOptions) => Promise<boolean>,\n\n  handleReset: () => void\n}\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils", "@pocui/hooks"],
  "registryDependencies": ["button", "icon", "modal", "renderer", "confirm.scss"],
  "categories": ["feedback"],
  "meta": { "isReferenceOnly": false }
}
