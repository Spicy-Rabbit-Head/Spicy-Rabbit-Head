{
  "name": "tab-nav",
  "type": "registry:component",
  "description": "标签导航组件，标签页组件的基础组件，可以用于生成自定义的标签页结构。",
  "files": [
    {
      "target": "components/tab-nav/index.ts",
      "content": "import TabNav from './tab-nav.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { TabNav }\nexport { tabNavProps } from './props'\n\nexport type TabNavExposed = ComponentPublicInstance & InstanceType<typeof TabNav>\n\nexport type { TabNavProps, TabNavCProps } from './props'\nexport type { TabNavAlign, TabNavPlacement, TabNavOptions } from './symbol'\n"
    },
    {
      "target": "components/tab-nav/props.ts",
      "content": "import { EventListener, booleanProp, buildProps, eventProp, iconProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ChangeEvent, TabNavAlign, TabNavOptions, TabNavPlacement } from './symbol'\n\nexport const tabNavProps = buildProps({\n  active: [String, Number],\n  card: booleanProp,\n  options: Array as PropType<TabNavOptions[]>,\n  align: String as PropType<TabNavAlign>,\n  placement: String as PropType<TabNavPlacement>,\n  closable: booleanProp,\n  showAdd: booleanProp,\n  onChange: eventProp<EventListener<ChangeEvent>>(),\n  onAdd: eventProp(),\n  onClose: eventProp<EventListener<ChangeEvent>>()\n})\n\nexport type TabNavProps = ExtractPropTypes<typeof tabNavProps>\nexport type TabNavCProps = ConfigurableProps<TabNavProps>\n\nexport const tabNavItemProps = buildProps({\n  label: [String, Number],\n  disabled: booleanProp,\n  icon: iconProp,\n  closable: booleanProp,\n  onToggle: eventProp<(active: boolean) => void>()\n})\n\nexport type TabNavItemProps = ExtractPropTypes<typeof tabNavItemProps>\n"
    },
    {
      "target": "components/tab-nav/symbol.ts",
      "content": "import type { InjectionKey } from 'vue'\n\nexport type TabNavAlign = 'left' | 'center' | 'right'\nexport type TabNavPlacement = 'top' | 'right' | 'bottom' | 'left'\n\nexport interface TabNavItemOptions {\n  label: string | number,\n\n  content?: string,\n\n  icon?: Record<string, any> | string,\n\n  disabled?: boolean,\n\n  closable?: boolean,\n\n  onToggle?: (active: boolean) => void\n}\n\nexport type TabNavOptions = TabNavItemOptions | string | number\n\nexport interface ItemState {\n  el?: HTMLElement | null,\n\n  label: string | number,\n\n  index: number,\n\n  total: number\n}\n\nexport interface TabNavState {\n  currentActive: string | number,\n\n  closable: boolean,\n\n  increaseItem: (item: ItemState) => void,\n\n  decreaseItem: (item: ItemState) => void,\n\n  handleActive: (label: string | number) => void,\n\n  handleClose: (label: string | number) => void,\n\n  refreshLabels: () => void\n}\n\nexport type ChangeEvent = (label: string | number) => void\n\nexport const TAB_NAV_STATE: InjectionKey<TabNavState> = Symbol('TAB_NAV_STATE')\n\nexport const trackStyleMap = {\n  top: ['left', 'width'],\n  right: ['top', 'height'],\n  bottom: ['left', 'width'],\n  left: ['top', 'height']\n} as const\n"
    },
    {
      "target": "components/tab-nav/tab-nav-item.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@/components/icon'\n\nimport { computed, inject, onBeforeUnmount, reactive, ref, watch } from 'vue'\n\nimport { createIconProp, emitEvent, useIcons, useNameHelper, useProps } from '@pocui/config'\nimport { isDefined } from '@pocui/utils'\n\nimport { tabNavItemProps } from './props'\n\nimport { TAB_NAV_STATE } from './symbol'\n\nimport type { ItemState } from './symbol'\n\ndefineOptions({\n  name: 'TabNavItem',\n  description:'标签导航项组件，作为标签导航栏的单个标签项。',\n  categories: ['navigation'],\n  components: { Icon }\n})\n\nconst _props = defineProps(tabNavItemProps)\nconst props = useProps('tabNavItem', _props, {\n  label: {\n    static: true,\n    default: null\n  },\n  disabled: false,\n  icon: createIconProp(),\n  closable: null\n})\n\nconst tabNavState = inject(TAB_NAV_STATE, null)\n\nconst nh = useNameHelper('tab-nav')\nconst icons = useIcons()\nconst active = ref(false)\nconst currentLabel = ref(props.label)\nconst index = ref(0)\nconst total = ref(0)\n\nconst wrapper = ref<HTMLElement>()\n\nconst contentClass = computed(() => {\n  const baseClass = nh.be('content')\n\n  return {\n    [baseClass]: true,\n    [`${baseClass}--disabled`]: props.disabled,\n    [`${baseClass}--active`]: !props.disabled && active.value\n  }\n})\nconst isClosable = computed(() => {\n  if (isDefined(props.closable)) {\n    return props.closable\n  }\n\n  return tabNavState?.closable ?? false\n})\n\ndefineExpose({\n  wrapper,\n\n  handleSelect,\n  handleClose\n})\n\nwatch(\n  () => props.label,\n  value => {\n    currentLabel.value = value\n    tabNavState?.refreshLabels()\n  }\n)\nwatch(active, value => {\n  emitEvent(props.onToggle!, value)\n})\n\nif (tabNavState) {\n  const state: ItemState = reactive({\n    el: wrapper,\n    label: currentLabel,\n    index,\n    total\n  })\n\n  watch(currentLabel, () => {\n    active.value = currentLabel.value === tabNavState.currentActive\n  })\n  watch(\n    () => tabNavState.currentActive,\n    value => {\n      active.value = currentLabel.value === value\n    },\n    { immediate: true }\n  )\n\n  tabNavState.increaseItem(state)\n\n  onBeforeUnmount(() => {\n    tabNavState.decreaseItem(state)\n  })\n}\n\nfunction handleSelect() {\n  if (props.disabled) {\n    return\n  }\n\n  tabNavState?.handleActive(currentLabel.value)\n}\n\nfunction handleClose() {\n  if (props.disabled) {\n    return\n  }\n\n  tabNavState?.handleClose(currentLabel.value)\n}\n</script>\n\n<template>\n  <li ref=\"wrapper\" :class=\"nh.be('item')\" role=\"none\">\n    <div :class=\"nh.be('pad')\"></div>\n    <div\n      :class=\"contentClass\"\n      role=\"tab\"\n      tabindex=\"0\"\n      :aria-disabled=\"props.disabled\"\n      :aria-setsize=\"total || undefined\"\n      :aria-posinset=\"index || undefined\"\n      @click=\"handleSelect\"\n      @keydown.enter.stop=\"handleSelect\"\n    >\n      <Icon v-if=\"props.icon\" :class=\"nh.be('icon')\" :icon=\"props.icon\"></Icon>\n      <slot>\n        {{ props.label }}\n      </slot>\n      <button\n        v-if=\"isClosable\"\n        type=\"button\"\n        :class=\"nh.be('close')\"\n        @click.stop=\"handleClose\"\n      >\n        <Icon v-bind=\"icons.close\" label=\"close\"></Icon>\n      </button>\n    </div>\n  </li>\n</template>\n"
    },
    {
      "target": "components/tab-nav/tab-nav.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@/components/icon'\nimport { ResizeObserver } from '@/components/resize-observer'\nimport { Scroll } from '@/components/scroll'\nimport { TabNavItem } from '@/components/tab-nav-item'\n\nimport { computed, onMounted, provide, reactive, ref, toRef, watch } from 'vue'\n\nimport { emitEvent, useIcons, useNameHelper, useProps } from '@pocui/config'\nimport { useDisplay } from '@pocui/hooks'\nimport { debounceMinor, isNullish } from '@pocui/utils'\n\nimport { tabNavProps } from './props'\n\nimport { TAB_NAV_STATE, trackStyleMap } from './symbol'\n\nimport type { ChangeEvent, ItemState } from './symbol'\n\ndefineOptions({\n  name: 'TabNav',\n  description:'标签导航组件，标签页组件的基础组件，可以用于生成自定义的标签页结构。',\n  categories: ['navigation'],\n  components: {\n    components: {\n      Icon,\n      ResizeObserver,\n      Scroll,\n      TabNavItem\n    }\n  }\n})\n\nconst _props = defineProps(tabNavProps)\nconst props = useProps('tabNav', _props, {\n  active: {\n    default: null,\n    static: true\n  },\n  card: false,\n  options: {\n    default: () => [],\n    static: true\n  },\n  align: 'left',\n  placement: 'top',\n  closable: false,\n  showAdd: false\n})\n\nconst emit = defineEmits(['update:active'])\n\ndefineSlots<{\n  prefix(): any,\n  suffix(): any,\n  add(): any,\n  marker(): any\n}>()\n\nconst nh = useNameHelper('tab-nav')\nconst icons = useIcons()\nconst currentActive = ref(props.active)\nconst markerPosition = ref(0)\nconst markerSize = ref(0)\nconst itemStates = new Set<ItemState>()\n\nconst wrapper = useDisplay(updateMarkerPosition)\nconst scroll = ref<InstanceType<typeof Scroll>>()\n\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.bs('vars')]: true,\n    [nh.in()]: props.inherit,\n    [nh.bm(`align-${props.align}`)]: true,\n    [nh.bm(props.placement)]: true,\n    [nh.bm('card')]: props.card\n  }\n})\nconst markerStyle = computed(() => {\n  const [position, length] = trackStyleMap[props.placement]\n\n  return {\n    [position]: `${markerPosition.value}px`,\n    [length]: `${markerSize.value}px`\n  }\n})\nconst items = computed(() => {\n  return props.options.map(item => {\n    if (typeof item === 'string' || typeof item === 'number') {\n      return { label: item }\n    }\n\n    return item\n  })\n})\nconst scrollMode = computed(() => {\n  return props.placement === 'top' || props.placement === 'bottom' ? 'horizontal-exact' : 'vertical'\n})\n\nconst refreshLabels = debounceMinor(() => {\n  const total = itemStates.size\n\n  Array.from(itemStates).forEach((item, index) => {\n    item.index = index + 1\n    item.total = total\n\n    if (isNullish(item.label)) {\n      item.label = index + 1\n    }\n  })\n\n  if (itemStates.size >= 1 && isActiveEmpty()) {\n    currentActive.value = Array.from(itemStates)[0].label\n  }\n})\n\ndefineExpose({\n  wrapper,\n  scroll,\n\n  updateMarkerPosition,\n  handleAdd\n})\n\nprovide(\n  TAB_NAV_STATE,\n  reactive({\n    currentActive,\n    closable: toRef(props, 'closable'),\n    increaseItem,\n    decreaseItem,\n    handleActive,\n    handleClose,\n    refreshLabels\n  })\n)\n\nwatch(\n  () => props.active,\n  value => {\n    currentActive.value = value\n    updateMarkerPosition()\n  }\n)\nwatch(\n  () => props.placement,\n  () => {\n    requestAnimationFrame(updateMarkerPosition)\n  }\n)\n\nonMounted(updateMarkerPosition)\n\nfunction isActiveEmpty() {\n  return isNullish(currentActive.value) || currentActive.value === ''\n}\n\nfunction increaseItem(item: ItemState) {\n  itemStates.add(item)\n  refreshLabels()\n}\n\nfunction decreaseItem(item: ItemState) {\n  itemStates.delete(item)\n  refreshLabels()\n}\n\nfunction handleActive(label: string | number) {\n  currentActive.value = label\n\n  updateMarkerPosition()\n  emit('update:active', label)\n  emitEvent(props.onChange as ChangeEvent, label)\n}\n\nfunction handleAdd() {\n  emitEvent(props.onAdd)\n}\n\nfunction handleClose(label: string | number) {\n  emitEvent(props.onClose as ChangeEvent, label)\n\n  requestAnimationFrame(updateMarkerPosition)\n}\n\nfunction updateMarkerPosition() {\n  const activeItem = Array.from(itemStates).find(item => item.label === currentActive.value)\n\n  if (activeItem?.el) {\n    if (props.placement === 'top' || props.placement === 'bottom') {\n      markerPosition.value = activeItem.el.offsetLeft\n      markerSize.value = activeItem.el.offsetWidth\n    } else {\n      markerPosition.value = activeItem.el.offsetTop\n      markerSize.value = activeItem.el.offsetHeight\n    }\n  } else {\n    markerPosition.value = 0\n    markerSize.value = 0\n  }\n}\n</script>\n\n<template>\n  <div ref=\"wrapper\" :class=\"className\" tabindex=\"-1\">\n    <ResizeObserver :on-resize=\"updateMarkerPosition\">\n      <div :class=\"[nh.be('extra'), nh.bem('extra', 'prefix')]\">\n        <div v-if=\"$slots.prefix\" :class=\"nh.be('prefix')\">\n          <slot name=\"prefix\"></slot>\n        </div>\n      </div>\n    </ResizeObserver>\n    <Scroll\n      ref=\"scroll\"\n      :class=\"nh.be('scroll')\"\n      :mode=\"scrollMode\"\n      :delta-x=\"40\"\n      :delta-y=\"40\"\n      scroll-tag=\"ul\"\n      :scroll-class=\"nh.be('list')\"\n      :scroll-attrs=\"{ role: 'tablist' }\"\n    >\n      <slot>\n        <TabNavItem\n          v-for=\"item in items\"\n          :key=\"item.label\"\n          :label=\"item.label\"\n          :icon=\"item.icon\"\n          :disabled=\"item.disabled\"\n          :closable=\"item.closable\"\n          @toggle=\"item.onToggle\"\n        >\n          {{ item.content || item.label }}\n        </TabNavItem>\n      </slot>\n      <li v-if=\"props.showAdd || $slots.add\" :class=\"nh.be('item')\" role=\"none\">\n        <div :class=\"nh.be('pad')\"></div>\n        <button type=\"button\" :class=\"nh.be('add')\" @click=\"handleAdd\">\n          <slot name=\"add\">\n            <Icon v-bind=\"icons.plus\" :scale=\"+(icons.plus.scale || 1) * 1.2\"></Icon>\n          </slot>\n        </button>\n      </li>\n      <div\n        v-if=\"!props.card\"\n        :class=\"nh.be('track')\"\n        role=\"none\"\n        :style=\"markerStyle\"\n      >\n        <slot name=\"marker\">\n          <div :class=\"nh.be('marker')\"></div>\n        </slot>\n      </div>\n    </Scroll>\n    <ResizeObserver :on-resize=\"updateMarkerPosition\">\n      <div :class=\"[nh.be('extra'), nh.bem('extra', 'suffix')]\">\n        <div v-if=\"$slots.suffix\" :class=\"nh.be('suffix')\">\n          <slot name=\"suffix\"></slot>\n        </div>\n      </div>\n    </ResizeObserver>\n  </div>\n</template>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils", "@pocui/hooks"],
  "registryDependencies": ["tab-nav.scss", "icon", "resize-observer", "scroll", "tab-nav-item"],
  "categories": ["navigation"],
  "meta": { "isReferenceOnly": false }
}
