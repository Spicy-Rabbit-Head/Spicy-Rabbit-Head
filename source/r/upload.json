{
  "name": "upload",
  "type": "registry:component",
  "description": "文件上传控件，用于将一些文件通过网页上传至远端服务器的场景，能够提供友好的交互和完善的信息展示。",
  "files": [
    {
      "target": "components/upload/file-icon.ts",
      "content": "import { computed } from 'vue'\n\nimport { useIcons } from '@pocui/config'\n\nimport type { IconsConfig } from '@pocui/config'\n\nconst iconConfig = new Map<keyof IconsConfig, string[]>()\n\niconConfig.set('fileVideo', ['mp4', 'flv', 'mkv', 'rm', 'rmvb', 'mov', 'mtv', 'wnv', 'avi', '3gp', 'amv', 'dmv'])\n\niconConfig.set('fileImage', [\n  'bmp',\n  'jpg',\n  'jpeg',\n  'png',\n  'tif',\n  'gif',\n  'pcx',\n  'tga',\n  'exif',\n  'fpx',\n  'svg',\n  'psd',\n  'cdr',\n  'pcd',\n  'dxf',\n  'ufo',\n  'eps',\n  'ai',\n  'raw',\n  'wmf',\n  'webp'\n])\niconConfig.set(\n  'fileCode',\n  [\n    ['json', 'xml', 'property', 'class', 'c', 'cpp', 'cc', 'cxx', 'h', 'hpp', 'hxx', 'cs', 'yml', 'yaml', 'ts', 'tsx'],\n    ['js', 'jsx', 'mjs', 'cjs', 'ts', 'tsx', 'mts', 'cts'],\n    ['css', 'styl', 'pcss'],\n    ['sass', 'scss'],\n    ['less'],\n    ['java', 'class', 'jsp'],\n    ['vue'],\n    ['html', 'htm'],\n    ['py', 'pyc', 'pyw', 'pyo', 'pyd']\n  ].flat()\n)\niconConfig.set('fileAudio', [\n  'cd',\n  'wave',\n  'aiff',\n  'mpeg',\n  'mp3',\n  'mpeg-4',\n  'midi',\n  'wma',\n  'ra',\n  'rm',\n  'rmx',\n  'vqf',\n  'amr',\n  'ape',\n  'flac',\n  'aac'\n])\niconConfig.set('fileZip', ['rar', 'zip', '7z', 'cab', 'arj', 'lzh', 'tar', 'gz', 'ace', 'uue', 'bz2', 'jar', 'iso'])\niconConfig.set(\n  'fileText',\n  [\n    ['doc', 'docx'],\n    ['xls', 'xlsx', 'xlsm', 'xlsb', 'xlam', 'csv'],\n    ['pdf', 'txt', 'md']\n  ].flat()\n)\niconConfig.set('file', ['default'])\n\nexport function useFileIcons(icons = useIcons()) {\n  return computed(() => {\n    const map: Record<string, Record<string, any>> = {}\n\n    for (const [iconName, types] of iconConfig.entries()) {\n      if (types?.length) {\n        for (const type of types) {\n          map[type] = icons.value[iconName]\n        }\n      }\n    }\n\n    return map\n  })\n}\n"
    },
    {
      "target": "components/upload/index.ts",
      "content": "export { default as Upload } from './upload'\n\nexport { uploadProps } from './props'\n\nexport type { UploadProps, UploadCProps } from './props'\nexport type {\n  UploadListType,\n  UploadStatus,\n  UploadSourceFile,\n  UploadHttpError,\n  UploadFileState,\n  UploadFileOptions,\n  UploadOptions,\n  UploadExposed\n} from './symbol'\n"
    },
    {
      "target": "components/upload/props.ts",
      "content": "import {\n  booleanProp,\n  buildProps,\n  eventProp,\n  iconProp,\n  localeProp,\n  stateProp,\n  styleProp\n} from '@pocui/config'\n\nimport type { IconEffect } from '@/components/icon'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type {\n  BeforeSelect,\n  BeforeUpload,\n  RenderFn,\n  UploadFileOptions,\n  UploadFileState,\n  UploadHttpError,\n  UploadListType\n} from './symbol'\n\nexport const uploadProps = buildProps({\n  state: stateProp,\n  locale: localeProp('upload'),\n  url: String,\n  fileList: Array as PropType<UploadFileOptions[]>,\n  multiple: booleanProp,\n  tip: String,\n  accept: [String, Array] as PropType<string | string[]>,\n  filter: [String, Array] as PropType<string | string[]>,\n  maxSize: Number,\n  field: String,\n  data: Object as PropType<Record<string, string | Blob>>,\n  headers: Object as PropType<Record<string, string>>,\n  withCredentials: booleanProp,\n  manual: booleanProp,\n  hiddenFiles: booleanProp,\n  countLimit: Number,\n  allowDrag: booleanProp,\n  onBeforeUpload: Function as PropType<BeforeUpload>,\n  onBeforeSelect: Function as PropType<BeforeSelect>,\n  iconRenderer: Function as PropType<RenderFn>,\n  selectToAdd: booleanProp,\n  listType: String as PropType<UploadListType>,\n  block: booleanProp,\n  loadingText: String,\n  directory: booleanProp,\n  pathField: String,\n  disabledClick: booleanProp,\n  buttonLabel: String,\n  disabled: booleanProp,\n  loading: booleanProp,\n  loadingIcon: iconProp,\n  loadingLock: booleanProp,\n  loadingEffect: String as PropType<IconEffect>,\n  image: booleanProp,\n  defaultFiles: Array as PropType<UploadFileOptions[]>,\n  canPreview: Function as PropType<(file: UploadFileState) => boolean>,\n  listStyle: styleProp,\n  name: String,\n  onExceed: eventProp<(files: UploadFileState[]) => void>(),\n  onChange: eventProp<(files: UploadFileState[]) => void>(),\n  onFilterError: eventProp<(files: UploadFileState) => void>(),\n  onSizeError: eventProp<(files: UploadFileState) => void>(),\n  onDelete: eventProp<(file: UploadFileState) => void>(),\n  onPreview: eventProp<(file: UploadFileState) => void>(),\n  onProgress: eventProp<(file: UploadFileState, percent: number) => void>(),\n  onSuccess: eventProp<(file: UploadFileState, response: any) => void>(),\n  onError: eventProp<(file: UploadFileState, error: UploadHttpError) => void>()\n})\n\nexport type UploadProps = ExtractPropTypes<typeof uploadProps>\nexport type UploadCProps = ConfigurableProps<UploadProps, 'url' | 'fileList', 'onBeforeUpload' | 'onBeforeSelect'>\n\nexport const uploadListProps = buildProps({\n  files: Array as PropType<UploadFileState[]>,\n  selectToAdd: booleanProp,\n  iconRenderer: Function as PropType<RenderFn>,\n  type: String as PropType<UploadListType>,\n  loadingText: String,\n  style: styleProp,\n  precision: Number,\n  canPreview: Function as PropType<(file: UploadFileState) => boolean>,\n  onDelete: eventProp<(file: UploadFileState) => void>(),\n  onPreview: eventProp<(file: UploadFileState) => void>()\n})\n\nexport type UploadListProps = ExtractPropTypes<typeof uploadListProps>\nexport type UploadListCProps = ConfigurableProps<UploadListProps, 'files'>\n\nexport const uploadFileProps = buildProps({\n  locale: localeProp('upload'),\n  file: Object as PropType<UploadFileState>,\n  iconRenderer: Function as PropType<RenderFn>,\n  listType: String as PropType<UploadListType>,\n  loadingText: String,\n  selectToAdd: booleanProp,\n  precision: Number,\n  canPreview: Function as PropType<(file: UploadFileState) => boolean>,\n  onDelete: eventProp<(file: UploadFileState) => void>(),\n  onPreview: eventProp<(file: UploadFileState) => void>()\n})\n\nexport type UploadFileProps = ExtractPropTypes<typeof uploadFileProps>\nexport type UploadFileCProps = ConfigurableProps<UploadFileProps, 'file'>\n"
    },
    {
      "target": "components/upload/request.ts",
      "content": "import { has, isDefined } from '@pocui/utils'\n\nimport type { UploadHttpError, UploadOptions } from './symbol'\n\nfunction getError(url: string, xhr: XMLHttpRequest) {\n  const message = `未能 post ${url} ${xhr.status}'`\n  const error = new Error(message) as UploadHttpError\n\n  error.response = getBody(xhr)\n  error.url = url\n  error.status = xhr.status\n  error.method = 'POST'\n  return error\n}\n\nfunction getBody(xhr: XMLHttpRequest) {\n  const text = xhr.responseText || xhr.response\n  if (!text) {\n    return text\n  }\n\n  try {\n    return JSON.parse(text)\n  } catch (e) {\n    return text\n  }\n}\n\nexport function upload(options: UploadOptions) {\n  if (typeof XMLHttpRequest === 'undefined') {\n    return null\n  }\n\n  const xhr = new XMLHttpRequest()\n  const url = options.url\n\n  if (xhr.upload && options.onProgress) {\n    xhr.upload.onprogress = event => {\n      let percent = 0\n\n      if (event.total > 0) {\n        percent = (event.loaded / event.total) * 100\n      }\n\n      options.onProgress!(percent)\n    }\n  }\n\n  const formData = new FormData()\n\n  if (options.data) {\n    const data = options.data\n\n    Object.keys(data).forEach(key => {\n      formData.append(key, data[key])\n    })\n  }\n\n  formData.append(options.field || 'file', options.file)\n  options.file.path && formData.append(options.pathField || 'path', options.file.path)\n\n  if (options.onError) {\n    xhr.onerror = () => {\n      options.onError!(getError(url, xhr))\n    }\n  }\n\n  xhr.onload = () => {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      if (options.onError) {\n        options.onError(getError(url, xhr))\n      }\n\n      return\n    }\n\n    const body = getBody(xhr)\n    options.onSuccess?.(body)\n  }\n\n  if (options.onAbort) {\n    xhr.onabort = () => {\n      options.onAbort!()\n    }\n  }\n\n  xhr.open('POST', url, true)\n\n  if (options.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true\n  }\n\n  const headers = options.headers ?? {}\n\n  Object.keys(headers).forEach(header => {\n    if (has(headers, header) && isDefined(headers[header])) {\n      xhr.setRequestHeader(header, headers[header])\n    }\n  })\n\n  xhr.send(formData)\n\n  return xhr\n}\n"
    },
    {
      "target": "components/upload/symbol.ts",
      "content": "import type { ComponentPublicInstance } from 'vue'\n\nexport type UploadListType = 'name' | 'detail' | 'thumbnail' | 'card'\nexport type UploadStatus = 'pending' | 'uploading' | 'fail' | 'success' | 'delete'\n\nexport type UploadSourceFile = File & { path?: string }\n\nexport type UploadHttpError = Error & {\n  response: any,\n  url: string,\n  status: number,\n  method: string\n}\n\nexport const enum StatusType {\n  PENDING = 'pending',\n  UPLOADING = 'uploading',\n  FAIL = 'fail',\n  SUCCESS = 'success',\n  DELETE = 'delete'\n}\n\nexport interface UploadFileState {\n  id: string | number,\n\n  name: string,\n\n  size: number,\n\n  type: string,\n\n  base64: string | null,\n\n  status: UploadStatus,\n\n  percentage: number,\n\n  source: UploadSourceFile | null,\n\n  url: string | null,\n\n  path: string,\n\n  xhr: XMLHttpRequest | null,\n\n  response: any,\n\n  error: UploadHttpError | null\n}\n\nexport type UploadFileOptions = Partial<Omit<UploadFileState, 'xhr' | 'response' | 'error'>>\n\ntype MaybePromise<T> = T | Promise<T>\n\nexport type BeforeUpload = (\n  file: UploadFileState,\n  files: UploadFileState[]\n) => MaybePromise<boolean | Blob | UploadSourceFile | void>\nexport type BeforeSelect = (file: UploadFileState, files: UploadFileState[]) => MaybePromise<boolean | void>\nexport type RenderFn = (data: { file: UploadFileState }) => any\n\nexport interface UploadOptions {\n  url: string,\n\n  file: UploadSourceFile,\n\n  headers?: Record<string, string>,\n\n  withCredentials?: boolean,\n\n  data?: Record<string, string | Blob>,\n\n  field?: string,\n\n  pathField?: string,\n\n  onProgress?: (percent: number) => void,\n\n  onSuccess?: (response: any) => void,\n\n  onError?: (error: UploadHttpError) => void,\n\n  onAbort?: () => void\n}\n\nexport interface DirectoryEntity {\n  name: string,\n\n  fullPath: string,\n\n  isFile: boolean,\n\n  isDirectory: boolean,\n\n  file: (callback: (file: UploadSourceFile) => void) => void,\n\n  createReader: () => DirectoryReader\n}\n\nexport interface DirectoryReader {\n  readEntries: (onSuccess: (entities: DirectoryEntity[]) => void, onError?: (errors: any) => void) => void\n}\n\nexport interface UploadExposed extends ComponentPublicInstance {\n  isDragOver: boolean,\n\n  execute: () => Promise<false | any[]>,\n\n  handleDelete: (file: UploadFileState) => void,\n\n  focus: (options?: FocusOptions) => void,\n\n  blur: () => void\n}\n\nexport const uploadListTypes = Object.freeze<UploadListType[]>(['name', 'detail', 'thumbnail', 'card'])\n"
    },
    {
      "target": "components/upload/upload-file.vue",
      "content": "<script setup lang=\"ts\">\nimport { CollapseTransition } from '@/components/collapse-transition'\nimport { Icon } from '@/components/icon'\nimport { Progress } from '@/components/progress'\nimport { Renderer } from '@/components/renderer'\n\nimport { computed, toRef } from 'vue'\n\nimport { emitEvent, useIcons, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { toFixed } from '@pocui/utils'\n\nimport { useFileIcons } from './file-icon'\nimport { uploadFileProps } from './props'\n\nimport { StatusType, uploadListTypes } from './symbol'\n\nimport type { UploadFileState, UploadStatus } from './symbol'\n\ndefineOptions({ name: 'UploadFile',\n  description:'上传文件组件，用于显示单个上传文件的状态和进度。',categories: ['form'] })\n\nconst imageExtRE = /\\.(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico)$/i\nconst imageBase64RE = /^data:image\\//\n\nfunction isImage(file: UploadFileState) {\n  if (file.type) {\n    return file.type.startsWith('image/')\n  }\n\n  const { name, url, base64 } = file\n\n  return !!(\n    imageExtRE.test(name) ||\n    (url && (imageExtRE.test(url) || imageBase64RE.test(url))) ||\n    (base64 && imageBase64RE.test(base64))\n  )\n}\n\nconst _props = defineProps(uploadFileProps)\nconst props = useProps('uploadFile', _props, {\n  locale: null,\n  file: {\n    default: () => ({}) as UploadFileState,\n    static: true\n  },\n  iconRenderer: {\n    default: null,\n    isFunc: true\n  },\n  listType: {\n    default: 'name',\n    validator: value => uploadListTypes.includes(value)\n  },\n  loadingText: null,\n  selectToAdd: false,\n  precision: 2,\n  canPreview: {\n    default: isImage,\n    isFunc: true\n  }\n})\n\ndefineSlots<{\n  default(props: { file: UploadFileState, status: UploadStatus, percentage: number }): any,\n  icon(props: { file: UploadFileState }): any\n}>()\n\nconst nh = useNameHelper('upload')\nconst locale = useLocale('upload', toRef(props, 'locale'))\nconst icons = useIcons()\nconst fileIcons = useFileIcons(icons)\n\nconst useIconRenderer = computed(() => typeof props.iconRenderer === 'function')\nconst fileName = computed(() => props.file.path || props.file.name)\nconst percentage = computed(() => toFixed(props.file.percentage, props.precision))\nconst showThumb = computed(() => isImage(props.file) && (props.file.url || props.file.base64))\n\nfunction getFileExtension(file: UploadFileState) {\n  return file.name.split('.').pop()!.toLocaleLowerCase()\n}\n\nfunction getFileIcon(file: UploadFileState, scale = 1) {\n  const extension = getFileExtension(file)\n  const icon = extension ? fileIcons.value[extension] || fileIcons.value.default : fileIcons.value.default\n\n  return {\n    ...icon,\n    scale: +(icon.scale || 1) * scale\n  }\n}\n\nfunction handleDelete(file: UploadFileState) {\n  emitEvent(props.onDelete, file)\n}\n\nfunction handlePreview(file: UploadFileState) {\n  emitEvent(props.onPreview, file)\n}\n\nfunction imageToBase64(file: UploadFileState) {\n  if (!file.source || !isImage(props.file)) return\n\n  const reader = new FileReader()\n\n  reader.readAsDataURL(file.source)\n  reader.onload = () => {\n    if (file.status !== StatusType.DELETE) {\n      file.base64 = reader.result?.toString() ?? null\n    }\n  }\n}\n</script>\n\n<template>\n  <li\n    :class=\"[\n      nh.be('file'),\n      nh.bem('file', props.listType),\n      nh.bem('file', props.file.status),\n      props.inherit && nh.bem('file', 'inherit')\n    ]\"\n    :title=\"fileName\"\n    tabindex=\"-1\"\n  >\n    <slot :file=\"props.file\" :status=\"props.file.status\" :percentage=\"percentage\">\n      <template v-if=\"props.listType === 'name'\">\n        <div :class=\"nh.be('label')\">\n          <div :class=\"[nh.be('icon'), nh.be('file-icon')]\">\n            <slot name=\"icon\" :file=\"props.file\">\n              <Renderer v-if=\"useIconRenderer\" :renderer=\"props.iconRenderer\" :data=\"{ file: props.file }\"></Renderer>\n              <Icon v-else v-bind=\"getFileIcon(props.file)\"></Icon>\n            </slot>\n          </div>\n          <span :class=\"nh.be('filename')\">\n            {{ fileName }}\n          </span>\n        </div>\n        <div :class=\"nh.be('actions')\">\n          <span v-if=\"props.file.status === 'uploading'\" style=\"margin-inline-end: 0.5em\" :class=\"nh.be('percentage')\">\n            {{ `${percentage}%` }}\n          </span>\n          <div v-if=\"props.file.status === 'success'\" :class=\"[nh.be('icon'), nh.be('success')]\">\n            <Icon v-bind=\"icons.success\"></Icon>\n          </div>\n          <div v-else-if=\"props.file.status === 'fail'\" :class=\"[nh.be('icon'), nh.be('fail')]\">\n            <Icon v-bind=\"icons.warning\"></Icon>\n          </div>\n          <div v-else-if=\"props.file.status === 'uploading'\" :class=\"[nh.be('icon'), nh.be('loading')]\">\n            <Icon v-bind=\"icons.loading\"></Icon>\n          </div>\n          <button type=\"button\" :class=\"[nh.be('icon'), nh.be('close')]\" @click=\"handleDelete(props.file)\">\n            <Icon v-bind=\"icons.delete\"></Icon>\n          </button>\n        </div>\n        <div v-if=\"props.file.status === 'uploading'\" :class=\"nh.be('progress')\">\n          <Progress\n            inherit\n            info-type=\"none\"\n            :stroke-width=\"2\"\n            :percentage=\"props.file.percentage\"\n            :precision=\"props.precision\"\n          ></Progress>\n        </div>\n      </template>\n      <template v-else-if=\"props.listType === 'thumbnail' || props.listType === 'card'\">\n        <div :class=\"nh.be('card')\">\n          <div :class=\"nh.be('thumbnail')\">\n            <template v-if=\"props.file.status === 'uploading'\">\n              <div v-if=\"props.listType === 'thumbnail'\" :class=\"nh.be('progress')\">\n                <span style=\"margin-bottom: 0.3em\">\n                  {{ props.loadingText ?? locale.uploading }}\n                </span>\n                <Progress\n                  inherit\n                  info-type=\"none\"\n                  :stroke-width=\"2\"\n                  :percentage=\"props.file.percentage\"\n                  :precision=\"props.precision\"\n                ></Progress>\n                <span style=\"margin-top: 3px\" :class=\"nh.be('percentage')\">\n                  {{ `${percentage}%` }}\n                </span>\n              </div>\n              <Icon\n                v-else\n                v-bind=\"icons.loading\"\n                :scale=\"+(icons.loading.scale || 1) * 1.8\"\n                label=\"loading\"\n              ></Icon>\n            </template>\n            <img\n              v-else-if=\"showThumb\"\n              :class=\"nh.be('image')\"\n              :src=\"props.file.url || props.file.base64 || ''\"\n              :alt=\"fileName\"\n            />\n            <template v-else>\n              {{ imageToBase64(props.file) }}\n              <slot name=\"icon\" :file=\"props.file\">\n                <Renderer v-if=\"useIconRenderer\" :renderer=\"props.iconRenderer\" :data=\"{ file: props.file }\"></Renderer>\n                <Icon v-else v-bind=\"getFileIcon(props.file, 2.8)\"></Icon>\n              </slot>\n            </template>\n          </div>\n          <div v-if=\"props.listType === 'card'\" :class=\"nh.be('info')\">\n            <span :class=\"nh.be('filename')\">\n              {{ fileName }}\n            </span>\n            <CollapseTransition>\n              <div v-if=\"props.file.status === 'uploading'\" :class=\"nh.be('progress')\">\n                <Progress\n                  inherit\n                  info-type=\"none\"\n                  :stroke-width=\"4\"\n                  :percentage=\"props.file.percentage\"\n                  :precision=\"props.precision\"\n                ></Progress>\n              </div>\n            </CollapseTransition>\n          </div>\n          <div v-if=\"props.listType === 'card' || props.file.status !== 'uploading'\" :class=\"nh.be('actions')\">\n            <div v-if=\"props.listType === 'thumbnail'\" :class=\"nh.be('mask')\"></div>\n            <button\n              type=\"button\"\n              :class=\"[\n                nh.be('icon'),\n                nh.be('action'),\n                {\n                  [nh.bem('action', 'disabled')]: !props.canPreview(props.file)\n                }\n              ]\"\n              :disabled=\"!props.canPreview(props.file)\"\n              @click=\"handlePreview(props.file)\"\n            >\n              <Icon v-bind=\"icons.preview\" :scale=\"+(icons.preview.scale || 1) * 1.4\"></Icon>\n            </button>\n            <button type=\"button\" :class=\"[nh.be('icon'), nh.be('action')]\" @click=\"handleDelete(props.file)\">\n              <Icon v-bind=\"icons.delete\" :scale=\"+(icons.delete.scale || 1) * 1.4\"></Icon>\n            </button>\n          </div>\n        </div>\n      </template>\n    </slot>\n  </li>\n</template>\n"
    },
    {
      "target": "components/upload/upload-list.vue",
      "content": "<script setup lang=\"ts\">\nimport { UploadFile } from '@/components/upload-file'\n\nimport { computed } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\n\nimport { uploadListProps } from './props'\n\nimport { uploadListTypes } from './symbol'\n\nimport type { UploadFileState, UploadStatus } from './symbol'\n\ndefineOptions({ name: 'UploadList',description:'上传列表组件，用于管理和显示多个上传文件。', categories: ['form'] })\n\nconst _props = defineProps(uploadListProps)\nconst props = useProps('uploadList', _props, {\n  files: {\n    default: () => [],\n    static: true\n  },\n  selectToAdd: false,\n  iconRenderer: {\n    default: null,\n    isFunc: true\n  },\n  type: {\n    default: 'name',\n    validator: value => uploadListTypes.includes(value)\n  },\n  loadingText: null,\n  style: null,\n  precision: 2\n  // 'canPreview' 使用 UploadFile 默认\n})\n\ndefineSlots<{\n  item(props: { file: UploadFileState, status: UploadStatus, percentage: number }): any,\n  icon(props: { file: UploadFileState }): any,\n  suffix(): any\n}>()\n\nconst nh = useNameHelper('upload')\nconst transitionName = computed(() => nh.ns('fade'))\n\nfunction handleDelete(file: UploadFileState) {\n  emitEvent(props.onDelete, file)\n}\n\nfunction handlePreview(file: UploadFileState) {\n  emitEvent(props.onPreview, file)\n}\n</script>\n\n<template>\n  <ul :class=\"[nh.be('files'), nh.bs('vars'), props.inherit && nh.bem('files', 'inherit')]\" :style=\"props.style\">\n    <Transition\n      v-for=\"item in props.files\"\n      :key=\"item.id\"\n      appear\n      :name=\"props.selectToAdd ? transitionName : undefined\"\n    >\n      <UploadFile\n        inherit\n        :file=\"item\"\n        :icon-renderer=\"props.iconRenderer\"\n        :list-type=\"props.type\"\n        :loading-text=\"props.loadingText\"\n        :select-to-add=\"props.selectToAdd\"\n        :precision=\"props.precision\"\n        :can-preview=\"props.canPreview\"\n        @delete=\"handleDelete\"\n        @preview=\"handlePreview\"\n      >\n        <template #default=\"{ file, status, percentage }\">\n          <slot\n            name=\"item\"\n            :file=\"file\"\n            :status=\"status\"\n            :percentage=\"percentage\"\n          ></slot>\n        </template>\n        <template #icon=\"{ file }\">\n          <slot name=\"icon\" :file=\"file\"></slot>\n        </template>\n      </UploadFile>\n    </Transition>\n    <slot name=\"suffix\"></slot>\n  </ul>\n</template>\n"
    },
    {
      "target": "components/upload/upload.tsx",
      "content": "import { Button } from '@/components/button'\nimport { useFieldStore } from '@/components/form'\nimport { Icon } from '@/components/icon'\nimport { UploadList } from '@/components/upload-list'\n\nimport { computed, defineComponent, onBeforeUnmount, ref, renderSlot, toRef, watch } from 'vue'\n\nimport {\n  createIconProp,\n  createStateProp,\n  emitEvent,\n  useIcons,\n  useLocale,\n  useNameHelper,\n  useProps\n} from '@pocui/config'\n\nimport { isClient, isDefined, isFalse, isPromise, noop, randomString } from '@pocui/utils'\n\nimport { uploadProps } from './props'\nimport { upload } from './request'\n\nimport { StatusType, UploadStatus, uploadListTypes } from './symbol'\n\nimport type { DirectoryEntity, UploadFileOptions, UploadFileState, UploadHttpError, UploadSourceFile } from './symbol'\nimport type { Ref, SlotsType } from 'vue'\n\nfunction getDefaultFileState(): UploadFileState {\n  return {\n    id: randomString(),\n    name: '',\n    size: 0,\n    type: '',\n    base64: null,\n    status: StatusType.PENDING,\n    percentage: 0,\n    source: null,\n    url: null,\n    path: '',\n    xhr: null,\n    response: null,\n    error: null\n  }\n}\n\nexport default defineComponent({\n  name: 'Upload',\n  description:'文件上传控件，用于将一些文件通过网页上传至远端服务器的场景，能够提供友好的交互和完善的信息展示。',\n  categories: ['form'],\n  components: {\n    Button,\n    Icon,\n    UploadList\n  },\n  props: uploadProps,\n  emits: ['update:file-list'],\n  slots: Object as SlotsType<{\n    default?(props: { isDragOver: boolean }): any,\n    icon(props: { file: UploadFileState }): any,\n    item(props: { file: UploadFileState, status: UploadStatus, percentage: number }): any,\n    tip?(): any\n  }>,\n  setup(_props, { slots, emit, expose }) {\n    const { idFor, state, disabled, loading, size, validateField, getFieldValue, setFieldValue } =\n      useFieldStore<UploadFileOptions[]>(focus)\n\n    const props = useProps('upload', _props, {\n      state: createStateProp(state),\n      locale: null,\n      url: {\n        default: '',\n        static: true\n      },\n      fileList: {\n        default: () => getFieldValue(),\n        static: true\n      },\n      multiple: false,\n      tip: '',\n      accept: null,\n      filter: '',\n      maxSize: {\n        default: null,\n        validator: value => value >= 0\n      },\n      field: 'file',\n      data: () => ({}),\n      headers: () => ({}),\n      withCredentials: false,\n      manual: false,\n      hiddenFiles: false,\n      countLimit: {\n        default: 0,\n        validator: value => value >= 0\n      },\n      allowDrag: false,\n      onBeforeUpload: {\n        default: null,\n        isFunc: true\n      },\n      onBeforeSelect: {\n        default: null,\n        isFunc: true\n      },\n      iconRenderer: {\n        default: null,\n        isFunc: true\n      },\n      selectToAdd: false,\n      listType: {\n        default: 'name',\n        validator: value => uploadListTypes.includes(value)\n      },\n      block: false,\n      loadingText: null,\n      directory: false,\n      pathField: 'path',\n      disabledClick: false,\n      buttonLabel: null,\n      disabled: () => disabled.value,\n      loading: () => loading.value,\n      loadingIcon: createIconProp(),\n      loadingLock: false,\n      loadingEffect: null,\n      image: false,\n      defaultFiles: () => [],\n      listStyle: null,\n      name: {\n        default: '',\n        static: true\n      }\n    })\n\n    const nh = useNameHelper('upload')\n    const locale = useLocale('upload', toRef(props, 'locale'))\n    const icons = useIcons()\n    const fileStates = ref([]) as Ref<UploadFileState[]>\n    const isDragOver = ref(false)\n\n    const input = ref<HTMLInputElement>()\n    const button = ref<InstanceType<typeof Button>>()\n    const panel = ref<HTMLElement>()\n\n    const readonly = computed(() => props.loading && props.loadingLock)\n    const className = computed(() => {\n      return [\n        nh.b(),\n        nh.bs('vars'),\n        nh.bm(`type-${props.listType}`),\n        {\n          [nh.in()]: props.inherit,\n          [nh.bm(props.state)]: props.state !== 'default',\n          [nh.bm('multiple')]: props.multiple,\n          [nh.bm('drag')]: props.allowDrag,\n          [nh.bm('to-add')]: props.selectToAdd,\n          [nh.bm('block')]: props.block,\n          [nh.bm('drag-only')]: props.disabledClick,\n          [nh.bm('image')]: props.image,\n          [nh.bm('has-file')]: !props.hiddenFiles && renderFiles.value.length,\n          [nh.bm('readonly')]: readonly.value,\n          [nh.bm('loading')]: props.loading\n        }\n      ]\n    })\n    const controlClass = computed(() => {\n      if (props.image) {\n        return {\n          [nh.be('image-control')]: true,\n          [nh.bem('image-control', 'drag-over')]: isDragOver.value,\n          [nh.bem('image-control', 'disabled')]: props.disabled\n        }\n      }\n\n      return {\n        [nh.be('control')]: true,\n        [nh.bem('control', 'drag-over')]: isDragOver.value\n      }\n    })\n    const acceptString = computed(() => {\n      const accept = props.image ? (props.accept?.length ? props.accept : 'image/*') : props.accept\n\n      return accept && (typeof accept === 'string' ? accept : accept.join())\n    })\n    const defaultList = computed(() => props.defaultFiles.map(file => createFileState(file)))\n    const renderFiles = computed(() => {\n      return defaultList.value.concat(fileStates.value).filter(item => item.status !== StatusType.DELETE)\n    })\n\n    watch(\n      () => props.fileList,\n      value => {\n        const idMap = new Map<string | number, UploadFileState>()\n        const fileMap = new Map<UploadSourceFile, UploadFileState>()\n\n        for (const state of fileStates.value) {\n          if (isDefined(state.id)) {\n            idMap.set(state.id, state)\n          }\n\n          if (state.source) {\n            fileMap.set(state.source, state)\n          }\n        }\n\n        fileStates.value = (value || []).map(file =>\n          createFileState(file, file.id ? idMap.get(file.id) : file.source ? fileMap.get(file.source) : undefined)\n        )\n        syncInputFiles()\n      },\n      {\n        immediate: true,\n        deep: true\n      }\n    )\n\n    expose({\n      isDragOver,\n      execute,\n      handleDelete,\n      focus,\n      blur: () => {\n        button.value?.$el.blur()\n        panel.value?.blur()\n      }\n    })\n\n    function focus(options?: FocusOptions) {\n      if (button.value?.$el) {\n        button.value.$el.focus(options)\n      } else {\n        panel.value?.focus(options)\n      }\n    }\n\n    function handleClick() {\n      if (props.disabled || readonly.value) return\n\n      !props.disabledClick && input.value?.click()\n    }\n\n    function handleKeyDown(event: KeyboardEvent) {\n      const key = event.code || event.key\n\n      if (key === 'Enter' || key === 'Space') {\n        handleClick()\n      }\n    }\n\n    function handleInputChange(event: Event) {\n      const target = event.target as HTMLInputElement\n\n      if (target?.files) {\n        handleFilesChange(target.files)\n      }\n    }\n\n    async function handleFilesChange(inputFiles: FileList | UploadSourceFile[]) {\n      const originFiles = Array.from(inputFiles || []) as UploadSourceFile[]\n      const shouldAdd = props.selectToAdd\n      const files = shouldAdd ? Array.from(fileStates.value) : []\n\n      for (const file of originFiles) {\n        if (!file.path) {\n          file.path = file.webkitRelativePath\n        }\n\n        let fileState = getFileStateBySource(file)\n\n        if (fileState) {\n          if (fileState.status !== StatusType.SUCCESS && fileState.status !== StatusType.UPLOADING) {\n            fileState.status = StatusType.PENDING\n          }\n        } else {\n          fileState = createFileState({\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            source: file\n          })\n        }\n\n        if (typeof props.onBeforeSelect === 'function') {\n          let result = props.onBeforeSelect(fileState, files)\n\n          if (isPromise(result)) {\n            result = await result\n          }\n\n          if (isFalse(result)) continue\n        }\n\n        if (!files.includes(fileState)) {\n          files.push(fileState)\n        }\n      }\n\n      const countLimit = props.countLimit\n\n      if (countLimit > 0 && files.length > countLimit) {\n        const exceedFiles = files.slice(countLimit)\n\n        emitEvent(props.onExceed, exceedFiles)\n        fileStates.value = files.slice(0, countLimit)\n      } else {\n        fileStates.value = files\n      }\n\n      syncInputFiles()\n      emitChangeEvent()\n\n      if (!props.manual) {\n        execute()\n      }\n    }\n\n    function emitChangeEvent() {\n      emit('update:file-list', fileStates.value)\n      setFieldValue(fileStates.value)\n      emitEvent(props.onChange, fileStates.value)\n      validateField()\n    }\n\n    function getFileStateBySource(file: UploadSourceFile) {\n      const { name, size, type } = file\n      const path = file.path || file.webkitRelativePath\n\n      return fileStates.value.find(({ source }) => {\n        return (\n          source &&\n          (source.path || source.webkitRelativePath) === path &&\n          source.name === name &&\n          source.size === size &&\n          source.type === type\n        )\n      })\n    }\n\n    function createFileState(file: UploadFileOptions, defaults = getDefaultFileState()): UploadFileState {\n      const { id, name, size, type, base64, status, percentage, source, url, path } = file\n\n      Object.assign(defaults, {\n        id: id ?? defaults.id ?? randomString(),\n        name: name || '',\n        size: size || 0,\n        type: type || '',\n        base64: base64 || null,\n        status: status ?? StatusType.PENDING,\n        percentage: percentage || 0,\n        source: source || null,\n        url: url || null,\n        path: path || '',\n        xhr: null,\n        response: null,\n        error: null\n      })\n\n      return defaults\n    }\n\n    function getFileExtension(file: UploadFileState) {\n      return file.name.split('.').pop()!.toLocaleLowerCase()\n    }\n\n    async function execute() {\n      if (!props.url || !verifyFiles()) {\n        return false\n      }\n\n      const uploadFiles = fileStates.value.filter(\n        item => item.status !== StatusType.SUCCESS && item.status !== StatusType.DELETE\n      )\n      const requests: Promise<any>[] = []\n\n      for (const file of uploadFiles) {\n        requests.push(uploadFile(file).catch(noop))\n      }\n\n      return await Promise.all(requests).then(responses => responses.filter(response => response))\n    }\n\n    async function uploadFile(file: UploadFileState) {\n      if (typeof props.onBeforeUpload === 'function') {\n        let result = props.onBeforeUpload(\n          file,\n          fileStates.value.filter(item => item.status !== StatusType.SUCCESS && item.status !== StatusType.DELETE)\n        )\n\n        if (isPromise(result)) {\n          try {\n            result = await result\n          } catch (e) {\n            return\n          }\n        }\n\n        if (isFalse(result)) return\n\n        if (result instanceof Blob) {\n          if (result instanceof File) {\n            file.source = result\n          } else {\n            file.source = new File([result], file.name, {\n              type: file.type\n            })\n          }\n        }\n      }\n\n      if (!file.source) return\n\n      file.status = StatusType.UPLOADING\n\n      const { url, headers, withCredentials, data, field, pathField } = props\n\n      return await new Promise((resolve, reject) => {\n        file.xhr = upload({\n          url,\n          headers,\n          withCredentials,\n          data,\n          field,\n          pathField,\n          file: file.source!,\n          onProgress: percent => {\n            handleProgress(percent, file)\n          },\n          onSuccess: response => {\n            handleSuccess(response, file)\n            resolve(response)\n          },\n          onError: error => {\n            handleError(error, file)\n            reject(error)\n          },\n          onAbort: () => {\n            resolve(null)\n          }\n        })\n      })\n    }\n\n    function verifyFiles() {\n      const limitSize = props.maxSize ? props.maxSize * 1024 : Infinity\n      const filter =\n        typeof props.filter === 'string' ? (props.filter ? [props.filter] : []) : props.filter.filter(item => item)\n\n      for (let i = 0, len = fileStates.value.length; i < len; ++i) {\n        const file = fileStates.value[i]\n        const extension = getFileExtension(file)\n\n        if (filter.length && !filter.includes(extension)) {\n          emitEvent(props.onFilterError, file)\n\n          return false\n        }\n\n        if (file.size > limitSize) {\n          emitEvent(props.onSizeError, file)\n\n          return false\n        }\n      }\n\n      return true\n    }\n\n    function handleDelete(file: UploadFileState) {\n      file.status = StatusType.DELETE\n\n      if (file.xhr) {\n        file.xhr.abort()\n      }\n\n      syncInputFiles()\n      emitEvent(props.onDelete, file)\n      emitChangeEvent()\n    }\n\n    function handlePreview(file: UploadFileState) {\n      emitEvent(props.onPreview, file)\n    }\n\n    function syncInputFiles() {\n      if (!isClient) return\n\n      const dataTransfer = new DataTransfer()\n      fileStates.value = fileStates.value.filter(item => item.status !== StatusType.DELETE)\n\n      fileStates.value.forEach(item => {\n        item.source && dataTransfer.items.add(item.source)\n      })\n\n      if (input.value) {\n        input.value.files = dataTransfer.files\n      }\n    }\n\n    function handleProgress(percent: number, file: UploadFileState) {\n      if (file.status === StatusType.DELETE) return\n\n      file.percentage = percent\n\n      emitEvent(props.onProgress, file, percent)\n      emitChangeEvent()\n    }\n\n    function handleSuccess(response: any, file: UploadFileState) {\n      if (file.status === StatusType.DELETE) return\n\n      file.status = StatusType.SUCCESS\n      file.response = response\n      file.error = null\n\n      emitEvent(props.onSuccess, file, response)\n      emitChangeEvent()\n    }\n\n    function handleError(error: UploadHttpError, file: UploadFileState) {\n      if (file.status === StatusType.DELETE) return\n\n      file.status = StatusType.FAIL\n      file.error = error\n\n      emitEvent(props.onError, file, error)\n      emitChangeEvent()\n    }\n\n    let dragTimer: ReturnType<typeof setTimeout>\n\n    onBeforeUnmount(() => {\n      clearTimeout(dragTimer)\n    })\n\n    async function handleDrop(event: DragEvent) {\n      if (!props.allowDrag || props.disabled || readonly.value) return\n\n      clearTimeout(dragTimer)\n      event.preventDefault()\n\n      isDragOver.value = false\n\n      if (event.dataTransfer) {\n        const files = await collectDropFiles(event.dataTransfer)\n\n        files.length && handleFilesChange(files)\n      }\n    }\n\n    function handleDragEnter(event: DragEvent) {\n      if (!props.allowDrag || props.disabled || readonly.value) return\n\n      clearTimeout(dragTimer)\n      event.preventDefault()\n\n      isDragOver.value = true\n    }\n\n    function handleDragLeave(event: DragEvent) {\n      if (!props.allowDrag || props.disabled || readonly.value) return\n\n      event.preventDefault()\n\n      dragTimer = setTimeout(() => {\n        isDragOver.value = false\n      }, 100)\n    }\n\n    async function collectDropFiles(dataTransfer: DataTransfer) {\n      const { items, files } = dataTransfer\n\n      if (!items.length) return []\n\n      const collectedFiles: File[] = []\n      const dirLoop: Array<{ dir: DirectoryEntity, prefix: string }> = []\n      const processes: Promise<void>[] = []\n\n      for (let i = 0, len = items.length; i < len; ++i) {\n        const entity = items[i].webkitGetAsEntry?.()\n\n        // 内核不支持\n        if (!entity) return files\n\n        if (entity.isFile) {\n          collectedFiles.push(files[i])\n        } else {\n          dirLoop.push({\n            dir: entity as unknown as DirectoryEntity,\n            prefix: ''\n          })\n          // directories.push(entity as unknown as DirectoryEntity)\n        }\n      }\n\n      if (!props.directory || !dirLoop.length) return collectedFiles\n\n      const fileEntries: Array<{ entry: DirectoryEntity, prefix: string }> = []\n\n      let countLimit = props.countLimit - (props.selectToAdd ? fileStates.value.length : 0)\n      countLimit = Math.round(countLimit) > 0 ? countLimit : 100\n\n      const doProcess = () => {\n        while (dirLoop.length) {\n          const loop = dirLoop.shift()!\n          const dir = loop.dir\n          const prefix = loop.prefix ? `${loop.prefix}/${dir.name}` : dir.name\n          const reader = dir.createReader()\n\n          processes.push(\n            new Promise<void>(resolve => {\n              reader.readEntries(entries => {\n                entries.forEach(entry => {\n                  if (entry.isFile) {\n                    fileEntries.push({\n                      entry,\n                      prefix\n                    })\n                  } else {\n                    dirLoop.push({\n                      dir: entry,\n                      prefix\n                    })\n                  }\n                })\n\n                resolve()\n              })\n            })\n          )\n        }\n      }\n\n      while (true) {\n        doProcess()\n        await Promise.all(processes)\n\n        if (!dirLoop.length || fileEntries.length >= countLimit) {\n          break\n        }\n      }\n\n      if (fileEntries.length > 0) {\n        return collectedFiles.concat(\n          await Promise.all(\n            fileEntries.map(\n              ({ entry, prefix }) =>\n                new Promise<File>(resolve =>\n                  entry.file(file => {\n                    file.path = `${prefix}/${file.name}`\n                    resolve(file)\n                  })\n                )\n            )\n          )\n        )\n      }\n\n      return collectedFiles\n    }\n\n    function preventDefault(event: Event) {\n      event.preventDefault()\n    }\n\n    function renderNormalAction() {\n      return !props.allowDrag && !props.disabledClick\n        ? (\n          <>\n            <Button\n              ref={button}\n              inherit\n              size={size.value}\n              type={props.state}\n              disabled={props.disabled}\n              loading={props.loading}\n            >\n              {{\n                default: () => props.buttonLabel ?? locale.value.upload,\n                icon: () => <Icon {...icons.value.upload} />,\n                loading: () => (\n                  <Icon\n                    {...icons.value.loading}\n                    class={nh.be('loading-icon')}\n                    effect={props.loadingEffect || icons.value.loading.effect}\n                    icon={props.loadingIcon || icons.value.loading.icon}\n                    label='loading'\n                  />\n                )\n              }}\n            </Button>\n            {slots.tip ? renderSlot(slots, 'tip') : props.tip && <p class={nh.be('tip')}>{props.tip}</p>}\n          </>\n          )\n        : (\n          <div ref={panel} class={[nh.be('drag-panel'), props.disabled && nh.bem('drag-panel', 'disabled')]} tabindex={0}>\n            <Icon\n              {...icons.value.uploadCloud}\n              class={[nh.be('cloud'), props.disabled && nh.bem('cloud', 'disabled')]}\n              scale={+(icons.value.uploadCloud.scale || 1) * 4}\n            />\n            {slots.tip ? renderSlot(slots, 'tip') : <p class={nh.be('tip')}>{props.tip || locale.value.dragOrClick}</p>}\n            <Icon\n              {...icons.value.loading}\n              class={nh.be('loading-icon')}\n              effect={props.loadingEffect || icons.value.loading.effect}\n              icon={props.loadingIcon || icons.value.loading.icon}\n              label='loading'\n              style={{ opacity: props.loading ? '100%' : '0%' }}\n            />\n          </div>\n          )\n    }\n\n    function renderImageAction() {\n      return (\n        <div class={[nh.be('image-action'), props.disabled && nh.bem('image-action', 'disabled')]}>\n          {slots.default\n            ? (\n                renderSlot(slots, 'default', {\n                  isDragOver: (props.allowDrag || props.disabledClick) && isDragOver.value\n                })\n              )\n            : (\n              <>\n                {props.loading\n                  ? (\n                    <Icon\n                      {...icons.value.loading}\n                      class={nh.be('loading-icon')}\n                      effect={props.loadingEffect || icons.value.loading.effect}\n                      icon={props.loadingIcon || icons.value.loading.icon}\n                      label='loading'\n                      style={{ marginBottom: '6px' }}\n                    />\n                    )\n                  : (\n                    <Icon\n                      {...icons.value.plus}\n                      class={[nh.be('cloud'), props.disabled && nh.bem('cloud', 'disabled')]}\n                      scale={+(icons.value.plus.scale || 1) * 1.2}\n                      style={{ marginBottom: '6px' }}\n                    />\n                    )}\n                <span>{props.buttonLabel ?? locale.value.upload}</span>\n              </>\n              )}\n        </div>\n      )\n    }\n\n    function renderControl() {\n      const HtmlTag = props.image ? 'li' : 'div'\n\n      return (\n        <HtmlTag\n          class={controlClass.value}\n          tabindex={-1}\n          onClick={handleClick}\n          onDrop={handleDrop}\n          onDragover={handleDragEnter}\n          onDragleave={handleDragLeave}\n          onKeydown={handleKeyDown}\n        >\n          {!props.disabledClick && (\n            <input\n              ref={input}\n              type='file'\n              class={nh.be('input')}\n              disabled={props.disabled}\n              multiple={props.multiple}\n              name={props.name}\n              accept={acceptString.value}\n              webkitdirectory={props.directory}\n              onChange={handleInputChange}\n              onSubmit={preventDefault}\n            />\n          )}\n          {props.image\n            ? renderImageAction()\n            : slots.default\n              ? renderSlot(slots, 'default', {\n                isDragOver: (props.allowDrag || props.disabledClick) && isDragOver.value\n              })\n              : renderNormalAction()}\n        </HtmlTag>\n      )\n    }\n\n    function renderFileList() {\n      return (\n        <UploadList\n          inherit\n          files={renderFiles.value}\n          select-to-add={props.selectToAdd}\n          type={props.image ? 'thumbnail' : props.listType}\n          icon-renderer={props.iconRenderer}\n          loading-text={props.loadingText}\n          can-preview={props.canPreview}\n          style={props.listStyle}\n          onDelete={handleDelete}\n          onPreview={handlePreview}\n        >\n          {{\n            item: (params: any) => renderSlot(slots, 'item', params),\n            icon: (params: any) => renderSlot(slots, 'icon', params),\n            suffix: () =>\n              props.image && (!props.countLimit || renderFiles.value.length < props.countLimit) ? renderControl() : null\n          }}\n        </UploadList>\n      )\n    }\n\n    return () => (\n      <div id={idFor.value} class={className.value}>\n        {!props.image && renderControl()}\n        {!props.hiddenFiles && renderFileList()}\n      </div>\n    )\n  },\n  methods: {\n    execute: noop as () => Promise<false | any[]>,\n    handleDelete: noop as (file: UploadFileState) => void,\n    focus: noop as (options?: FocusOptions) => void,\n    blur: noop as () => void\n  }\n})\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": [
    "upload.scss",
    "icon",
    "collapse-transition",
    "progress",
    "renderer",
    "upload-file",
    "button",
    "form",
    "upload-list"
  ],
  "categories": ["form"],
  "meta": { "isReferenceOnly": false }
}
