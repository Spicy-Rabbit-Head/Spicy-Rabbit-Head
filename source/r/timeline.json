{
  "name": "timeline",
  "type": "registry:components",
  "description": "常用于循序渐进的展示一些内容。",
  "files": [
    {
      "target": "components/timeline/index.ts",
      "content": "import Timeline from './timeline.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Timeline }\nexport { timelineProps } from './props'\n\nexport type TimelineExposed = ComponentPublicInstance & InstanceType<typeof Timeline>\n\nexport type { TimelineProps, TimelineCProps } from './props'\nexport type { TimelineItemType } from './symbol'\n"
    },
    {
      "target": "components/timeline/props.ts",
      "content": "import { booleanProp, buildProps, eventProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { TimelineItemType } from './symbol'\n\nexport const timelineProps = buildProps({\n  pending: booleanProp,\n  dashed: booleanProp,\n  lineColor: String,\n  spacing: [Number, String],\n  flip: booleanProp,\n  horizontal: booleanProp,\n  alternate: booleanProp,\n  onSignalClick: eventProp<(label: string | number) => void>()\n})\n\nexport type TimelineProps = ExtractPropTypes<typeof timelineProps>\nexport type TimelineCProps = ConfigurableProps<TimelineProps>\n\nexport const timelineItemProps = buildProps({\n  type: String as PropType<TimelineItemType>,\n  color: String,\n  label: [Number, String],\n  dashed: booleanProp,\n  lineColor: String,\n  spacing: [Number, String],\n  onSignalClick: eventProp<(label: string | number) => void>()\n})\n\nexport type TimelineItemProps = ExtractPropTypes<typeof timelineItemProps>\nexport type TimelineItemCProps = ConfigurableProps<TimelineItemProps>\n"
    },
    {
      "target": "components/timeline/symbol.ts",
      "content": "import type { InjectionKey } from 'vue'\n\nexport type TimelineItemType = 'primary' | 'info' | 'success' | 'error' | 'warning' | 'disabled'\n\nexport interface ItemState {\n  label: string | number,\n  index: number,\n  total: number,\n  height: number\n}\n\nexport interface TimelineState {\n  dashed: boolean,\n  lineColor: string,\n  spacing: number | string,\n  alternate: boolean,\n  horizontal: boolean,\n  increaseItem: (item: ItemState) => void,\n  decreaseItem: (item: ItemState) => void,\n  handleSignalClick: (label: string | number) => void\n}\n\nexport const TIMELINE_STATE: InjectionKey<TimelineState> = Symbol('TIMELINE_STATE')\n\nexport const timelineItemTypes = Object.freeze<TimelineItemType[]>([\n  'primary',\n  'info',\n  'success',\n  'error',\n  'warning',\n  'disabled'\n])\n"
    },
    {
      "target": "components/timeline/timeline-item.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, inject, onBeforeUnmount, onMounted, onUpdated, reactive, ref, watch } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { timelineItemProps } from './props'\n\nimport { TIMELINE_STATE, timelineItemTypes } from './symbol'\n\nimport type { ItemState } from './symbol'\n\ndefineOptions({ name: 'TimelineItem',\n  description:'时间轴项组件，作为时间轴的单个时间节点项。',\n  categories: ['display'] })\n\nconst _props = defineProps(timelineItemProps)\nconst props = useProps('timelineItem', _props, {\n  type: {\n    default: 'primary',\n    validator: value => timelineItemTypes.includes(value)\n  },\n  color: '',\n  label: {\n    default: null,\n    static: true\n  },\n  dashed: null,\n  lineColor: null,\n  spacing: null\n})\n\ndefineSlots<{\n  default(): any,\n  signal(): any,\n  line(): any\n}>()\n\nconst timelineState = inject(TIMELINE_STATE, null)\n\nconst nh = useNameHelper('timeline')\nconst currentLabel = ref(props.label)\nconst content = ref<HTMLElement>()\n\nconst className = computed(() => {\n  return {\n    [nh.be('item')]: true,\n    [nh.bem('item', props.type)]: timelineItemTypes.includes(props.type)\n  }\n})\nconst itemStyle = computed(() => {\n  const spacing = props.spacing || props.spacing === 0 ? props.spacing : timelineState?.spacing\n  const style: Record<string, any> = {\n    [nh.cv('item-span')]: typeof spacing === 'number' ? `${spacing}px` : spacing\n  }\n\n  if (props.color) {\n    style[nh.cv('pointer-color')] = props.color\n    style[nh.cv('pointer-b-color')] = props.color\n  }\n\n  return style\n})\nconst lineStyle = computed(() => {\n  const isDashed = props.dashed ?? timelineState?.dashed ?? false\n  const color = props.lineColor ?? timelineState?.lineColor\n\n  return {\n    borderInlineStartStyle: isDashed ? ('dashed' as const) : undefined,\n    borderInlineStartColor: color\n  }\n})\n\ndefineExpose({\n  currentLabel,\n  content\n})\n\nif (timelineState) {\n  const state: ItemState = reactive({\n    label: currentLabel,\n    index: 0,\n    total: 0,\n    height: 0\n  })\n\n  timelineState.increaseItem(state)\n\n  watch(() => timelineState.alternate, updateHeight)\n  watch(() => timelineState.horizontal, updateHeight)\n\n  onMounted(updateHeight)\n  onUpdated(updateHeight)\n\n  onBeforeUnmount(() => {\n    timelineState.decreaseItem(state)\n  })\n\n  function updateHeight() {\n    requestAnimationFrame(() => {\n      if (timelineState?.horizontal && content.value) {\n        state.height = content.value.scrollHeight\n      }\n    })\n  }\n}\n\nfunction handleSignalClick() {\n  emitEvent(props.onSignalClick, currentLabel.value)\n  timelineState?.handleSignalClick(currentLabel.value)\n}\n</script>\n\n<template>\n  <div :class=\"className\" :style=\"itemStyle\">\n    <div :class=\"nh.be('signal')\" @click=\"handleSignalClick\">\n      <slot name=\"signal\">\n        <div :class=\"nh.be('pointer')\"></div>\n      </slot>\n    </div>\n    <div :class=\"nh.be('line')\" :style=\"lineStyle\">\n      <slot name=\"line\"></slot>\n    </div>\n    <div ref=\"content\" :class=\"nh.be('content')\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n"
    },
    {
      "target": "components/timeline/timeline.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, provide, reactive, toRef } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps } from '@pocui/config'\nimport { debounceMinor, isNullish } from '@pocui/utils'\nimport { timelineProps } from './props'\n\nimport { TIMELINE_STATE } from './symbol'\n\nimport type { ItemState, TimelineState } from './symbol'\n\ndefineOptions({ name: 'Timeline',\n  description:'常用于循序渐进的展示一些内容。',\n  categories: ['display'] })\n\nconst _props = defineProps(timelineProps)\nconst props = useProps('timeline', _props, {\n  pending: false,\n  dashed: false,\n  lineColor: null,\n  spacing: null,\n  flip: false,\n  horizontal: false,\n  alternate: false\n})\n\nconst nh = useNameHelper('timeline')\nconst itemStates = reactive(new Set<ItemState>())\n\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.bs('vars')]: true,\n    [nh.in()]: props.inherit,\n    [nh.bm('pending')]: props.pending,\n    [nh.bm('alternate')]: props.alternate,\n    [nh.bm('flip')]: props.flip,\n    [nh.bm('horizontal')]: props.horizontal\n  }\n})\nconst height = computed(() => {\n  return Math.max(...Array.from(itemStates).map(state => state.height)) * 2\n})\n\ndefineExpose({ itemStates })\n\nconst refreshLabels = debounceMinor(() => {\n  const total = itemStates.size\n\n  Array.from(itemStates).forEach((item, index) => {\n    item.index = index + 1\n    item.total = total\n\n    if (isNullish(item.label)) {\n      item.label = index + 1\n    }\n  })\n})\n\nconst state: TimelineState = reactive({\n  dashed: toRef(props, 'dashed'),\n  lineColor: toRef(props, 'lineColor'),\n  spacing: toRef(props, 'spacing'),\n  alternate: toRef(props, 'alternate'),\n  horizontal: toRef(props, 'horizontal'),\n  increaseItem,\n  decreaseItem,\n  handleSignalClick\n})\n\nprovide(TIMELINE_STATE, state)\n\nfunction increaseItem(item: ItemState) {\n  itemStates.add(item)\n  refreshLabels()\n}\n\nfunction decreaseItem(item: ItemState) {\n  itemStates.delete(item)\n  refreshLabels()\n}\n\nfunction handleSignalClick(label: string | number) {\n  emitEvent(props.onSignalClick, label)\n}\n</script>\n\n<template>\n  <div :class=\"className\" :style=\"{ height: props.horizontal && props.alternate ? `${height}px` : undefined }\">\n    <slot></slot>\n  </div>\n</template>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["timeline.scss"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
