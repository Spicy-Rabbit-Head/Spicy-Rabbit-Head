{
  "name": "viewer",
  "type": "registry:components",
  "description": "可以用来便捷查看一些东西，比如图片等。",
  "files": [
    {
      "target": "components/viewer/index.ts",
      "content": "import Viewer from './viewer.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Viewer }\nexport { viewerProps } from './props'\nexport { viewerDefaultActionLayout } from './symbol'\n\nexport type ViewerExposed = ComponentPublicInstance & InstanceType<typeof Viewer>\n\nexport type { ViewerProps, ViewerCProps } from './props'\nexport type {\n  ViewerToolbarPlacement,\n  ViewerPresetAction,\n  ViewerActionName,\n  ViewerActionLayout,\n  ViewerState,\n  ViewerToolbarAction\n} from './symbol'\n"
    },
    {
      "target": "components/viewer/props.ts",
      "content": "import { booleanNumberProp, booleanProp, buildProps, eventProp, localeProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ViewerActionLayout, ViewerState, ViewerToolbarAction, ViewerToolbarPlacement } from './symbol'\n\nexport const viewerProps = buildProps({\n  locale: localeProp('viewer'),\n  width: [String, Number],\n  height: [String, Number],\n  moveDisabled: booleanProp,\n  zoomDisabled: booleanProp,\n  zoomDelta: Number,\n  zoomMin: Number,\n  zoomMax: Number,\n  flipDisabled: booleanProp,\n  rotateDisabled: booleanProp,\n  rotateDelta: Number,\n  fullDisabled: booleanProp,\n  toolbarPlacement: String as PropType<ViewerToolbarPlacement>,\n  actions: Array as PropType<ViewerToolbarAction[]>,\n  toolbarFade: booleanNumberProp,\n  noTransition: booleanProp,\n  centerScale: booleanProp,\n  actionLayout: Array as PropType<ViewerActionLayout>,\n  onMoveStart: eventProp<(state: ViewerState) => void>(),\n  onMove: eventProp<(state: ViewerState) => void>(),\n  onMoveEnd: eventProp<(state: ViewerState) => void>(),\n  onWheel: eventProp<(sign: 1 | -1, state: ViewerState) => void>(),\n  onRotate: eventProp<(deg: number, state: ViewerState) => void>(),\n  onFlipX: eventProp<(flip: boolean, state: ViewerState) => void>(),\n  onFlipY: eventProp<(flip: boolean, state: ViewerState) => void>(),\n  onZoom: eventProp<(zoom: number, state: ViewerState) => void>(),\n  onFull: eventProp<(full: boolean, state: ViewerState) => void>(),\n  onReset: eventProp<(state: ViewerState) => void>()\n})\n\nexport type ViewerProps = ExtractPropTypes<typeof viewerProps>\nexport type ViewerCProps = ConfigurableProps<ViewerProps>\n"
    },
    {
      "target": "components/viewer/symbol.ts",
      "content": "import type { ClassType, StyleType } from '@pocui/config'\n\nexport type ViewerToolbarPlacement =\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\nexport type ViewerPresetAction =\n  | 'rotate-right'\n  | 'rotate-left'\n  | 'flip-x'\n  | 'flip-y'\n  | 'zoom-in'\n  | 'zoom-out'\n  | 'full-screen'\n  | 'full-screen-exit'\n  | 'reset'\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type ViewerActionName = ViewerPresetAction | (string & {})\nexport type ViewerActionLayout = ViewerActionName[][]\n\nexport interface ViewerState {\n  x: number,\n\n  y: number,\n\n  zoom: number,\n\n  rotate: number,\n\n  flipX: boolean,\n\n  flipY: boolean,\n\n  full: boolean,\n\n  moving: boolean,\n\n  [custom: string]: unknown\n}\n\nexport interface ViewerToolbarAction {\n  name: string,\n\n  process: (state: ViewerState) => void,\n\n  icon?: Record<string, any> | (() => any),\n\n  iconRenderer?: (data: { state: ViewerState }) => any,\n\n  class?: ClassType | ((state: ViewerState) => string),\n\n  title?: string | ((state: ViewerState) => string),\n\n  iconScale?: number | ((state: ViewerState) => number),\n\n  iconStyle?: StyleType | ((state: ViewerState) => StyleType),\n\n  /** @deprecated */\n  divided?: boolean | ((state: ViewerState) => boolean),\n\n  hidden?: boolean | ((state: ViewerState) => boolean),\n\n  disabled?: boolean | ((state: ViewerState) => boolean)\n}\n\nexport const enum InternalActionName {\n  RotateRight = 'rotate-right',\n  RotateLeft = 'rotate-left',\n  FlipX = 'flip-x',\n  FlipY = 'flip-y',\n  ZoomIn = 'zoom-in',\n  ZoomOut = 'zoom-out',\n  FullScreen = 'full-screen',\n  Reset = 'reset'\n}\n\nconst defaultActionLayout: ViewerActionLayout = [\n  ['rotate-right', 'rotate-left'],\n  ['flip-x', 'flip-y'],\n  ['zoom-in', 'zoom-out'],\n  ['full-screen'],\n  ['reset']\n]\n\nfor (let i = 0, len = defaultActionLayout.length; i < len; ++i) {\n  defaultActionLayout[i] = Object.freeze(defaultActionLayout[i]) as any\n}\n\nexport const viewerDefaultActionLayout = Object.freeze(defaultActionLayout) as ViewerActionLayout\n"
    },
    {
      "target": "components/viewer/viewer.vue",
      "content": "<script setup lang=\"ts\">\nimport { Divider } from '@/components/divider'\nimport { Icon } from '@/components/icon'\nimport { Renderer } from '@/components/renderer'\n\nimport { computed, h, nextTick, onMounted, reactive, ref, toRef } from 'vue'\n\nimport { emitEvent, useIcons, useLocale, useNameHelper, useProps } from '@pocui/config'\nimport { useFullScreen, useModifier, useMoving, useSetTimeout } from '@pocui/hooks'\nimport { boundRange, callIfFunc, toCssSize, toFixed } from '@pocui/utils'\n\nimport { viewerProps } from './props'\n\nimport { InternalActionName, viewerDefaultActionLayout } from './symbol'\n\nimport type { ViewerActionLayout, ViewerState, ViewerToolbarAction } from './symbol'\n\ndefineOptions({ name: 'Viewer',description:'可以用来便捷查看一些东西，比如图片等。', categories: ['display'] })\n\nconst _props = defineProps(viewerProps)\nconst props = useProps('viewer', _props, {\n  locale: null,\n  width: '100%',\n  height: '100%',\n  moveDisabled: false,\n  zoomDisabled: false,\n  zoomDelta: 0.15,\n  zoomMin: 0.1,\n  zoomMax: Infinity,\n  rotateDisabled: false,\n  rotateDelta: 90,\n  flipDisabled: false,\n  fullDisabled: false,\n  toolbarPlacement: 'bottom',\n  actions: () => [],\n  toolbarFade: false,\n  noTransition: false,\n  centerScale: false,\n  actionLayout: () => []\n})\n\ndefineSlots<{\n  default(props: { state: ViewerState }): any,\n  [action: `action-${string}`]: (props: { state: ViewerState }) => any\n}>()\n\nconst nh = useNameHelper('viewer')\nconst locale = useLocale('viewer', toRef(props, 'locale'))\nconst icons = useIcons()\n\nconst { timer } = useSetTimeout()\nconst toolbarActive = ref(false)\n\nconst zoom = ref(1)\nconst rotate = ref(0)\nconst flipX = ref(false)\nconst flipY = ref(false)\n\nconst viewer = ref<HTMLElement>()\nconst transition = ref<HTMLElement>()\n\nconst { supported: fullSupported, full, enter: enterFull, exit: exitFull } = useFullScreen(viewer)\nconst {\n  target: container,\n  x: currentLeft,\n  y: currentTop,\n  moving\n} = useMoving({\n  onStart: (_, event) => {\n    if (props.moveDisabled || event.button > 0) {\n      return false\n    }\n\n    emitEvent(props.onMoveStart, getState())\n  },\n  onMove: () => {\n    emitEvent(props.onMoveStart, getState())\n  },\n  onEnd: () => {\n    emitEvent(props.onMoveStart, getState())\n  }\n})\n\nconst state = reactive({\n  zoom,\n  rotate,\n  flipX,\n  flipY,\n  full,\n  moving,\n  x: currentLeft,\n  y: currentTop\n}) as ViewerState\n\nconst zoomOrigin = {\n  x: 0,\n  y: 0\n}\n\nuseModifier({\n  target: viewer,\n  passive: false,\n  onKeyDown: (event, modifier) => {\n    if (modifier.up || modifier.down || modifier.left || modifier.right) {\n      event.preventDefault()\n\n      const current = modifier.up || modifier.down ? currentTop : currentLeft\n      const step = modifier.up || modifier.left ? -10 : 10\n\n      current.value += event.ctrlKey ? 5 * step : step\n\n      modifier.resetAll()\n    }\n  }\n})\n\nfunction getState() {\n  return state\n}\n\nfunction getActionProp<K extends Exclude<keyof ViewerToolbarAction, 'name' | 'icon' | 'iconRenderer' | 'process'>>(\n  action: ViewerToolbarAction,\n  prop: K\n) {\n  return callIfFunc(action[prop] as any, state) as Exclude<ViewerToolbarAction[K], (...args: any) => any>\n}\n\nfunction getActionClass(name: string) {\n  return nh.be(name)\n}\n\nconst internalActions: ViewerToolbarAction[] = [\n  {\n    name: InternalActionName.RotateRight,\n    process: () => handleRotate(props.rotateDelta),\n    iconRenderer: () => h(Icon, icons.value.rotateRight),\n    class: getActionClass(InternalActionName.RotateRight),\n    title: () => locale.value.rotateRight,\n    hidden: () => props.rotateDisabled\n  },\n  {\n    name: InternalActionName.RotateLeft,\n    process: () => handleRotate(-1 * props.rotateDelta),\n    iconRenderer: () => h(Icon, icons.value.rotateLeft),\n    class: getActionClass(InternalActionName.RotateLeft),\n    title: () => locale.value.rotateLeft,\n    hidden: () => props.rotateDisabled\n  },\n  {\n    name: InternalActionName.FlipX,\n    process: () => toggleFlipX(),\n    iconRenderer: () => h(Icon, icons.value.flipX),\n    class: getActionClass(InternalActionName.FlipX),\n    title: () => locale.value.flipHorizontal,\n    hidden: () => props.flipDisabled\n  },\n  {\n    name: InternalActionName.FlipY,\n    process: () => toggleFlipY(),\n    iconRenderer: () => h(Icon, icons.value.flipY),\n    class: getActionClass(InternalActionName.FlipY),\n    title: () => locale.value.flipVertical,\n    hidden: () => props.flipDisabled\n  },\n  {\n    name: InternalActionName.ZoomIn,\n    process: () => handleZoom(props.zoomDelta),\n    iconRenderer: () => h(Icon, icons.value.zoomIn),\n    class: getActionClass(InternalActionName.ZoomIn),\n    title: () => locale.value.zoomIn,\n    hidden: () => props.zoomDisabled\n  },\n  {\n    name: InternalActionName.ZoomOut,\n    process: () => handleZoom(-1 * props.zoomDelta),\n    iconRenderer: () => h(Icon, icons.value.zoomOut),\n    class: getActionClass(InternalActionName.ZoomOut),\n    title: () => locale.value.zoomOut,\n    hidden: () => props.zoomDisabled\n  },\n  {\n    name: InternalActionName.FullScreen,\n    process: () => toggleFull(!full.value),\n    iconRenderer: () => h(Icon, full.value ? icons.value.resetScreen : icons.value.fullScreen),\n    class: getActionClass(InternalActionName.FullScreen),\n    title: () => (full.value ? locale.value.fullScreenExit : locale.value.fullScreen),\n    hidden: () => props.fullDisabled\n  },\n  {\n    name: InternalActionName.Reset,\n    process: () => handleReset(),\n    iconRenderer: () => h(Icon, icons.value.refresh),\n    class: getActionClass(InternalActionName.Reset),\n    title: () => locale.value.reset\n  }\n]\n\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.bs('vars')]: true,\n    [nh.in()]: props.inherit,\n    [nh.bm('draggable')]: !props.moveDisabled,\n    [nh.bm('resizable')]: !props.zoomDisabled,\n    [nh.bm('full')]: full.value,\n    [nh.bm('moving')]: moving.value,\n    [nh.bm('static')]: props.noTransition\n  }\n})\nconst style = computed(() => {\n  return {\n    width: toCssSize(props.width),\n    height: toCssSize(props.height)\n  }\n})\nconst toolbarVertical = computed(() => {\n  const [layout] = props.toolbarPlacement.split('-')\n\n  return layout === 'left' || layout === 'right'\n})\nconst toolbarFade = computed(() => {\n  return typeof props.toolbarFade === 'number' ? props.toolbarFade : props.toolbarFade ? 1500 : 0\n})\nconst toolbarClass = computed(() => {\n  return {\n    [nh.be('toolbar')]: true,\n    [nh.bem('toolbar', 'active')]: toolbarFade.value < 300 || toolbarActive.value,\n    [nh.bem('toolbar', props.toolbarPlacement)]: true,\n    [nh.bem('toolbar', 'vertical')]: toolbarVertical.value\n  }\n})\nconst contentStyle = computed(() => {\n  return {\n    transform: `translate3d(${currentLeft.value}px, ${currentTop.value}px, 0) scale(${zoom.value})`\n  }\n})\nconst transitionStyle = computed(() => {\n  return {\n    transform: `scaleX(${flipX.value ? -1 : 1}) scaleY(${flipY.value ? -1 : 1}) rotate(${rotate.value}deg)`\n  }\n})\nconst allActions = computed(() => {\n  const map = new Map<string, ViewerToolbarAction>()\n  const actions: ViewerToolbarAction[][] = []\n\n  internalActions.concat(props.actions).forEach(action => {\n    if (action.name) {\n      map.set(action.name, action)\n    }\n  })\n\n  let layout: ViewerActionLayout\n\n  if (!props.actionLayout?.length) {\n    layout = [...viewerDefaultActionLayout]\n\n    if (props.actions.length) {\n      layout.push(props.actions.map(action => action.name))\n    }\n  } else {\n    layout = props.actionLayout\n  }\n\n  for (const names of layout) {\n    const group = names.map(name => map.get(name)!).filter(Boolean)\n\n    group.length && actions.push(group)\n  }\n\n  return actions\n})\n\ndefineExpose({\n  moving,\n  fullSupported,\n  state,\n  viewer,\n  container,\n  transition,\n  handleRotate,\n  toggleFlipHorizontal: toggleFlipX,\n  toggleFlipVertical: toggleFlipY,\n  handleZoom,\n  toggleFull,\n  handleReset\n})\n\nonMounted(() => {\n  if (container.value) {\n    const rect = container.value.getBoundingClientRect()\n\n    zoomOrigin.x = rect.left + rect.width * 0.5\n    zoomOrigin.y = rect.top + rect.height * 0.5\n  }\n})\n\nfunction handleWheel(event: WheelEvent) {\n  event.stopPropagation()\n  event.preventDefault()\n\n  const sign = event.deltaY > 0 ? -1 : 1\n\n  zoomOrigin.x = event.clientX\n  zoomOrigin.y = event.clientY\n\n  emitEvent(props.onWheel, sign, state)\n  handleZoom(sign * props.zoomDelta)\n}\n\nfunction handleRotate(deg: number, emit = true) {\n  if (props.rotateDisabled) return\n\n  rotate.value += deg\n\n  if (props.noTransition && rotate.value % 360 === 0) {\n    rotate.value = 0\n  }\n\n  emit && emitEvent(props.onRotate, deg, state)\n\n  if (props.noTransition) {\n    nextTick(normalizeProps)\n  }\n}\n\nfunction toggleFlipX(target = !flipX.value, emit = true) {\n  if (props.flipDisabled) return\n\n  flipX.value = target\n  emit && emitEvent(props.onFlipX, target, state)\n}\n\nfunction toggleFlipY(target = !flipY.value, emit = true) {\n  if (props.flipDisabled) return\n\n  flipY.value = target\n  emit && emitEvent(props.onFlipY, target, state)\n}\n\nfunction handleZoom(ratio: number, emit = true) {\n  if (props.zoomDisabled || !container.value) return\n\n  const containerRect = container.value.getBoundingClientRect()\n  const { x, y } = zoomOrigin\n  const { offsetWidth, offsetHeight } = container.value\n  const prevZoom = zoom.value\n\n  zoom.value = toFixed(boundRange(zoom.value + ratio, props.zoomMin, props.zoomMax), 5)\n\n  const delta = zoom.value / prevZoom - 1\n  const originX = delta * offsetWidth * 0.5\n  const originY = delta * offsetHeight * 0.5\n\n  if (!props.centerScale) {\n    currentLeft.value -= delta * (x - containerRect.left - currentLeft.value) - originX\n    currentTop.value -= delta * (y - containerRect.top - currentTop.value) - originY\n  }\n\n  emit && emitEvent(props.onZoom, zoom.value, state)\n}\n\nasync function toggleFull(isFull = !full.value, emit = true) {\n  isFull ? await enterFull() : await exitFull()\n\n  emit && emitEvent(props.onFull, isFull, state)\n}\n\nfunction handleReset(emit = true) {\n  currentTop.value = 0\n  currentLeft.value = 0\n  rotate.value = 0\n  flipX.value = false\n  flipY.value = false\n  zoom.value = 1\n\n  emit && emitEvent(props.onReset, state)\n}\n\nfunction normalizeProps() {\n  if (props.noTransition) {\n    if (rotate.value % 360 === 0) {\n      rotate.value = 0\n    }\n\n    return\n  }\n\n  const queue: Array<() => void> = []\n\n  if (rotate.value % 360 === 0) {\n    queue.push(\n      () => {\n        if (transition.value) {\n          transition.value.style.transitionDuration = '0ms'\n        }\n      },\n      () => {\n        rotate.value = 0\n      },\n      () => {\n        if (transition.value) {\n          transition.value.style.transitionDuration = ''\n        }\n      }\n    )\n  }\n\n  const run = () => {\n    queue.shift()?.()\n    queue.length && requestAnimationFrame(run)\n  }\n\n  run()\n}\n\nfunction handleEnterToolbar() {\n  clearTimeout(timer.toolbarFade)\n  toolbarActive.value = true\n}\n\nfunction handleLeaveToolbar() {\n  clearTimeout(timer.toolbarFade)\n\n  if (toolbarFade.value >= 300) {\n    timer.toolbarFade = setTimeout(() => {\n      toolbarActive.value = false\n    }, toolbarFade.value)\n  }\n}\n</script>\n\n<template>\n  <div\n    ref=\"viewer\"\n    :class=\"className\"\n    tabindex=\"0\"\n    :style=\"style\"\n  >\n    <div ref=\"container\" :class=\"nh.be('container')\" @wheel=\"handleWheel\">\n      <div :class=\"nh.be('content')\" :style=\"contentStyle\">\n        <div\n          ref=\"transition\"\n          :class=\"nh.be('transition')\"\n          :style=\"transitionStyle\"\n          @transitionend=\"normalizeProps\"\n        >\n          <slot :state=\"state\"></slot>\n        </div>\n      </div>\n    </div>\n    <div\n      :class=\"toolbarClass\"\n      role=\"toolbar\"\n      @mouseenter=\"handleEnterToolbar\"\n      @mouseleave=\"handleLeaveToolbar\"\n    >\n      <template v-for=\"(group, index) in allActions\" :key=\"index\">\n        <template v-for=\"action in group\" :key=\"action.name\">\n          <template v-if=\"!getActionProp(action, 'hidden')\">\n            <button\n              type=\"button\"\n              :class=\"[\n                {\n                  [nh.be('action')]: true,\n                  [nh.bem('action', 'disabled')]: getActionProp(action, 'disabled')\n                },\n                getActionProp(action, 'class')\n              ]\"\n              :title=\"getActionProp(action, 'title')\"\n              @click.stop=\"action.process(state)\"\n            >\n              <slot :name=\"`action-${action.name}`\" :state=\"state\">\n                <Renderer v-if=\"action.iconRenderer\" :renderer=\"action.iconRenderer\" :data=\"state\"></Renderer>\n                <Icon\n                  v-else-if=\"action.icon\"\n                  :icon=\"action.icon\"\n                  :style=\"getActionProp(action, 'iconStyle')\"\n                  :scale=\"getActionProp(action, 'iconScale') || 1\"\n                ></Icon>\n                <template v-else>\n                  {{ action.name }}\n                </template>\n              </slot>\n            </button>\n          </template>\n        </template>\n        <Divider v-if=\"index !== allActions.length - 1\" inherit :vertical=\"!toolbarVertical\"></Divider>\n      </template>\n    </div>\n  </div>\n</template>\n"
    }
  ],
  "dependencies": ["@pocui/config", "vue", "@pocui/hooks", "@pocui/utils"],
  "registryDependencies": ["viewer.scss", "divider", "icon", "renderer"],
  "categories": ["display"],
  "meta": { "isReferenceOnly": false }
}
