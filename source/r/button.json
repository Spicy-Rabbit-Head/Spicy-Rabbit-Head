{
  "name": "button",
  "type": "registry:components",
  "description": "基础通用组件，用于标记一组操作命令，由用户点击触发，响应用户并完成相应的业务逻辑。",
  "files": [
    {
      "target": "components/button/button-group.vue",
      "content": "<script setup lang=\"ts\">\nimport { computed, provide, reactive, toRef } from 'vue'\n\nimport { useNameHelper, useProps } from '@pocui/config'\nimport { debounceMinor } from '@pocui/utils'\nimport { buttonGroupProps } from './props'\n\nimport { GROUP_STATE, buttonTypes } from './symbol'\n\nimport type { ButtonState, ButtonType } from './symbol'\n\ndefineOptions({\n  name: 'ButtonGroup',\n  description: '按钮组，用于将多个按钮组合在一起。',\n  categories: ['basic']\n})\n\nconst _props = defineProps(buttonGroupProps)\nconst props = useProps('buttonGroup', _props, {\n  size: null,\n  type: {\n    default: 'default' as ButtonType,\n    validator: (value: ButtonType) => buttonTypes.includes(value)\n  },\n  circle: false\n})\n\nconst nh = useNameHelper('button-group')\n\nconst itemStates = reactive(new Set<ButtonState>())\nconst size = toRef(props, 'size')\nconst type = toRef(props, 'type')\n\nconst className = computed(() => {\n  return {\n    [nh.b()]: true,\n    [nh.in()]: props.inherit,\n    [nh.bm('circle')]: props.circle\n  }\n})\nconst itemList = computed(() => Array.from(itemStates))\n\nconst refreshIndexes = debounceMinor(() => {\n  for (let i = 0, len = itemList.value.length; i < len; ++i) {\n    const item = itemList.value[i]\n\n    item.index = i + 1\n    item.isLast = i === len - 1\n  }\n})\n\nprovide(\n  GROUP_STATE,\n  reactive({\n    size,\n    type,\n    circle: toRef(props, 'circle'),\n    increaseItem,\n    decreaseItem,\n    refreshIndexes\n  })\n)\n\nfunction increaseItem(item: ButtonState) {\n  itemStates.add(item)\n  refreshIndexes()\n}\n\nfunction decreaseItem(item: ButtonState) {\n  itemStates.delete(item)\n  refreshIndexes()\n}\n</script>\n\n<template>\n  <div :class=\"className\" role=\"group\">\n    <slot></slot>\n  </div>\n</template>\n"
    },
    {
      "target": "components/button/button.tsx",
      "content": "import { Badge } from \"@/components/badge\";\nimport { CollapseTransition } from \"@/components/collapse-transition\";\nimport { FIELD_OPTIONS } from \"@/components/form/symbol\";\nimport { Icon } from \"@/components/icon\";\n\nimport {\n  SlotsType,\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  reactive,\n  ref,\n} from \"vue\";\n\nimport {\n  createIconProp,\n  createSizeProp,\n  emitEvent,\n  useIcons,\n  useNameHelper,\n  useProps,\n} from \"@pocui/config\";\nimport {\n  adjustAlpha,\n  isClient,\n  mixColor,\n  parseColorToRgba,\n} from \"@pocui/utils\";\n\nimport { buttonProps } from \"./props\";\nimport { GROUP_STATE, buttonTypes } from \"./symbol\";\n\nexport default defineComponent({\n  name: \"Button\",\n  description:\n    \"基础通用组件，用于标记一组操作命令，由用户点击触发，响应用户并完成相应的业务逻辑。\",\n  categories: [\"basic\"],\n  props: buttonProps,\n  slots: Object as SlotsType<{\n    default(): any;\n    icon(): any;\n    loading(): any;\n  }>,\n  setup(_props, { slots }) {\n    const fieldActions = inject(FIELD_OPTIONS, null);\n\n    const props = useProps(\"button\", _props, {\n      size: createSizeProp(fieldActions ? fieldActions.size : undefined),\n      type: {\n        default: null,\n        validator: (value) => buttonTypes.includes(value),\n      },\n      dashed: false,\n      text: false,\n      simple: false,\n      disabled: () => (fieldActions ? fieldActions.disabled.value : false),\n      loading: () => (fieldActions ? fieldActions.loading.value : false),\n      circle: false,\n      loadingIcon: createIconProp(),\n      loadingEffect: null,\n      icon: createIconProp(),\n      color: null,\n      buttonType: {\n        default: \"button\",\n        validator: (value) => [\"button\", \"submit\", \"reset\"].includes(value),\n      },\n      block: false,\n      tag: \"button\",\n      noPulse: false,\n      badge: null,\n    });\n\n    const groupState = inject(GROUP_STATE, null);\n\n    const nh = useNameHelper(\"button\");\n    const icons = useIcons();\n    const pulsing = ref(false);\n    const index = ref(0);\n    const isLast = ref(false);\n\n    const isIconOnly = computed(() => {\n      return !slots.default;\n    });\n    const type = computed(() => {\n      return props.type ?? groupState?.type ?? \"default\";\n    });\n    const size = computed(() => {\n      return groupState?.size ?? props.size;\n    });\n    const className = computed(() => {\n      return {\n        [nh.b()]: true,\n        [nh.bs(\"vars\")]: true,\n        [nh.in()]: props.inherit,\n        [nh.bm(type.value)]: type.value !== \"default\",\n        [nh.bm(\"simple\")]: props.simple,\n        [nh.bm(\"text\")]: props.text,\n        [nh.bm(\"dashed\")]: props.dashed,\n        [nh.bm(\"disabled\")]: props.disabled,\n        [nh.bm(\"loading\")]: props.loading,\n        [nh.bm(\"circle\")]: props.circle,\n        [nh.bm(\"icon-only\")]: isIconOnly.value,\n        [nh.bm(size.value)]: size.value !== \"default\",\n        [nh.bm(\"pulsing\")]: pulsing.value,\n        [nh.bm(\"first\")]: index.value === 1,\n        [nh.bm(\"last\")]: isLast.value,\n        [nh.bm(\"block\")]: props.block,\n      };\n    });\n    const colorMap = computed(() => {\n      if (!props.color) return null;\n\n      const rootStyle = isClient\n        ? getComputedStyle(document.documentElement)\n        : null;\n      const black = parseColorToRgba(\n        rootStyle?.getPropertyValue(nh.nv(\"color-black\")) || \"#000\",\n      );\n      const white = parseColorToRgba(\n        rootStyle?.getPropertyValue(nh.nv(\"color-white\")) || \"#fff\",\n      );\n      const baseColor = parseColorToRgba(props.color);\n\n      return {\n        base: baseColor.toString(),\n        light2: mixColor(white, baseColor, 0.2).toString(),\n        dark1: mixColor(black, baseColor, 0.1).toString(),\n        opacity1: adjustAlpha(baseColor, 0.9).toString(),\n        opacity3: adjustAlpha(baseColor, 0.7).toString(),\n        opacity4: adjustAlpha(baseColor, 0.6).toString(),\n        opacity7: adjustAlpha(baseColor, 0.3).toString(),\n        opacity8: adjustAlpha(baseColor, 0.2).toString(),\n        white8: adjustAlpha(white, 0.2).toString(),\n        white9: adjustAlpha(white, 0.1).toString(),\n      };\n    });\n    const style = computed<Record<string, string>>(() => {\n      if (!colorMap.value) return {};\n\n      const {\n        base,\n        light2,\n        dark1,\n        opacity1,\n        opacity3,\n        opacity4,\n        opacity7,\n        opacity8,\n      } = colorMap.value;\n      const { cvm, gnv } = nh;\n\n      if (props.simple) {\n        return cvm({\n          color: base,\n          \"color-hover\": base,\n          \"color-focus\": gnv(\"color-white\"),\n          \"color-active\": gnv(\"color-white\"),\n          \"color-disabled\": gnv(\"content-color-disabled\"),\n          \"bg-color\": opacity8,\n          \"bg-color-hover\": opacity7,\n          \"bg-color-focus\": opacity1,\n          \"bg-color-active\": opacity1,\n          \"bg-color-disabled\": gnv(\"fill-color-background\"),\n          \"b-color\": opacity4,\n          \"b-color-hover\": opacity4,\n          \"b-color-focus\": opacity3,\n          \"b-color-active\": opacity3,\n          \"b-color-disabled\": gnv(\"border-color-light-1\"),\n          \"pulse-s-color\": dark1,\n        });\n      }\n\n      if (props.text || props.dashed) {\n        return cvm({\n          ...(props.dashed\n            ? {\n                \"b-color\": base,\n                \"b-color-hover\": light2,\n                \"b-color-focus\": light2,\n                \"b-color-active\": dark1,\n                \"pulse-s-color\": dark1,\n              }\n            : {}),\n          color: base,\n          \"color-hover\": light2,\n          \"color-focus\": light2,\n          \"color-active\": dark1,\n          \"color-disabled\": opacity4,\n        });\n      }\n\n      return cvm({\n        color: gnv(\"color-white\"),\n        \"color-hover\": gnv(\"color-white\"),\n        \"color-focus\": gnv(\"color-white\"),\n        \"color-active\": gnv(\"color-white\"),\n        \"color-disabled\": gnv(\"content-color-disabled\"),\n        \"bg-color\": base,\n        \"bg-color-hover\": light2,\n        \"bg-color-focus\": light2,\n        \"bg-color-active\": dark1,\n        \"bg-color-disabled\": gnv(\"fill-color-background\"),\n        \"b-color\": base,\n        \"b-color-hover\": light2,\n        \"b-color-focus\": light2,\n        \"b-color-active\": dark1,\n        \"b-color-disabled\": gnv(\"border-color-light-1\"),\n        \"pulse-s-color\": dark1,\n      });\n    });\n\n    if (groupState) {\n      const state = reactive({\n        index,\n        isLast,\n      });\n\n      groupState.increaseItem(state);\n\n      onBeforeUnmount(() => {\n        groupState.decreaseItem(state);\n      });\n    }\n\n    function handleClick(event: MouseEvent) {\n      if (props.disabled || props.loading || event.button) return;\n\n      if (!props.noPulse) {\n        pulsing.value = false;\n        requestAnimationFrame(() => {\n          pulsing.value = true;\n        });\n      }\n\n      emitEvent(props.onClick, event);\n    }\n\n    function handleAnimationEnd() {\n      pulsing.value = false;\n    }\n\n    function renderLoadingIcon() {\n      return (\n        <div class={[nh.be(\"icon\"), nh.bem(\"icon\", \"loading\")]}>\n          {slots.loading ? (\n            slots.loading()\n          ) : (\n            <Icon\n              {...icons.value.loading}\n              effect={props.loadingEffect || icons.value.loading.effect}\n              icon={props.loadingIcon || icons.value.loading.icon}\n              label=\"loading\"\n            ></Icon>\n          )}\n        </div>\n      );\n    }\n\n    function renderSingleIcon() {\n      return props.loading ? (\n        renderLoadingIcon()\n      ) : (\n        <div class={nh.be(\"icon\")}>\n          {slots.icon ? (\n            slots.icon()\n          ) : props.icon ? (\n            <Icon icon={props.icon}></Icon>\n          ) : null}\n        </div>\n      );\n    }\n\n    function renderCollapseIcon() {\n      if (props.icon || slots.icon) {\n        return props.loading ? (\n          renderLoadingIcon()\n        ) : (\n          <div class={nh.be(\"icon\")}>\n            {slots.icon ? slots.icon() : <Icon icon={props.icon}></Icon>}\n          </div>\n        );\n      }\n\n      return (\n        <CollapseTransition appear horizontal fade-effect>\n          {props.loading && renderLoadingIcon()}\n        </CollapseTransition>\n      );\n    }\n\n    function renderBadge() {\n      const badgeType = props.disabled\n        ? \"disabled\"\n        : props.type === \"default\"\n          ? \"error\"\n          : props.type;\n\n      return (\n        <Badge\n          inherit\n          class={[nh.be(\"badge\"), nh.bem(\"badge\", badgeType)]}\n          content={props.badge}\n          type={badgeType}\n        ></Badge>\n      );\n    }\n\n    return () => {\n      const Button = (props.tag || \"button\") as any;\n\n      return (\n        <Button\n          type={props.buttonType}\n          class={className.value}\n          role=\"button\"\n          style={style.value}\n          disabled={props.disabled}\n          onClick={handleClick}\n          onAnimationend={handleAnimationEnd}\n        >\n          {isIconOnly.value ? renderSingleIcon() : renderCollapseIcon()}\n          {!isIconOnly.value && slots.default ? slots.default() : null}\n          {!isIconOnly.value && (props.badge || props.badge === 0)\n            ? renderBadge()\n            : null}\n        </Button>\n      );\n    };\n  },\n});\n"
    },
    {
      "target": "components/button/index.ts",
      "content": "import Button from './button'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Button }\nexport { buttonProps } from './props'\n\nexport type ButtonExposed = ComponentPublicInstance & InstanceType<typeof Button>\n\nexport type { ButtonProps, ButtonCProps } from './props'\nexport type { ButtonType, ButtonAttrType } from './symbol'\n"
    },
    {
      "target": "components/button/props.ts",
      "content": "import { booleanProp, buildProps, eventProp, iconProp, sizeProp } from '@pocui/config'\n\nimport type { IconEffect } from '@/components/icon'\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\nimport type { ButtonAttrType, ButtonType } from './symbol'\n\nexport const buttonProps = buildProps({\n  size: sizeProp,\n  type: String as PropType<ButtonType>,\n  dashed: booleanProp,\n  text: booleanProp,\n  simple: booleanProp,\n  disabled: booleanProp,\n  loading: booleanProp,\n  circle: booleanProp,\n  loadingIcon: iconProp,\n  loadingEffect: String as PropType<IconEffect>,\n  icon: iconProp,\n  color: String,\n  buttonType: String as PropType<ButtonAttrType>,\n  block: booleanProp,\n  tag: String,\n  noPulse: booleanProp,\n  badge: [String, Number],\n  onClick: eventProp<(event: MouseEvent) => void>()\n})\n\nexport type ButtonProps = ExtractPropTypes<typeof buttonProps>\nexport type ButtonCProps = ConfigurableProps<ButtonProps>\n\nexport const buttonGroupProps = buildProps({\n  size: sizeProp,\n  type: String as PropType<ButtonType>,\n  circle: booleanProp\n})\n\nexport type ButtonGroupProps = ExtractPropTypes<typeof buttonGroupProps>\nexport type ButtonGroupCProps = ConfigurableProps<ButtonGroupProps>\n"
    },
    {
      "target": "components/button/symbol.ts",
      "content": "import type { ComponentSize } from '@pocui/config'\nimport type { InjectionKey } from 'vue'\n\nexport type ButtonType = 'default' | 'primary' | 'info' | 'success' | 'warning' | 'error'\nexport type ButtonAttrType = 'button' | 'submit' | 'reset'\n\nexport interface ButtonState {\n  index: number,\n\n  isLast: boolean\n}\n\nexport interface ButtonGroupState {\n  type: ButtonType,\n\n  size: ComponentSize,\n\n  circle: boolean,\n\n  increaseItem: (item: ButtonState) => void,\n\n  decreaseItem: (item: ButtonState) => void,\n\n  refreshIndexes: () => void\n}\n\nexport const GROUP_STATE: InjectionKey<ButtonGroupState> = Symbol('GROUP_STATE')\n\nexport const buttonTypes = Object.freeze<ButtonType[]>(['default', 'primary', 'info', 'success', 'warning', 'error'])\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["badge", "collapse-transition", "form", "icon", "button.scss"],
  "categories": ["basic"],
  "meta": { "isReferenceOnly": false }
}
