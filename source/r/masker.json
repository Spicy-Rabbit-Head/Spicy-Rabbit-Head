{
  "name": "masker",
  "type": "registry:component",
  "description": "用于在整个或局部页面之上创建可自定义透明度、颜色、动画与点击穿透的遮罩层。",
  "files": [
    {
      "target": "components/masker/index.ts",
      "content": "import Masker from './masker.vue'\n\nimport type { ComponentPublicInstance } from 'vue'\n\nexport { Masker }\nexport { maskerProps } from './props'\n\nexport type MaskerExposed = ComponentPublicInstance & InstanceType<typeof Masker>\n\nexport type { MaskerProps, MaskerCProps } from './props'\n"
    },
    {
      "target": "components/masker/masker.vue",
      "content": "<script setup lang=\"ts\">\nimport { Portal } from '@/components/portal'\nimport { ResizeObserver } from '@/components/resize-observer'\n\nimport { computed, nextTick, ref, watch } from 'vue'\n\nimport { emitEvent, useNameHelper, useProps, useZIndex } from '@pocui/config'\nimport { getLast, isBoolean, isPromise, queryTabables } from '@pocui/utils'\n\nimport { maskerProps } from './props'\n\ndefineOptions({ name: 'Masker',\n  description:'用于在整个或局部页面之上创建可自定义透明度、颜色、动画与点击穿透的遮罩层。',\n  categories: ['other'] })\n\nconst nh = useNameHelper('masker')\nconst _props = defineProps(maskerProps)\nconst props = useProps('masker', _props, {\n  active: {\n    default: false,\n    static: true\n  },\n  closable: false,\n  inner: false,\n  maskTransition: () => nh.ns('fade'),\n  transitionName: () => nh.ns('fade'),\n  disabled: false,\n  onBeforeClose: {\n    default: null,\n    isFunc: true\n  },\n  transfer: false,\n  autoRemove: false,\n  permeable: false,\n  disableEsc: false\n})\n\nconst emit = defineEmits(['update:active'])\nconst slots = defineSlots<{\n  mask(): any,\n  default(props: { show: boolean }): any\n}>()\nconst getIndex = useZIndex()\n\nconst currentActive = ref(props.active)\n// 如果初始处于活动状态,应该设置一个有效的索引作为初始值\nconst zIndex = ref(props.active ? getIndex() : 0)\nconst wrapShow = ref(props.active)\n\nconst wrapper = ref<HTMLElement>()\nconst topTrap = ref<HTMLElement>()\nconst bottomTrap = ref<HTMLElement>()\n\nlet maskShow = false\nlet contentShow = false\nlet stable = false\nlet prevFocusedEl: HTMLElement | null = null\n\nconst transferTo = computed(() => {\n  return props.inner ? '' : isBoolean(props.transfer) ? (props.transfer ? 'body' : '') : props.transfer\n})\nconst className = computed(() => {\n  return [\n    nh.b(),\n    nh.bs('vars'),\n    {\n      [nh.inc()]: transferTo.value !== 'body' && props.inherit,\n      [nh.bm('inner')]: props.inner,\n      [nh.bm('disabled')]: props.disabled\n    }\n  ]\n})\n\nconst style = computed(() => {\n  return {\n    zIndex: zIndex.value,\n    pointerEvents: wrapShow.value ? undefined : 'none',\n    visibility: wrapShow.value ? undefined : 'hidden'\n  }\n})\n\nwatch(\n  () => props.active,\n  value => {\n    currentActive.value = value\n\n    if (value) {\n      wrapShow.value = value\n    }\n  }\n)\nwatch(currentActive, value => {\n  if (!value) {\n    stable = false\n\n    if (prevFocusedEl) {\n      prevFocusedEl.focus()\n      prevFocusedEl = null\n    }\n  } else {\n    prevFocusedEl = document.activeElement as HTMLElement\n    zIndex.value = getIndex()\n  }\n\n  if ((!props.maskTransition || props.disabled) && !props.transitionName) {\n    value ? afterOpen() : afterClose()\n  }\n})\nwatch(\n  [() => props.permeable, wrapper],\n  () => {\n    if (wrapper.value) {\n      wrapper.value.removeEventListener('wheel', disableWheel)\n\n      if (!props.permeable) {\n        wrapper.value.addEventListener('wheel', disableWheel)\n      }\n    }\n  },\n  {\n    immediate: true,\n    flush: 'post'\n  }\n)\n\ndefineExpose({\n  currentActive,\n  zIndex,\n  wrapShow,\n  wrapper,\n  topTrap,\n  bottomTrap\n})\n\nfunction disableWheel(event: WheelEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nfunction toggleActive(active: boolean) {\n  if (currentActive.value === active) return\n\n  currentActive.value = active\n\n  emit('update:active', active)\n  emitEvent(props.onToggle, active)\n}\n\nasync function handleClose() {\n  if (!props.closable) return\n\n  let result: unknown = true\n\n  if (typeof props.onBeforeClose === 'function') {\n    result = props.onBeforeClose()\n\n    if (isPromise(result)) {\n      result = await result\n    }\n  }\n\n  if (result !== false) {\n    nextTick(() => {\n      toggleActive(false)\n      emitEvent(props.onClose)\n    })\n  }\n}\n\nfunction afterClose() {\n  if (currentActive.value) return\n\n  nextTick(() => {\n    wrapShow.value = false\n    emitEvent(props.onHide)\n  })\n}\n\nfunction afterOpen() {\n  if (!currentActive.value) return\n\n  const activeEl = document && document.activeElement\n\n  if (!activeEl || !wrapper.value || !wrapper.value.contains(activeEl)) {\n    topTrap.value?.focus()\n  }\n\n  nextTick(() => {\n    stable = true\n    emitEvent(props.onShow)\n  })\n}\n\nfunction afterMaskOpen() {\n  if (!currentActive.value) return\n\n  maskShow = true\n  ;(!props.transitionName || !slots.default || contentShow) && afterOpen()\n}\n\nfunction afterMaskClose() {\n  if (currentActive.value) return\n\n  maskShow = false\n  ;(!props.transitionName || !slots.default || !contentShow) && afterClose()\n}\n\nfunction afterContentOpen() {\n  if (!currentActive.value) return\n\n  contentShow = true\n  ;(!props.maskTransition || props.disabled || maskShow) && afterOpen()\n}\n\nfunction afterContentClose() {\n  if (currentActive.value) return\n\n  contentShow = false\n  ;(!props.maskTransition || props.disabled || !maskShow) && afterClose()\n}\n\nfunction handleMaskClick(event: MouseEvent) {\n  console.log('mask click')\n  emitEvent(props.onMaskClick, event)\n  handleClose()\n}\n\nfunction handleFocusIn(event: FocusEvent) {\n  const target = event.target as HTMLElement\n\n  if (!stable || !wrapper.value || !target || !topTrap.value || !bottomTrap.value) {\n    return\n  }\n\n  const tables = queryTabables(wrapper.value)\n\n  if (!tables.length) {\n    return\n  }\n\n  if (topTrap.value === target) {\n    getLast(tables)!.focus()\n  } else if (bottomTrap.value === target) {\n    tables[0].focus()\n  }\n}\n\nfunction handleResize(entry: ResizeObserverEntry) {\n  emitEvent(props.onResize, entry)\n}\n\nfunction handleEscape(event: KeyboardEvent) {\n  if (!props.disableEsc) {\n    event.preventDefault()\n    handleClose()\n  }\n}\n</script>\n\n<template>\n  <Portal v-if=\"!props.autoRemove || wrapShow\" :to=\"transferTo\">\n    <div\n      v-bind=\"$attrs\"\n      ref=\"wrapper\"\n      :class=\"className\"\n      tabindex=\"-1\"\n      :style=\"style\"\n      @focusin=\"handleFocusIn\"\n      @keydown.escape=\"handleEscape\"\n    >\n      <ResizeObserver @resize=\"handleResize\">\n        <Transition\n          v-if=\"!props.disabled\"\n          appear\n          :name=\"props.maskTransition\"\n          @after-enter=\"afterMaskOpen\"\n          @after-leave=\"afterMaskClose\"\n        >\n          <div v-show=\"currentActive\" :class=\"nh.be('mask')\" @click=\"handleMaskClick\">\n            <slot name=\"mask\">\n              <div :class=\"nh.be('mask-inner')\"></div>\n            </slot>\n          </div>\n        </Transition>\n        <div\n          v-else\n          :class=\"nh.be('placeholder')\"\n          role=\"none\"\n          aria-hidden=\"true\"\n        ></div>\n      </ResizeObserver>\n      <div\n        ref=\"topTrap\"\n        tabindex=\"0\"\n        role=\"none\"\n        style=\"width: 0; height: 0; overflow: hidden; outline: none\"\n      ></div>\n      <div :class=\"nh.be('content')\" @wheel.stop>\n        <Transition\n          v-if=\"props.transitionName\"\n          appear\n          :name=\"props.transitionName\"\n          @after-enter=\"afterContentOpen\"\n          @after-leave=\"afterContentClose\"\n        >\n          <slot :show=\"currentActive\"></slot>\n        </Transition>\n        <slot v-else :show=\"currentActive\"></slot>\n      </div>\n      <div\n        ref=\"bottomTrap\"\n        tabindex=\"0\"\n        role=\"none\"\n        style=\"width: 0; height: 0; overflow: hidden; outline: none\"\n      ></div>\n    </div>\n  </Portal>\n</template>\n"
    },
    {
      "target": "components/masker/props.ts",
      "content": "import { booleanProp, booleanStringProp, buildProps, eventProp } from '@pocui/config'\n\nimport type { ConfigurableProps } from '@pocui/config'\n\nimport type { ExtractPropTypes, PropType } from 'vue'\n\nexport const maskerProps = buildProps({\n  active: booleanProp,\n  closable: booleanProp,\n  inner: booleanProp,\n  maskTransition: String,\n  transitionName: String,\n  disabled: booleanProp,\n  onBeforeClose: Function as PropType<() => any | Promise<any>>,\n  transfer: booleanStringProp,\n  autoRemove: booleanProp,\n  permeable: booleanProp,\n  disableEsc: booleanProp,\n  onToggle: eventProp<(active: boolean) => void>(),\n  onClose: eventProp(),\n  onHide: eventProp(),\n  onShow: eventProp(),\n  onResize: eventProp<(entry: ResizeObserverEntry) => void>(),\n  onMaskClick: eventProp<(event: MouseEvent) => void>()\n})\n\nexport type MaskerProps = ExtractPropTypes<typeof maskerProps>\nexport type MaskerCProps = ConfigurableProps<MaskerProps, never, 'onBeforeClose'>\n"
    }
  ],
  "dependencies": ["vue", "@pocui/config", "@pocui/utils"],
  "registryDependencies": ["portal", "resize-observer", "masker.scss"],
  "categories": ["other"],
  "meta": { "isReferenceOnly": false }
}
